--- a/net/optifine/shaders/ShadersRender.java
+++ b/net/optifine/shaders/ShadersRender.java
@@ -2,6 +2,7 @@
 
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.Lighting;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;
@@ -256,7 +257,7 @@
         }
     }
 
-    public static void renderShadowMap(GameRenderer entityRenderer, Camera activeRenderInfo, int pass, float partialTicks, long finishTimeNano)
+    public static void renderShadowMap(GameRenderer gameRenderer, Camera activeRenderInfo, int pass, float partialTicks, long finishTimeNano)
     {
         if (Shaders.hasShadowMap)
         {
@@ -343,6 +344,7 @@
                 levelrenderer.renderChunkLayer(RenderTypes.SOLID, posestack, d0, d1, d2);
                 Shaders.checkGLError("shadow terrain solid");
                 GlStateManager._enableAlphaTest();
+                GlStateManager._alphaFunc(516, 0.1F);
                 levelrenderer.renderChunkLayer(RenderTypes.CUTOUT_MIPPED, posestack, d0, d1, d2);
                 Shaders.checkGLError("shadow terrain cutoutmipped");
                 minecraft.getTextureManager().getTexture(TextureAtlas.LOCATION_BLOCKS).setFilter(false, false);
@@ -360,7 +362,19 @@
             LevelRenderer levelrenderer1 = minecraft.levelRenderer;
             EntityRenderDispatcher entityrenderdispatcher = minecraft.getEntityRenderDispatcher();
             MultiBufferSource.BufferSource multibuffersource$buffersource = levelrenderer1.getRenderTypeTextures().bufferSource();
-            boolean flag = Shaders.isShadowPass && !minecraft.player.isSpectator();
+
+            if (Shaders.isShadowPass && !minecraft.player.isSpectator())
+            {
+                boolean flag1 = true;
+            }
+            else
+            {
+                boolean flag2 = false;
+            }
+
+            Matrix4f matrix4f = new Matrix4f();
+            matrix4f.setIdentity();
+            Lighting.setupLevel(matrix4f);
 
             for (LevelRenderer.RenderChunkInfo levelrenderer$renderchunkinfo : Shaders.isRenderShadowEntities() ? levelrenderer1.getRenderInfosEntities() : Collections.EMPTY_LIST)
             {
@@ -369,12 +383,23 @@
 
                 for (Entity entity : levelchunk.getEntitySections()[chunkrenderdispatcher$renderchunk.getOrigin().getY() / 16])
                 {
-                    if ((entityrenderdispatcher.shouldRender(entity, frustum, d0, d1, d2) || entity.hasIndirectPassenger(minecraft.player)) && (entity != activeRenderInfo.getEntity() || flag || activeRenderInfo.isDetached() || activeRenderInfo.getEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfo.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || activeRenderInfo.getEntity() == entity))
+                    if ((entityrenderdispatcher.shouldRender(entity, frustum, d0, d1, d2) || entity.hasIndirectPassenger(minecraft.player)) && (!(entity instanceof LocalPlayer) || activeRenderInfo.getEntity() == entity))
                     {
+                        if (entity == activeRenderInfo.getEntity())
+                        {
+                            gameRenderer.restoreRVEPos((LivingEntity)entity);
+                        }
+
                         levelrenderer1.renderedEntity = entity;
                         Shaders.nextEntity(entity);
                         levelrenderer1.renderEntity(entity, d0, d1, d2, partialTicks, posestack, multibuffersource$buffersource);
                         levelrenderer1.renderedEntity = null;
+
+                        if (entity == activeRenderInfo.getEntity())
+                        {
+                            gameRenderer.cacheRVEPos((LivingEntity)entity);
+                            gameRenderer.setupRVE();
+                        }
                     }
                 }
             }
@@ -387,9 +412,9 @@
             Shaders.endEntities();
             Shaders.beginBlockEntities();
             SignRenderer.updateTextRenderDistance();
-            boolean flag1 = Reflector.IForgeTileEntity_getRenderBoundingBox.exists();
+            boolean flag = Reflector.IForgeTileEntity_getRenderBoundingBox.exists();
             Frustum frustum1 = frustum;
-            label100:
+            label101:
 
             for (LevelRenderer.RenderChunkInfo levelrenderer$renderchunkinfo1 : Shaders.isRenderShadowBlockEntities() ? levelrenderer1.getRenderInfosTileEntities() : Collections.EMPTY_LIST)
             {
@@ -408,12 +433,12 @@
                         {
                             if (!iterator.hasNext())
                             {
-                                continue label100;
+                                continue label101;
                             }
 
                             blockentity = (BlockEntity)iterator.next();
 
-                            if (!flag1)
+                            if (!flag)
                             {
                                 break;
                             }
@@ -482,7 +507,6 @@
             GlStateManager._depthMask(true);
             GlStateManager._enableCull();
             GlStateManager._disableBlend();
-            GL30.glFlush();
             Shaders.checkGLError("shadow flush");
             Shaders.isShadowPass = false;
             minecraft.getProfiler().popPush("shadow postprocess");
@@ -578,52 +602,46 @@
 
     public static void preRender(RenderType renderType, BufferBuilder buffer)
     {
-        if (Shaders.isRenderingWorld)
+        if (Shaders.isRenderingWorld && !Shaders.isShadowPass)
         {
-            if (!Shaders.isShadowPass)
+            if (renderType.isGlint())
             {
-                if (renderType.isGlint())
-                {
-                    renderEnchantedGlintBegin();
-                }
-                else if (renderType.getName().equals("eyes"))
-                {
-                    Shaders.beginSpiderEyes();
-                }
-                else if (renderType.getName().equals("crumbling"))
-                {
-                    beginBlockDamage();
-                }
-                else if (renderType == RenderType.LINES)
-                {
-                    Shaders.beginLeash();
-                }
+                renderEnchantedGlintBegin();
+            }
+            else if (renderType.getName().equals("eyes"))
+            {
+                Shaders.beginSpiderEyes();
+            }
+            else if (renderType.getName().equals("crumbling"))
+            {
+                beginBlockDamage();
+            }
+            else if (renderType == RenderType.LINES)
+            {
+                Shaders.beginLeash();
             }
         }
     }
 
     public static void postRender(RenderType renderType, BufferBuilder buffer)
     {
-        if (Shaders.isRenderingWorld)
+        if (Shaders.isRenderingWorld && !Shaders.isShadowPass)
         {
-            if (!Shaders.isShadowPass)
+            if (renderType.isGlint())
             {
-                if (renderType.isGlint())
-                {
-                    renderEnchantedGlintEnd();
-                }
-                else if (renderType.getName().equals("eyes"))
-                {
-                    Shaders.endSpiderEyes();
-                }
-                else if (renderType.getName().equals("crumbling"))
-                {
-                    endBlockDamage();
-                }
-                else if (renderType == RenderType.LINES)
-                {
-                    Shaders.endLeash();
-                }
+                renderEnchantedGlintEnd();
+            }
+            else if (renderType.getName().equals("eyes"))
+            {
+                Shaders.endSpiderEyes();
+            }
+            else if (renderType.getName().equals("crumbling"))
+            {
+                endBlockDamage();
+            }
+            else if (renderType == RenderType.LINES)
+            {
+                Shaders.endLeash();
             }
         }
     }
