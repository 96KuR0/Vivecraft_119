--- a/net/optifine/shaders/Shaders.java
+++ b/net/optifine/shaders/Shaders.java
@@ -141,6 +141,7 @@
 import org.lwjgl.opengl.GL43;
 import org.lwjgl.opengl.GLCapabilities;
 import org.lwjgl.opengl.KHRDebug;
+import org.vivecraft.render.RenderPass;
 
 public class Shaders
 {
@@ -389,13 +390,13 @@
     public static final int MaxShadowColorBuffers = 2;
     public static final int MaxShadowDepthBuffers = 2;
     static int usedColorBuffers = 0;
-    static int usedDepthBuffers = 0;
+    public static int usedDepthBuffers = 0;
     static int usedShadowColorBuffers = 0;
     static int usedShadowDepthBuffers = 0;
     static int usedColorAttachs = 0;
     static int usedDrawBuffers = 0;
     static boolean bindImageTextures = false;
-    static ShadersFramebuffer dfb;
+    public static ShadersFramebuffer dfb;
     static ShadersFramebuffer sfb;
     private static int[] gbuffersFormat = new int[16];
     public static boolean[] gbuffersClear = new boolean[16];
@@ -589,6 +590,8 @@
     private static final Pattern patternLoadEntityDataMap = Pattern.compile("\\s*([\\w:]+)\\s*=\\s*([-]?\\d+)\\s*");
     public static int[] entityData = new int[32];
     public static int entityDataIndex = 0;
+    static float[] sunPositionT = new float[4];
+    static float[] moonPositionT = new float[4];
 
     private Shaders()
     {
@@ -814,9 +817,9 @@
             shadersConfig.store(filewriter, (String)null);
             filewriter.close();
         }
-        catch (Exception exception)
+        catch (Exception exception1)
         {
-            SMCLog.severe("Error saving configuration: " + exception.getClass().getName() + ": " + exception.getMessage());
+            SMCLog.severe("Error saving configuration: " + exception1.getClass().getName() + ": " + exception1.getMessage());
         }
     }
 
@@ -892,7 +895,7 @@
 
     public static void loadShaderPack()
     {
-    	mc = Minecraft.getInstance();
+        mc = Minecraft.getInstance();
         boolean flag = shaderPackLoaded;
         boolean flag1 = isOldLighting();
 
@@ -962,6 +965,47 @@
         loadShaderPackResources();
         loadShaderPackDimensions();
         shaderPackOptions = loadShaderPackOptions();
+
+        for (ShaderOption shaderoption : shaderPackOptions)
+        {
+            System.out.println("Shader Option: " + shaderoption.toString());
+
+            if (shaderoption.getName().toLowerCase().contains("motion_blur"))
+            {
+                shaderoption.setValue("false");
+            }
+
+            if (shaderoption.getName().toLowerCase().contains("motionblur"))
+            {
+                shaderoption.setValue("false");
+            }
+
+            if (shaderoption.getName().toLowerCase().contains("dof"))
+            {
+                shaderoption.setValue("false");
+            }
+
+            if (shaderoption.getName().toLowerCase().contains("dirtyLens"))
+            {
+                shaderoption.setValue("false");
+            }
+
+            if (shaderoption.getName().toLowerCase().contains("lensflare"))
+            {
+                shaderoption.setValue("false");
+            }
+
+            if (shaderoption.getName().toLowerCase().contains("idle_hands"))
+            {
+                shaderoption.setValue("false");
+            }
+
+            if (shaderoption.getName().toLowerCase().contains("taa"))
+            {
+                shaderoption.setValue("false");
+            }
+        }
+
         loadShaderPackFixedProperties();
         loadShaderPackDynamicProperties();
         boolean flag3 = shaderPackLoaded != flag;
@@ -1027,9 +1071,9 @@
                             return file1.isFile() && name.toLowerCase().endsWith(".zip") ? new ShaderPackZip(name, file1) : null;
                         }
                     }
-                    catch (Exception exception)
+                    catch (Exception exception1)
                     {
-                        exception.printStackTrace();
+                        exception1.printStackTrace();
                         return null;
                     }
                 }
@@ -1063,7 +1107,7 @@
         if (shaderPackDimensions.size() > 0)
         {
             Integer[] ainteger = shaderPackDimensions.toArray(new Integer[shaderPackDimensions.size()]);
-            Config.dbg("[Shaders] Worlds: " + Config.arrayToString((Object[])ainteger));
+            Config.dbg("[Shaders] Worlds: " + Config.arrayToString(ainteger));
         }
     }
 
@@ -1095,7 +1139,7 @@
                 shaderPackProfiles = ShaderPackParser.parseProfiles(properties, shaderPackOptions);
                 shaderPackGuiScreens = ShaderPackParser.parseGuiScreens(properties, shaderPackProfiles, shaderPackOptions);
             }
-            catch (IOException ioexception)
+            catch (IOException ioexception1)
             {
                 Config.warn("[Shaders] Error reading: " + s);
             }
@@ -1193,7 +1237,7 @@
                 ShaderPackParser.parseBuffersFlip(properties);
                 colorBufferSizes = ShaderPackParser.parseBufferSizes(properties, 16);
             }
-            catch (IOException ioexception)
+            catch (IOException ioexception1)
             {
                 Config.warn("[Shaders] Error reading: " + s);
             }
@@ -1427,10 +1471,10 @@
                 return new CustomTextureRaw(type, internalFormat, width, height, depth, pixelFormat, pixelType, bytebuffer, textureUnit, texturemetadatasection.isBlur(), texturemetadatasection.isClamp());
             }
         }
-        catch (IOException ioexception)
+        catch (IOException ioexception1)
         {
             SMCLog.warning("Error loading raw texture: " + path);
-            SMCLog.warning("" + ioexception.getClass().getName() + ": " + ioexception.getMessage());
+            SMCLog.warning("" + ioexception1.getClass().getName() + ": " + ioexception1.getMessage());
             return null;
         }
     }
@@ -1462,10 +1506,10 @@
                 return new CustomTexture(textureUnit, s, simpleshadertexture);
             }
         }
-        catch (IOException ioexception)
+        catch (IOException ioexception1)
         {
             SMCLog.warning("Error loading texture: " + path);
-            SMCLog.warning("" + ioexception.getClass().getName() + ": " + ioexception.getMessage());
+            SMCLog.warning("" + ioexception1.getClass().getName() + ": " + ioexception1.getMessage());
             return null;
         }
     }
@@ -1876,10 +1920,10 @@
         {
             saveOptionProperties(sp, properties);
         }
-        catch (IOException ioexception)
+        catch (IOException ioexception1)
         {
             Config.warn("[Shaders] Error saving configuration for " + shaderPack.getName());
-            ioexception.printStackTrace();
+            ioexception1.printStackTrace();
         }
     }
 
@@ -1927,10 +1971,10 @@
 
             return ashaderoption;
         }
-        catch (IOException ioexception)
+        catch (IOException ioexception1)
         {
             Config.warn("[Shaders] Error reading configuration for " + shaderPack.getName());
-            ioexception.printStackTrace();
+            ioexception1.printStackTrace();
             return null;
         }
     }
@@ -2114,7 +2158,7 @@
 
         if (location.equals("setDrawBuffers"))
         {
-            stringbuilder.append(", drawBuffers: " + ArrayUtils.arrayToString((Object[])activeProgram.getDrawBufSettings()));
+            stringbuilder.append(", drawBuffers: " + ArrayUtils.arrayToString(activeProgram.getDrawBufSettings()));
         }
 
         return stringbuilder.toString();
@@ -2577,6 +2621,7 @@
             }
 
             checkGLError("Shaders.init");
+            mc.vrRenderer.reinitFrameBuffers("Shaders Initialized");
         }
     }
 
@@ -3844,34 +3889,31 @@
             file1.getParentFile().mkdirs();
             Config.writeFile(file1, code);
         }
-        catch (IOException ioexception)
+        catch (IOException ioexception1)
         {
             Config.warn("Error saving: " + filename);
-            ioexception.printStackTrace();
+            ioexception1.printStackTrace();
         }
     }
 
     private static void clearDirectory(File dir)
     {
-        if (dir.exists())
+        if (dir.exists() && dir.isDirectory())
         {
-            if (dir.isDirectory())
-            {
-                File[] afile = dir.listFiles();
+            File[] afile = dir.listFiles();
 
-                if (afile != null)
+            if (afile != null)
+            {
+                for (int i = 0; i < afile.length; ++i)
                 {
-                    for (int i = 0; i < afile.length; ++i)
-                    {
-                        File file1 = afile[i];
-
-                        if (file1.isDirectory())
-                        {
-                            clearDirectory(file1);
-                        }
+                    File file1 = afile[i];
 
-                        file1.delete();
+                    if (file1.isDirectory())
+                    {
+                        clearDirectory(file1);
                     }
+
+                    file1.delete();
                 }
             }
         }
@@ -4203,7 +4245,18 @@
         setProgramUniform1f(uniform_viewHeight, (float)renderHeight);
         setProgramUniform1f(uniform_near, 0.05F);
         setProgramUniform1f(uniform_far, (float)(mc.options.renderDistance * 16));
-        setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+
+        if (Minecraft.getInstance().currentPass == RenderPass.THIRD)
+        {
+            setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+            setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+        }
+        else
+        {
+            setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+            setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+        }
+
         setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
         setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
         setProgramUniform3f(uniform_upPosition, upPosition[0], upPosition[1], upPosition[2]);
@@ -4492,7 +4545,7 @@
                     }
                 }
             }
-            catch (Exception exception2)
+            catch (Exception exception21)
             {
                 SMCLog.warning("Error parsing mc_Entity_x.txt");
             }
@@ -4635,8 +4688,9 @@
     {
         renderDisplayWidth = mc.getWindow().getWidth();
         renderDisplayHeight = mc.getWindow().getHeight();
-        renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
-        renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
+        renderWidth = Math.round((float)renderDisplayWidth);
+        renderHeight = Math.round((float)renderDisplayHeight);
+        System.out.println("Shaders Render Res: " + renderWidth + " x " + renderHeight);
         setupFrameBuffer();
     }
 
@@ -4753,9 +4807,10 @@
             }
         }
 
-        if (mc.getWindow().getWidth() != renderDisplayWidth || mc.getWindow().getHeight() != renderDisplayHeight)
+        if (mc.vrRenderer.reinitShadersFlag || mc.getWindow().getWidth() != renderDisplayWidth || mc.getWindow().getHeight() != renderDisplayHeight)
         {
             resize();
+            mc.vrRenderer.reinitShadersFlag = false;
         }
 
         if (needResizeShadow)
@@ -4807,7 +4862,7 @@
 
             if (entity != null)
             {
-                isSleeping = entity instanceof LivingEntity && ((LivingEntity)entity).isSleeping();
+                isSleeping = false;
                 eyePosY = (float)activeRenderInfo.getPosition().y();
                 eyeBrightness = mc.getEntityRenderDispatcher().getPackedLightCoords(entity, partialTicks);
                 float f2 = (float)diffSystemTime * 0.01F;
@@ -4836,7 +4891,6 @@
 
                     if (livingentity.hasEffect(MobEffects.NIGHT_VISION))
                     {
-                        GameRenderer gamerenderer = entityRenderer;
                         nightVision = GameRenderer.getNightVisionScale(livingentity, partialTicks);
                     }
 
@@ -4894,7 +4948,13 @@
         GL30.glVertexAttrib4f(DefaultVertexFormat.ELEMENT_COLOR.getAttributeIndex(), 1.0F, 1.0F, 1.0F, 1.0F);
         GL30.glVertexAttrib2s(DefaultVertexFormat.ELEMENT_UV2.getAttributeIndex(), (short)240, (short)240);
         GL30.glVertexAttrib3f(DefaultVertexFormat.ELEMENT_NORMAL.getAttributeIndex(), 0.0F, 1.0F, 0.0F);
-        ShadersRender.renderShadowMap(entityRenderer, activeRenderInfo, 0, partialTicks, finishTimeNano);
+        
+        //Vivecraft only do shadow sometimes. 
+        if (mc.currentPass == RenderPass.LEFT || mc.currentPass == RenderPass.THIRD || mc.currentPass == RenderPass.CAMERA)
+        {
+            ShadersRender.renderShadowMap(entityRenderer, activeRenderInfo, 0, partialTicks, finishTimeNano);
+    	}
+    
         mc.getProfiler().pop();
         dfb.setColorTextures(true);
         setRenderStage(RenderStage.NONE);
@@ -4927,12 +4987,12 @@
         bindCustomTextures(customTextures);
     }
 
-    public static void checkWorldChanged(ClientLevel world)
+    public static void checkWorldChanged(ClientLevel worldin)
     {
-        if (currentWorld != world)
+        if (currentWorld != worldin)
         {
             Level level = currentWorld;
-            currentWorld = world;
+            currentWorld = worldin;
 
             if (currentWorld == null)
             {
@@ -4946,7 +5006,7 @@
 
             setCameraOffset(mc.getCameraEntity());
             int i = WorldUtils.getDimensionId(level);
-            int j = WorldUtils.getDimensionId(world);
+            int j = WorldUtils.getDimensionId(worldin);
 
             if (j != i)
             {
@@ -5231,12 +5291,25 @@
         Matrix4f matrix4f1 = new Matrix4f(matrix4f);
         matrix4f1.transpose();
         matrix4f1.write(tempMat);
-        SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
-        SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
-        System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
-        setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
-        setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
-        setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+
+        if (Minecraft.getInstance().currentPass == RenderPass.THIRD)
+        {
+            SMath.multiplyMat4xVec4(sunPositionT, tempMat, sunPosModelView);
+            SMath.multiplyMat4xVec4(moonPositionT, tempMat, moonPosModelView);
+            System.arraycopy(shadowAngle == sunAngle ? sunPositionT : moonPosition, 0, shadowLightPosition, 0, 3);
+            setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+            setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+            setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+        }
+        else
+        {
+            SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
+            SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
+            System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
+            setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+            setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+            setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+        }
 
         if (customUniforms != null)
         {
@@ -5403,7 +5476,6 @@
         GlStateManager.disableAlphaTest();
         GlStateManager._disableBlend();
         GlStateManager._enableDepthTest();
-        GlStateManager._depthFunc(519);
         GlStateManager._depthMask(false);
         bindTextures(0, customTextures);
         framebuffer.bindColorImages(true);
@@ -6376,9 +6448,9 @@
     {
         try
         {
-            Class e = Class.forName("shadersmod.transform.SMCClassTransformer");
+            Class throwable = Class.forName("shadersmod.transform.SMCClassTransformer");
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
             return;
         }
@@ -6406,6 +6478,7 @@
     private static void loadShaderPackResources()
     {
         shaderPackResources = new HashMap<>();
+        System.out.println("loadShaderPackResources " + shaderPackLoaded);
 
         if (shaderPackLoaded)
         {
@@ -6439,13 +6512,14 @@
                         {
                             String s6 = properties.getProperty(s5);
                             shaderPackResources.put(s5, s6);
+                            System.out.println("put " + s5 + " " + s6);
                         }
                     }
                 }
             }
-            catch (IOException ioexception)
+            catch (IOException ioexception1)
             {
-                ioexception.printStackTrace();
+                ioexception1.printStackTrace();
             }
         }
     }
