--- a/net/minecraft/world/entity/projectile/Projectile.java
+++ b/net/minecraft/world/entity/projectile/Projectile.java
@@ -7,12 +7,15 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
 
 public abstract class Projectile extends Entity
 {
@@ -86,9 +89,9 @@
 
         if (entity != null)
         {
-            for (Entity entity1 : this.level.getEntities(this, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), (p_37272_) ->
+            for (Entity entity1 : this.level.getEntities(this, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), (p_234613_0_) ->
         {
-            return !p_37272_.isSpectator() && p_37272_.isPickable();
+            return !p_234613_0_.isSpectator() && p_234613_0_.isPickable();
             }))
             {
                 if (entity1.getRootVehicle() == entity.getRootVehicle())
@@ -114,12 +117,29 @@
 
     public void shootFromRotation(Entity p_37252_, float p_37253_, float p_37254_, float p_37255_, float p_37256_, float p_37257_)
     {
-        float f = -Mth.sin(p_37254_ * ((float)Math.PI / 180F)) * Mth.cos(p_37253_ * ((float)Math.PI / 180F));
-        float f1 = -Mth.sin((p_37253_ + p_37255_) * ((float)Math.PI / 180F));
-        float f2 = Mth.cos(p_37254_ * ((float)Math.PI / 180F)) * Mth.cos(p_37253_ * ((float)Math.PI / 180F));
-        this.shoot((double)f, (double)f1, (double)f2, p_37256_, p_37257_);
-        Vec3 vec3 = p_37252_.getDeltaMovement();
-        this.setDeltaMovement(this.getDeltaMovement().add(vec3.x, p_37252_.isOnGround() ? 0.0D : vec3.y, vec3.z));
+        ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(p_37252_.getUUID());
+
+        if (serverviveplayer != null && serverviveplayer.isVR())
+        {
+            Vec3 vec3 = serverviveplayer.getControllerDir(serverviveplayer.activeHand);
+
+            if (this instanceof AbstractArrow && !(this instanceof ThrownTrident) && !serverviveplayer.isSeated() && serverviveplayer.getDraw() > 0.0F)
+            {
+                vec3 = serverviveplayer.getControllerPos(1, (Player)p_37252_).subtract(serverviveplayer.getControllerPos(0, (Player)p_37252_)).normalize();
+                p_37256_ *= serverviveplayer.getDraw();
+                ((AbstractArrow)this).setBaseDamage(((AbstractArrow)this).getBaseDamage() * 2.0D);
+            }
+
+            p_37253_ = -((float)Math.toDegrees(Math.asin(vec3.y / vec3.length())));
+            p_37254_ = (float)Math.toDegrees(Math.atan2(-vec3.x, vec3.z));
+        }
+
+        float f2 = -Mth.sin(p_37254_ * ((float)Math.PI / 180F)) * Mth.cos(p_37253_ * ((float)Math.PI / 180F));
+        float f = -Mth.sin((p_37253_ + p_37255_) * ((float)Math.PI / 180F));
+        float f1 = Mth.cos(p_37254_ * ((float)Math.PI / 180F)) * Mth.cos(p_37253_ * ((float)Math.PI / 180F));
+        this.shoot((double)f2, (double)f, (double)f1, p_37256_, p_37257_);
+        Vec3 vec31 = p_37252_.getDeltaMovement();
+        this.setDeltaMovement(this.getDeltaMovement().add(vec31.x, p_37252_.isOnGround() ? 0.0D : vec31.y, vec31.z));
     }
 
     protected void onHit(HitResult p_37260_)
