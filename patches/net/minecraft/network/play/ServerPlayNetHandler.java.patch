--- a/net/minecraft/network/play/ServerPlayNetHandler.java
+++ b/net/minecraft/network/play/ServerPlayNetHandler.java
@@ -4,10 +4,17 @@
 import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
+import io.netty.channel.Channel;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import it.unimi.dsi.fastutil.ints.Int2ShortMap;
 import it.unimi.dsi.fastutil.ints.Int2ShortOpenHashMap;
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
 import java.util.Collections;
 import java.util.Optional;
 import java.util.Set;
@@ -19,6 +26,7 @@
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.CommandBlockBlock;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.CommandSource;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -26,6 +34,8 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.IJumpingMount;
 import net.minecraft.entity.MoverType;
+import net.minecraft.entity.Pose;
+import net.minecraft.entity.ai.attributes.Attribute;
 import net.minecraft.entity.item.BoatEntity;
 import net.minecraft.entity.item.ExperienceOrbEntity;
 import net.minecraft.entity.item.ItemEntity;
@@ -51,6 +61,7 @@
 import net.minecraft.nbt.StringNBT;
 import net.minecraft.network.IPacket;
 import net.minecraft.network.NetworkManager;
+import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.PacketThreadUtil;
 import net.minecraft.network.play.client.CAnimateHandPacket;
 import net.minecraft.network.play.client.CChatMessagePacket;
@@ -141,9 +152,18 @@
 import net.minecraft.world.IWorldReader;
 import net.minecraft.world.World;
 import net.minecraft.world.server.ServerWorld;
+import net.optifine.reflect.Reflector;
+import net.optifine.reflect.ReflectorField;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import org.vivecraft.api.AimFixHandler;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.reflection.MCReflection;
+
 public class ServerPlayNetHandler implements IServerPlayNetHandler
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -187,6 +207,9 @@
         networkManagerIn.setNetHandler(this);
         this.player = playerIn;
         playerIn.connection = this;
+        // VIVECRAFT
+        ((Channel)MCReflection.NetworkManager_channel.get(networkManagerIn)).pipeline().addBefore("packet_handler", "vr_aim_fix", new AimFixHandler(netManager));
+        //
     }
 
     public void tick()
@@ -282,6 +305,8 @@
         {
             this.disconnect(new TranslationTextComponent("multiplayer.disconnect.idling"));
         }
+        //VIVECRAFT
+        NetworkHelper.sendPosData(player); //has to go somewhere?
     }
 
     public void captureCurrentPosition()
@@ -397,11 +422,17 @@
                 }
 
                 entity.setPositionAndRotation(d3, d4, d5, f, f1);
+                //Forge
+                this.player.setPositionAndRotation(d3, d4, d5, this.player.rotationYaw, this.player.rotationPitch); // Forge - Resync player position on vehicle moving
+                //
                 boolean flag2 = serverworld.hasNoCollisions(entity, entity.getBoundingBox().shrink(0.0625D));
 
                 if (flag && (flag1 || !flag2))
                 {
                     entity.setPositionAndRotation(d0, d1, d2, f, f1);
+                    //Forge
+                    this.player.setPositionAndRotation(d3, d4, d5, this.player.rotationYaw, this.player.rotationPitch); // Forge - Resync player position on vehicle moving
+                    //
                     this.netManager.sendPacket(new SMoveVehiclePacket(entity));
                     return;
                 }
@@ -1097,7 +1128,18 @@
 
         if (blockpos.getY() < this.server.getBuildLimit())
         {
-            if (this.targetPos == null && this.player.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0D && serverworld.isBlockModifiable(this.player, blockpos))
+        	double dist = 8D;
+        	
+        	//Forge
+        	
+        	Object attrib =Reflector.call(Reflector.getFieldValue(Reflector.ForgeMod_REACH_DISTANCE), Reflector.RegistryObject_get);
+        	
+        	if(attrib != null)
+        		dist = player.getAttribute((Attribute) attrib).getValue() + 3;
+        	//
+        	
+            dist *= dist;
+            if (this.targetPos == null && this.player.getDistanceSq((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < dist && serverworld.isBlockModifiable(this.player, blockpos))
             {
                 ActionResultType actionresulttype = this.player.interactionManager.func_219441_a(this.player, serverworld, itemstack, hand, blockraytraceresult);
 
@@ -1251,43 +1293,51 @@
 
     public void processChatMessage(CChatMessagePacket packetIn)
     {
-        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.player.getServerWorld());
-
-        if (this.player.getChatVisibility() == ChatVisibility.HIDDEN)
-        {
-            this.sendPacket(new SChatPacket((new TranslationTextComponent("chat.cannotSend")).mergeStyle(TextFormatting.RED), ChatType.SYSTEM, Util.DUMMY_UUID));
-        }
-        else
-        {
-            this.player.markPlayerActive();
-            String s = org.apache.commons.lang3.StringUtils.normalizeSpace(packetIn.getMessage());
-
-            for (int i = 0; i < s.length(); ++i)
-            {
-                if (!SharedConstants.isAllowedCharacter(s.charAt(i)))
-                {
-                    this.disconnect(new TranslationTextComponent("multiplayer.disconnect.illegal_characters"));
-                    return;
-                }
-            }
-
-            if (s.startsWith("/"))
-            {
-                this.handleSlashCommand(s);
-            }
-            else
-            {
-                ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.player.getDisplayName(), s);
-                this.server.getPlayerList().func_232641_a_(itextcomponent, ChatType.CHAT, this.player.getUniqueID());
-            }
-
-            this.chatSpamThresholdCount += 20;
+    	PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.player.getServerWorld());
 
-            if (this.chatSpamThresholdCount > 200 && !this.server.getPlayerList().canSendCommands(this.player.getGameProfile()))
-            {
-                this.disconnect(new TranslationTextComponent("disconnect.spam"));
-            }
-        }
+    	if (this.player.getChatVisibility() == ChatVisibility.HIDDEN)
+    	{
+    		this.sendPacket(new SChatPacket((new TranslationTextComponent("chat.cannotSend")).mergeStyle(TextFormatting.RED), ChatType.SYSTEM, Util.DUMMY_UUID));
+    	}
+    	else
+    	{
+    		this.player.markPlayerActive();
+    		String s = org.apache.commons.lang3.StringUtils.normalizeSpace(packetIn.getMessage());
+
+    		for (int i = 0; i < s.length(); ++i)
+    		{
+    			if (!SharedConstants.isAllowedCharacter(s.charAt(i)))
+    			{
+    				this.disconnect(new TranslationTextComponent("multiplayer.disconnect.illegal_characters"));
+    				return;
+    			}
+    		}
+
+    		if (s.startsWith("/"))
+    		{
+    			this.handleSlashCommand(s);
+    		}
+    		else
+    		{
+    			//Forge
+    			if(Reflector.ForgeHooks_newChatWithLinks.exists()) {
+    				ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.player.getDisplayName(), Reflector.call(Reflector.ForgeHooks_newChatWithLinks, s));
+    				itextcomponent = (ITextComponent) Reflector.call(Reflector.ForgeHooks_onServerChatEvent, this, s, itextcomponent);
+    				if (itextcomponent == null) return;
+    			} else {
+    				//
+    				ITextComponent itextcomponent = new TranslationTextComponent("chat.type.text", this.player.getDisplayName(), s);
+    				this.server.getPlayerList().func_232641_a_(itextcomponent, ChatType.CHAT, this.player.getUniqueID());
+    			}
+    		}
+
+    		this.chatSpamThresholdCount += 20;
+
+    		if (this.chatSpamThresholdCount > 200 && !this.server.getPlayerList().canSendCommands(this.player.getGameProfile()))
+    		{
+    			this.disconnect(new TranslationTextComponent("disconnect.spam"));
+    		}
+    	}
     }
 
     private void handleSlashCommand(String command)
@@ -1402,6 +1452,9 @@
                 }
                 else if (packetIn.getAction() == CUseEntityPacket.Action.INTERACT_AT)
                 {
+                    //Forge
+                    if (Reflector.call(Reflector.ForgeHooks_onInteractEntityAt, player, entity, packetIn.getHitVec(), hand) != null) return;
+                    //
                     optional = Optional.of(entity.applyPlayerInteraction(this.player, packetIn.getHitVec(), hand));
                 }
                 else if (packetIn.getAction() == CUseEntityPacket.Action.ATTACK)
@@ -1674,6 +1727,117 @@
 
     public void processCustomPayload(CCustomPayloadPacket packetIn)
     {
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.player.getServerWorld());
+        //Forge
+        Reflector.call(Reflector.NetworkHooks_onCustomPayload, packetIn, this.netManager);
+        //
+        
+        PacketBuffer rawdata = (PacketBuffer) MCReflection.CCustomPayloadPacket_data.get(packetIn);
+        ResourceLocation channel = (ResourceLocation) MCReflection.CCustomPayloadPacket_channel.get(packetIn);
+
+        String s = channel.getNamespace();
+        String d = channel.getPath();
+        
+        // VIVE START - client querying if server is running this mod too      		
+        if (s.equalsIgnoreCase("vivecraft") && d.equalsIgnoreCase("data"))
+        {
+        	int len = rawdata.readableBytes();
+        	PacketDiscriminators dis = PacketDiscriminators.values()[rawdata.readByte()];
+    		byte[] data = new byte[len-1];
+    		rawdata.readBytes(data);
+    		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.player.getUniqueID());
+    		if(vp == null && dis != PacketDiscriminators.VERSION) {
+    			//how?
+    			return;
+    		}
+        	switch (dis){
+        	case VERSION:
+            	String ver = Minecraft.getInstance().minecriftVerString;
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.VERSION,ver));
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.REQUESTDATA, new byte[]{}));  
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.CLIMBING, new byte[]{1, 0}));
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.TELEPORT, new byte[]{}));
+                sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.CRAWL, new byte[]{}));
+                vp = new ServerVivePlayer(this.player);
+            	NetworkHelper.vivePlayers.put(this.player.getUniqueID(), vp);
+            	
+            	BufferedReader br = new BufferedReader(
+            			new InputStreamReader(
+            					new DataInputStream(
+            							new ByteArrayInputStream(data))));
+    			
+    			String v;
+				try {
+					v = br.readLine();
+					if(v.contains("NONVR")){
+						this.player.sendMessage(new StringTextComponent("NONVR: " + this.player.getDisplayName().getString()), this.player.getUniqueID());
+						vp.setVR(false);
+					}
+					else{
+						this.player.sendMessage(new StringTextComponent("VR: " + this.player.getDisplayName().getString()), this.player.getUniqueID());
+						vp.setVR(true);
+					}  
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}     
+        		break;
+    		case CONTROLLER0DATA:
+    			vp.controller0data = data;
+    			break;
+    		case CONTROLLER1DATA:
+    			vp.controller1data = data;
+    			break;
+    		case DRAW:
+    			vp.draw = data;
+    			break;
+    		case HEADDATA:
+    			vp.hmdData = data;
+    			break;	
+    		case MOVEMODE:
+    			break;
+    		case REQUESTDATA:
+    			//only we can use that word.
+    			break;
+    		case WORLDSCALE:
+            	rawdata.resetReaderIndex();
+            	rawdata.readByte();
+    			vp.worldScale = rawdata.readFloat();
+    			break;
+    		case HEIGHT:
+            	rawdata.resetReaderIndex();
+            	rawdata.readByte();
+    			vp.heightscale = rawdata.readFloat();
+    			break;			
+    		case TELEPORT:
+            	rawdata.resetReaderIndex();
+            	rawdata.readByte();
+    			float x = rawdata.readFloat();
+				float y = rawdata.readFloat();
+				float z = rawdata.readFloat();
+				this.player.setPositionAndRotation(x, y, z, this.player.rotationYaw, this.player.rotationPitch);
+    			break;
+    		case CLIMBING:
+    			this.player.fallDistance = 0;
+    		case ACTIVEHAND:
+    			rawdata.resetReaderIndex();
+    			rawdata.readByte();
+    			vp.activeHand = rawdata.readByte();
+    			if (vp.isSeated())
+    				vp.activeHand = 0;
+    			break;
+    		case CRAWL:
+                rawdata.resetReaderIndex();
+                rawdata.readByte();
+                vp.crawling = rawdata.readByte() != 0;
+    		    if (vp.crawling)
+                    this.player.setPose(Pose.SWIMMING);
+    		    break;
+        	default:
+        		break;
+        	}
+        }
+        // VIVE END - vivecraft packets
     }
 
     public void func_217263_a(CSetDifficultyPacket p_217263_1_)
