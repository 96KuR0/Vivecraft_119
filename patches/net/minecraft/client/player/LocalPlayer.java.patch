--- a/net/minecraft/client/player/LocalPlayer.java
+++ b/net/minecraft/client/player/LocalPlayer.java
@@ -1,6 +1,9 @@
 package net.minecraft.client.player;
 
 import com.google.common.collect.Lists;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
@@ -15,6 +18,7 @@
 import net.minecraft.client.gui.screens.inventory.MinecartCommandBlockEditScreen;
 import net.minecraft.client.gui.screens.inventory.SignEditScreen;
 import net.minecraft.client.gui.screens.inventory.StructureBlockEditScreen;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.client.multiplayer.ClientPacketListener;
 import net.minecraft.client.resources.sounds.AmbientSoundHandler;
@@ -27,11 +31,14 @@
 import net.minecraft.client.resources.sounds.UnderwaterAmbientSoundInstances;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ItemParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ServerboundChatPacket;
 import net.minecraft.network.protocol.game.ServerboundClientCommandPacket;
+import net.minecraft.network.protocol.game.ServerboundContainerClickPacket;
 import net.minecraft.network.protocol.game.ServerboundContainerClosePacket;
+import net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket;
 import net.minecraft.network.protocol.game.ServerboundMovePlayerPacket;
 import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket;
@@ -60,22 +67,39 @@
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.entity.vehicle.Boat;
+import net.minecraft.world.inventory.ClickType;
 import net.minecraft.world.item.ElytraItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.item.UseAnim;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.level.BaseCommandBlock;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.optifine.reflect.Reflector;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.logging.log4j.LogManager;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.gameplay.VRPlayer;
+import org.vivecraft.physicalinventory.TransactionMutex;
+import org.vivecraft.render.VRFirstPersonArmSwing;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.external.jinfinadeck;
+import org.vivecraft.utils.external.jkatvr;
 
 public class LocalPlayer extends AbstractClientPlayer
 {
@@ -99,6 +123,13 @@
     public Input input;
     protected final Minecraft minecraft;
     protected int sprintTriggerTime;
+    public int movementTeleportTimer;
+    public boolean initFromServer;
+    public boolean teleported;
+    public double additionX = 0.0D;
+    public double additionZ = 0.0D;
+    public double additionY = 0.0D;
+    public final float PIOVER180 = ((float)Math.PI / 180F);
     public int sprintTime;
     public float yBob;
     public float xBob;
@@ -116,6 +147,10 @@
     private boolean wasFallFlying;
     private int waterVisionTime;
     private boolean showDeathScreen = true;
+    HashMap<Pair<Short, Integer>, TransactionMutex> pendingTransactions = new HashMap<>();
+    private boolean snapReq = false;
+    public String lastMsg = null;
+    private Vec3 moveMulIn;
 
     public LocalPlayer(Minecraft p_108621_, ClientLevel p_108622_, ClientPacketListener p_108623_, StatsCounter p_108624_, ClientRecipeBook p_108625_, boolean p_108626_, boolean p_108627_)
     {
@@ -131,6 +166,101 @@
         this.ambientSoundHandlers.add(new BiomeAmbientSoundsHandler(this, p_108621_.getSoundManager(), p_108622_.getBiomeManager()));
     }
 
+    public void setItemInUseClient(ItemStack item, InteractionHand hand)
+    {
+        this.useItem = item;
+
+        if (item != ItemStack.EMPTY)
+        {
+            this.startedUsingItem = true;
+            this.usingItemHand = hand;
+        }
+        else
+        {
+            this.startedUsingItem = false;
+            this.usingItemHand = hand;
+        }
+    }
+
+    public void setItemInUseCountClient(int count)
+    {
+        this.useItemRemaining = count;
+    }
+
+    public boolean windowClickSynced(final int windowId, int slotId, int mouseButton, ClickType type, final long timeout)
+    {
+        final short short1 = this.containerMenu.backup(this.inventory);
+        ItemStack itemstack = this.containerMenu.clicked(slotId, mouseButton, type, this);
+        final TransactionMutex transactionmutex = new TransactionMutex();
+        Thread thread = new Thread(this.minecraft.backgroundThreadGroup, new Runnable()
+        {
+            public void run()
+            {
+                try
+                {
+                    Thread.sleep(timeout);
+
+                    synchronized (transactionmutex)
+                    {
+                        if (transactionmutex.consumed)
+                        {
+                            return;
+                        }
+
+                        transactionmutex.approved = false;
+                        transactionmutex.consumed = true;
+                        LocalPlayer.this.pendingTransactions.remove(Pair.of(short1, windowId));
+                        transactionmutex.notifyAll();
+                        LogManager.getLogger().warn("Timeout on window operation " + short1);
+                    }
+                }
+                catch (InterruptedException interruptedexception1)
+                {
+                }
+            }
+        });
+        transactionmutex.watchdog = thread;
+        this.pendingTransactions.put(Pair.of(short1, windowId), transactionmutex);
+
+        try
+        {
+            synchronized (transactionmutex)
+            {
+                this.connection.send(new ServerboundContainerClickPacket(windowId, slotId, mouseButton, type, itemstack, short1));
+                thread.start();
+                transactionmutex.wait();
+                return transactionmutex.approved;
+            }
+        }
+        catch (InterruptedException interruptedexception)
+        {
+            interruptedexception.printStackTrace();
+            return false;
+        }
+    }
+
+    public void confirmTransaction(short transactionID, int windowId, boolean approved)
+    {
+        TransactionMutex transactionmutex = this.pendingTransactions.get(Pair.of(transactionID, windowId));
+
+        if (transactionmutex != null)
+        {
+            synchronized (transactionmutex)
+            {
+                if (transactionmutex.consumed)
+                {
+                    return;
+                }
+
+                transactionmutex.watchdog.interrupt();
+                this.pendingTransactions.remove(Pair.of(transactionID, windowId));
+                transactionmutex.approved = approved;
+                transactionmutex.consumed = true;
+                transactionmutex.notifyAll();
+            }
+        }
+    }
+
     public boolean hurt(DamageSource p_108662_, float p_108663_)
     {
         return false;
@@ -160,6 +290,8 @@
                 this.setYHeadRot(p_108667_.yRot);
             }
 
+            this.minecraft.vehicleTracker.onStartRiding(p_108667_, this);
+            this.snapReq = true;
             return true;
         }
     }
@@ -168,6 +300,7 @@
     {
         super.removeVehicle();
         this.handsBusy = false;
+        this.minecraft.vehicleTracker.onStopRiding(this);
     }
 
     public float getViewXRot(float p_108742_)
@@ -185,6 +318,8 @@
         if (this.level.hasChunkAt(new BlockPos(this.getX(), 0.0D, this.getZ())))
         {
             super.tick();
+            NetworkHelper.overridePose(this);
+            this.minecraft.vrPlayer.doPermanantLookOverride(this, this.minecraft.vrPlayer.vrdata_world_pre);
 
             if (this.isPassenger())
             {
@@ -253,7 +388,20 @@
             boolean flag1 = d4 * d4 + d0 * d0 + d1 * d1 > 9.0E-4D || this.positionReminder >= 20;
             boolean flag2 = d2 != 0.0D || d3 != 0.0D;
 
-            if (this.isPassenger())
+            if (this.teleported)
+            {
+                this.teleported = false;
+                flag2 = true;
+                ByteBuf bytebuf = Unpooled.buffer();
+                bytebuf.writeFloat((float)this.getX());
+                bytebuf.writeFloat((float)this.getY());
+                bytebuf.writeFloat((float)this.getZ());
+                byte[] abyte = new byte[bytebuf.readableBytes()];
+                bytebuf.readBytes(abyte);
+                ServerboundCustomPayloadPacket serverboundcustompayloadpacket = NetworkHelper.getVivecraftClientPacket(NetworkHelper.PacketDiscriminators.TELEPORT, abyte);
+                this.connection.send(serverboundcustompayloadpacket);
+            }
+            else if (this.isPassenger())
             {
                 Vec3 vec3 = this.getDeltaMovement();
                 this.connection.send(new ServerboundMovePlayerPacket.PosRot(vec3.x, -999.0D, vec3.z, this.yRot, this.xRot, this.onGround));
@@ -291,6 +439,12 @@
             }
 
             this.lastOnGround = this.onGround;
+
+            if (this.minecraft.vrSettings.walkUpBlocks)
+            {
+                this.minecraft.options.autoJump = false;
+            }
+
             this.autoJumpEnabled = this.minecraft.options.autoJump;
         }
     }
@@ -305,10 +459,29 @@
     public void chat(String p_108740_)
     {
         this.connection.send(new ServerboundChatPacket(p_108740_));
+        this.lastMsg = p_108740_;
+    }
+
+    public void swingArm(InteractionHand hand, VRFirstPersonArmSwing animation)
+    {
+        this.minecraft.getItemInHandRenderer().swingType = animation;
+        this.swing(hand);
     }
 
     public void swing(InteractionHand p_108660_)
     {
+        if (!this.swinging)
+        {
+            if (this.minecraft.hitResult != null && this.minecraft.hitResult.getType() != HitResult.Type.MISS)
+            {
+                this.minecraft.getItemInHandRenderer().xdist = (float)this.minecraft.hitResult.getLocation().subtract(this.minecraft.vrPlayer.vrdata_world_pre.getController(p_108660_.ordinal()).getPosition()).length();
+            }
+            else
+            {
+                this.minecraft.getItemInHandRenderer().xdist = 0.0F;
+            }
+        }
+
         super.swing(p_108660_);
         this.connection.send(new ServerboundSwingPacket(p_108660_));
     }
@@ -501,9 +674,9 @@
     {
         AABB aabb = this.getBoundingBox();
         AABB aabb1 = (new AABB((double)p_108747_.getX(), aabb.minY, (double)p_108747_.getZ(), (double)p_108747_.getX() + 1.0D, aabb.maxY, (double)p_108747_.getZ() + 1.0D)).deflate(1.0E-7D);
-        return !this.level.noBlockCollision(this, aabb1, (p_108688_, p_108689_) ->
+        return !this.level.noBlockCollision(this, aabb1, (state, pos2) ->
         {
-            return p_108688_.isSuffocating(this.level, p_108689_);
+            return state.isSuffocating(this.level, pos2);
         });
     }
 
@@ -549,7 +722,23 @@
 
     public void playSound(SoundEvent p_108651_, float p_108652_, float p_108653_)
     {
-        this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), p_108651_, this.getSoundSource(), p_108652_, p_108653_, false);
+        SoundSource soundsource = this.getSoundSource();
+
+        if (Reflector.ForgeEventFactory_onPlaySoundAtEntity.exists())
+        {
+            Object object = Reflector.ForgeEventFactory_onPlaySoundAtEntity.call(this, p_108651_, this.getSoundSource(), p_108652_, p_108653_);
+
+            if (Reflector.callBoolean(object, Reflector.Event_isCanceled) || Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound) == null)
+            {
+                return;
+            }
+
+            p_108651_ = (SoundEvent)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getSound);
+            soundsource = (SoundSource)Reflector.call(object, Reflector.PlaySoundAtEntityEvent_getCategory);
+            p_108652_ = Reflector.callFloat(object, Reflector.PlaySoundAtEntityEvent_getVolume);
+        }
+
+        this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), p_108651_, soundsource, p_108652_, p_108653_, false);
     }
 
     public void playNotifySound(SoundEvent p_108655_, SoundSource p_108656_, float p_108657_, float p_108658_)
@@ -722,6 +911,7 @@
         boolean flag2 = this.hasEnoughImpulseToStartSprinting();
         this.crouching = !this.abilities.flying && !this.isSwimming() && this.canEnterPose(Pose.CROUCHING) && (this.isShiftKeyDown() || !this.isSleeping() && !this.canEnterPose(Pose.STANDING));
         this.input.tick(this.isMovingSlowly());
+        Reflector.call(Reflector.ForgeHooksClient_onInputUpdate, this, this.input);
         this.minecraft.getTutorial().onInput(this.input);
 
         if (this.isUsingItem() && !this.isPassenger())
@@ -790,7 +980,7 @@
             }
         }
 
-        boolean flag7 = false;
+        boolean flag8 = false;
 
         if (this.abilities.mayfly)
         {
@@ -799,7 +989,7 @@
                 if (!this.abilities.flying)
                 {
                     this.abilities.flying = true;
-                    flag7 = true;
+                    flag8 = true;
                     this.onUpdateAbilities();
                 }
             }
@@ -812,18 +1002,24 @@
                 else if (!this.isSwimming())
                 {
                     this.abilities.flying = !this.abilities.flying;
-                    flag7 = true;
+                    flag8 = true;
                     this.onUpdateAbilities();
                     this.jumpTriggerTime = 0;
                 }
             }
         }
 
-        if (this.input.jumping && !flag7 && !flag && !this.abilities.flying && !this.isPassenger() && !this.onClimbable())
+        if (this.input.jumping && !flag8 && !flag && !this.abilities.flying && !this.isPassenger() && !this.onClimbable())
         {
             ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
+            boolean flag7 = itemstack.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(itemstack);
 
-            if (itemstack.getItem() == Items.ELYTRA && ElytraItem.isFlyEnabled(itemstack) && this.tryToStartFallFlying())
+            if (Reflector.IForgeItemStack_canElytraFly.exists())
+            {
+                flag7 = Reflector.callBoolean(itemstack, Reflector.IForgeItemStack_canElytraFly, this);
+            }
+
+            if (flag7 && this.tryToStartFallFlying())
             {
                 this.connection.send(new ServerboundPlayerCommandPacket(this, ServerboundPlayerCommandPacket.Action.START_FALL_FLYING));
             }
@@ -912,6 +1108,7 @@
         }
 
         super.aiStep();
+        this.minecraft.vrPlayer.tick(this, this.minecraft, this.random);
 
         if (this.onGround && this.abilities.flying && !this.minecraft.gameMode.isAlwaysFlying())
         {
@@ -1007,10 +1204,67 @@
 
     public void move(MoverType p_108670_, Vec3 p_108671_)
     {
-        double d0 = this.getX();
-        double d1 = this.getZ();
-        super.move(p_108670_, p_108671_);
-        this.updateAutoJump((float)(this.getX() - d0), (float)(this.getZ() - d1));
+        this.moveMulIn = this.stuckSpeedMultiplier;
+
+        if (p_108671_.length() != 0.0D && !this.isPassenger())
+        {
+            boolean flag = VRPlayer.get().getFreeMove();
+            boolean flag1 = flag || Minecraft.getInstance().vrSettings.simulateFalling && !this.onClimbable() && !this.isShiftKeyDown();
+
+            if (this.minecraft.climbTracker.isActive(this) && (flag || this.minecraft.climbTracker.isGrabbingLadder()))
+            {
+                flag1 = true;
+            }
+
+            Vec3 vec3 = VRPlayer.get().roomOrigin;
+
+            if ((this.minecraft.climbTracker.isGrabbingLadder() || flag || this.minecraft.swimTracker.isActive(this)) && (this.zza != 0.0F || this.isFallFlying() || Math.abs(this.getDeltaMovement().x) > 0.01D || Math.abs(this.getDeltaMovement().z) > 0.01D))
+            {
+                double d0 = vec3.x - this.getX();
+                double d1 = vec3.z - this.getZ();
+                double d2 = this.getX();
+                double d3 = this.getZ();
+                super.move(p_108670_, p_108671_);
+
+                if (this.minecraft.vrSettings.walkUpBlocks)
+                {
+                    this.maxUpStep = this.getMuhJumpFactor() == 1.0F ? 1.0F : 0.6F;
+                }
+                else
+                {
+                    this.maxUpStep = 0.6F;
+                    this.updateAutoJump((float)(this.getX() - d2), (float)(this.getZ() - d3));
+                }
+
+                double d4 = this.getY() + this.getRoomYOffsetFromPose();
+                VRPlayer.get().setRoomOrigin(this.getX() + d0, d4, this.getZ() + d1, false);
+            }
+            else if (flag1)
+            {
+                super.move(p_108670_, new Vec3(0.0D, p_108671_.y, 0.0D));
+                VRPlayer.get().setRoomOrigin(VRPlayer.get().roomOrigin.x, this.getY() + this.getRoomYOffsetFromPose(), VRPlayer.get().roomOrigin.z, false);
+            }
+            else
+            {
+                this.onGround = true;
+            }
+        }
+        else
+        {
+            super.move(p_108670_, p_108671_);
+        }
+    }
+
+    public double getRoomYOffsetFromPose()
+    {
+        double d0 = 0.0D;
+
+        if (this.getPose() == Pose.FALL_FLYING || this.getPose() == Pose.SPIN_ATTACK || this.getPose() == Pose.SWIMMING && !this.minecraft.crawlTracker.crawlsteresis)
+        {
+            d0 = -1.2D;
+        }
+
+        return d0;
     }
 
     public boolean isAutoJumpEnabled()
@@ -1027,15 +1281,16 @@
             Vec3 vec32 = new Vec3((double)p_108744_, 0.0D, (double)p_108745_);
             float f = this.getSpeed();
             float f1 = (float)vec32.lengthSqr();
+            float f2 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getBodyYaw();
 
             if (f1 <= 0.001F)
             {
                 Vec2 vec2 = this.input.getMoveVector();
-                float f2 = f * vec2.x;
-                float f3 = f * vec2.y;
-                float f4 = Mth.sin(this.yRot * ((float)Math.PI / 180F));
-                float f5 = Mth.cos(this.yRot * ((float)Math.PI / 180F));
-                vec32 = new Vec3((double)(f2 * f5 - f3 * f4), vec32.y, (double)(f3 * f5 + f2 * f4));
+                float f3 = f * vec2.x;
+                float f4 = f * vec2.y;
+                float f5 = Mth.sin(f2 * ((float)Math.PI / 180F));
+                float f6 = Mth.cos(f2 * ((float)Math.PI / 180F));
+                vec32 = new Vec3((double)(f3 * f6 - f4 * f5), vec32.y, (double)(f4 * f6 + f3 * f5));
                 f1 = (float)vec32.lengthSqr();
 
                 if (f1 <= 0.001F)
@@ -1044,12 +1299,12 @@
                 }
             }
 
-            float f12 = Mth.fastInvSqrt(f1);
-            Vec3 vec312 = vec32.scale((double)f12);
+            float f13 = Mth.fastInvSqrt(f1);
+            Vec3 vec312 = vec32.scale((double)f13);
             Vec3 vec313 = this.getForward();
-            float f13 = (float)(vec313.x * vec312.x + vec313.z * vec312.z);
+            float f14 = (float)(vec313.x * vec312.x + vec313.z * vec312.z);
 
-            if (!(f13 < -0.15F))
+            if (!(f14 < -0.15F))
             {
                 CollisionContext collisioncontext = CollisionContext.of(this);
                 BlockPos blockpos = new BlockPos(this.getX(), this.getBoundingBox().maxY, this.getZ());
@@ -1062,35 +1317,35 @@
 
                     if (blockstate1.getCollisionShape(this.level, blockpos, collisioncontext).isEmpty())
                     {
-                        float f6 = 7.0F;
-                        float f7 = 1.2F;
+                        float f7 = 7.0F;
+                        float f8 = 1.2F;
 
                         if (this.hasEffect(MobEffects.JUMP))
                         {
-                            f7 += (float)(this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.75F;
+                            f8 += (float)(this.getEffect(MobEffects.JUMP).getAmplifier() + 1) * 0.75F;
                         }
 
-                        float f8 = Math.max(f * 7.0F, 1.0F / f12);
-                        Vec3 vec34 = vec31.add(vec312.scale((double)f8));
-                        float f9 = this.getBbWidth();
-                        float f10 = this.getBbHeight();
-                        AABB aabb = (new AABB(vec3, vec34.add(0.0D, (double)f10, 0.0D))).inflate((double)f9, 0.0D, (double)f9);
-                        Vec3 lvt_19_1_ = vec3.add(0.0D, (double)0.51F, 0.0D);
-                        vec34 = vec34.add(0.0D, (double)0.51F, 0.0D);
+                        float f9 = Math.max(f * 7.0F, 1.0F / f13);
+                        Vec3 vec33 = vec31.add(vec312.scale((double)f9));
+                        float f10 = this.getBbWidth();
+                        float f11 = this.getBbHeight();
+                        AABB aabb = (new AABB(vec3, vec33.add(0.0D, (double)f11, 0.0D))).inflate((double)f10, 0.0D, (double)f10);
+                        Vec3 vec34 = vec3.add(0.0D, (double)0.51F, 0.0D);
+                        vec33 = vec33.add(0.0D, (double)0.51F, 0.0D);
                         Vec3 vec35 = vec312.cross(new Vec3(0.0D, 1.0D, 0.0D));
-                        Vec3 vec36 = vec35.scale((double)(f9 * 0.5F));
-                        Vec3 vec37 = lvt_19_1_.subtract(vec36);
-                        Vec3 vec38 = vec34.subtract(vec36);
-                        Vec3 vec39 = lvt_19_1_.add(vec36);
-                        Vec3 vec310 = vec34.add(vec36);
-                        Iterator<AABB> iterator = this.level.getCollisions(this, aabb, (p_108722_) ->
+                        Vec3 vec36 = vec35.scale((double)(f10 * 0.5F));
+                        Vec3 vec37 = vec34.subtract(vec36);
+                        Vec3 vec38 = vec33.subtract(vec36);
+                        Vec3 vec39 = vec34.add(vec36);
+                        Vec3 vec310 = vec33.add(vec36);
+                        Iterator<AABB> iterator = this.level.getCollisions(this, aabb, (entity) ->
                         {
                             return true;
-                        }).flatMap((p_108691_) ->
+                        }).flatMap((shape) ->
                         {
-                            return p_108691_.toAabbs().stream();
+                            return shape.toAabbs().stream();
                         }).iterator();
-                        float f11 = Float.MIN_VALUE;
+                        float f12 = Float.MIN_VALUE;
 
                         while (iterator.hasNext())
                         {
@@ -1098,11 +1353,11 @@
 
                             if (aabb1.intersects(vec37, vec38) || aabb1.intersects(vec39, vec310))
                             {
-                                f11 = (float)aabb1.maxY;
+                                f12 = (float)aabb1.maxY;
                                 Vec3 vec311 = aabb1.getCenter();
                                 BlockPos blockpos1 = new BlockPos(vec311);
 
-                                for (int i = 1; (float)i < f7; ++i)
+                                for (int i = 1; (float)i < f8; ++i)
                                 {
                                     BlockPos blockpos2 = blockpos1.above(i);
                                     BlockState blockstate2 = this.level.getBlockState(blockpos2);
@@ -1110,9 +1365,9 @@
 
                                     if (!(voxelshape = blockstate2.getCollisionShape(this.level, blockpos2, collisioncontext)).isEmpty())
                                     {
-                                        f11 = (float)voxelshape.max(Direction.Axis.Y) + (float)blockpos2.getY();
+                                        f12 = (float)voxelshape.max(Direction.Axis.Y) + (float)blockpos2.getY();
 
-                                        if ((double)f11 - this.getY() > (double)f7)
+                                        if ((double)f12 - this.getY() > (double)f8)
                                         {
                                             return;
                                         }
@@ -1134,11 +1389,11 @@
                             }
                         }
 
-                        if (f11 != Float.MIN_VALUE)
+                        if (f12 != Float.MIN_VALUE)
                         {
-                            float f14 = (float)((double)f11 - this.getY());
+                            float f15 = (float)((double)f12 - this.getY());
 
-                            if (!(f14 <= 0.5F) && !(f14 > f7))
+                            if (!(f15 <= 0.5F) && !(f15 > f8))
                             {
                                 this.autoJumpTime = 1;
                             }
@@ -1236,4 +1491,367 @@
             return super.getRopeHoldPosition(p_108758_);
         }
     }
+
+    public void moveTo(double p_20108_, double p_20109_, double p_20110_, float p_20111_, float p_20112_)
+    {
+        super.moveTo(p_20108_, p_20109_, p_20110_, p_20111_, p_20112_);
+
+        if (this.initFromServer)
+        {
+            this.minecraft.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+        }
+    }
+
+    public void absMoveTo(double p_19891_, double p_19892_, double p_19893_, float p_19894_, float p_19895_)
+    {
+        super.absMoveTo(p_19891_, p_19892_, p_19893_, p_19894_, p_19895_);
+        this.minecraft.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+
+        if (!this.initFromServer)
+        {
+            this.moveTo(p_19891_, p_19892_, p_19893_, p_19894_, p_19895_);
+            this.initFromServer = true;
+        }
+    }
+
+    public void setPos(double p_20210_, double p_20211_, double p_20212_)
+    {
+        double d0 = this.getX();
+        double d1 = this.getY();
+        double d2 = this.getZ();
+        super.setPos(p_20210_, p_20211_, p_20212_);
+        double d3 = this.getX();
+        double d4 = this.getY();
+        double d5 = this.getZ();
+        Entity entity = this.getVehicle();
+
+        if (this.isPassenger())
+        {
+            Vec3 vec3 = this.minecraft.vehicleTracker.Premount_Pos_Room;
+            vec3 = vec3.yRot(this.minecraft.vrPlayer.vrdata_world_pre.rotation_radians);
+            p_20210_ = p_20210_ - vec3.x;
+            p_20211_ = this.minecraft.vehicleTracker.getVehicleFloor(entity, p_20211_);
+            p_20212_ = p_20212_ - vec3.z;
+            this.minecraft.vrPlayer.setRoomOrigin(p_20210_, p_20211_, p_20212_, p_20210_ + p_20211_ + p_20212_ == 0.0D);
+        }
+        else
+        {
+            Vec3 vec31 = Minecraft.getInstance().vrPlayer.roomOrigin;
+            VRPlayer.get().setRoomOrigin(vec31.x + (d3 - d0), vec31.y + (d4 - d1), vec31.z + (d5 - d2), p_20210_ + p_20211_ + p_20212_ == 0.0D);
+        }
+    }
+
+    public void doDrag()
+    {
+        float f = 0.91F;
+
+        if (this.onGround)
+        {
+            f = this.level.getBlockState(new BlockPos(this.getX(), this.getBoundingBox().minY - 1.0D, this.getZ())).getBlock().getFriction() * 0.91F;
+        }
+
+        double d0 = (double)f;
+        double d1 = (double)f;
+        this.setDeltaMovement(this.getDeltaMovement().x / d0, this.getDeltaMovement().y, this.getDeltaMovement().z / d1);
+        int i = Minecraft.getInstance().vrSettings.inertiaFactor;
+        double d2 = VRSettings.getInertiaAddFactor(i);
+        double d3 = this.getBoundedAddition(this.additionX);
+        double d4 = (double)f * d3 / (double)(1.0F - f);
+        double d5 = d4 / ((double)f * (d4 + d3 * d2));
+        d0 = d0 * d5;
+        double d6 = this.getBoundedAddition(this.additionZ);
+        double d7 = (double)f * d6 / (double)(1.0F - f);
+        double d8 = d7 / ((double)f * (d7 + d6 * d2));
+        d1 = d1 * d8;
+        this.setDeltaMovement(this.getDeltaMovement().x * d0, this.getDeltaMovement().y, this.getDeltaMovement().z * d1);
+    }
+
+    public double getBoundedAddition(double orig)
+    {
+        return orig >= -1.0E-6D && orig <= 1.0E-6D ? 1.0E-6D : orig;
+    }
+
+    public void moveRelative(float p_19921_, Vec3 p_19922_)
+    {
+        double d0 = p_19922_.y;
+        double d1 = p_19922_.x;
+        double d2 = p_19922_.z;
+        VRPlayer vrplayer = this.minecraft.vrPlayer;
+
+        if (vrplayer.getFreeMove())
+        {
+            int i = Minecraft.getInstance().vrSettings.inertiaFactor;
+            double d3 = d1 * d1 + d2 * d2;
+            double d4 = 0.0D;
+            double d5 = 0.0D;
+            double d6 = 0.0D;
+            double d7 = 1.0D;
+
+            if (d3 >= (double)1.0E-4F || Main.katvr)
+            {
+                d3 = (double)Mth.sqrt(d3);
+
+                if (d3 < 1.0D && !Main.katvr)
+                {
+                    d3 = 1.0D;
+                }
+
+                d3 = (double)p_19921_ / d3;
+                d1 = d1 * d3;
+                d2 = d2 * d3;
+                Vec3 vec3 = new Vec3(d1, 0.0D, d2);
+                VRPlayer vrplayer1 = this.minecraft.vrPlayer;
+                boolean flag = !this.isPassenger() && (this.abilities.flying || this.isSwimming());
+
+                if (Main.katvr)
+                {
+                    jkatvr.query();
+                    d3 = (double)(jkatvr.getSpeed() * jkatvr.walkDirection() * this.minecraft.vrSettings.movementSpeedMultiplier);
+                    vec3 = new Vec3(0.0D, 0.0D, d3);
+
+                    if (flag)
+                    {
+                        vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.hmd.getPitch() * ((float)Math.PI / 180F));
+                    }
+
+                    vec3 = vec3.yRot(-jkatvr.getYaw() * ((float)Math.PI / 180F) + this.minecraft.vrPlayer.vrdata_world_pre.rotation_radians);
+                }
+                else if (Main.infinadeck)
+                {
+                    jinfinadeck.query();
+                    d3 = (double)(jinfinadeck.getSpeed() * jinfinadeck.walkDirection() * this.minecraft.vrSettings.movementSpeedMultiplier);
+                    vec3 = new Vec3(0.0D, 0.0D, d3);
+
+                    if (flag)
+                    {
+                        vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.hmd.getPitch() * ((float)Math.PI / 180F));
+                    }
+
+                    vec3 = vec3.yRot(-jinfinadeck.getYaw() * ((float)Math.PI / 180F) + this.minecraft.vrPlayer.vrdata_world_pre.rotation_radians);
+                }
+                else if (this.minecraft.vrSettings.seated)
+                {
+                    int j = 0;
+
+                    if (this.minecraft.vrSettings.seatedUseHMD)
+                    {
+                        j = 1;
+                    }
+
+                    if (flag)
+                    {
+                        vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.getController(j).getPitch() * ((float)Math.PI / 180F));
+                    }
+
+                    vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.getController(j).getYaw() * ((float)Math.PI / 180F));
+                }
+                else
+                {
+                    if (flag)
+                    {
+                        switch (this.minecraft.vrSettings.vrFreeMoveMode)
+                        {
+                            case 1:
+                                vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.getController(1).getPitch() * ((float)Math.PI / 180F));
+                                break;
+
+                            case 2:
+                            case 3:
+                            case 5:
+                                vec3 = vec3.xRot(vrplayer1.vrdata_world_pre.hmd.getPitch() * ((float)Math.PI / 180F));
+
+                            case 4:
+                        }
+                    }
+
+                    if (this.minecraft.jumpTracker.isjumping())
+                    {
+                        vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.hmd.getYaw() * ((float)Math.PI / 180F));
+                    }
+                    else
+                    {
+                        switch (this.minecraft.vrSettings.vrFreeMoveMode)
+                        {
+                            case 1:
+                                vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.getController(1).getYaw() * ((float)Math.PI / 180F));
+                                break;
+
+                            case 2:
+                                vec3 = vec3.yRot(-vrplayer1.vrdata_world_pre.hmd.getYaw() * ((float)Math.PI / 180F));
+                                break;
+
+                            case 3:
+                                vec3 = vec3.yRot((float)(-this.minecraft.runTracker.getYaw() * (double)((float)Math.PI / 180F)));
+                                vec3 = vec3.scale(this.minecraft.runTracker.getSpeed());
+
+                            case 4:
+                            default:
+                                break;
+
+                            case 5:
+                                vec3 = vec3.yRot((180.0F + this.minecraft.vrSettings.vrWorldRotation) * ((float)Math.PI / 180F));
+                        }
+                    }
+                }
+
+                d4 = vec3.x;
+                d6 = vec3.y;
+                d5 = vec3.z;
+
+                if (!this.abilities.flying && !this.wasTouchingWater)
+                {
+                    d7 = VRSettings.getInertiaAddFactor(i);
+                }
+
+                float f = 1.0F;
+
+                if (this.abilities.flying)
+                {
+                    f = 5.0F;
+                }
+
+                this.setDeltaMovement(this.getDeltaMovement().x + d4 * d7, this.getDeltaMovement().y + d6 * (double)f, this.getDeltaMovement().z + d5 * d7);
+                this.additionX = d4;
+                this.additionZ = d5;
+            }
+
+            if (!this.abilities.flying && !this.wasTouchingWater)
+            {
+                this.doDrag();
+            }
+        }
+    }
+
+    private boolean isThePlayer()
+    {
+        return this == Minecraft.getInstance().player;
+    }
+
+    protected void triggerItemUseEffects(ItemStack p_21138_, int p_21139_)
+    {
+        if (!p_21138_.isEmpty() && this.isUsingItem())
+        {
+            if (p_21138_.getUseAnimation() == UseAnim.DRINK)
+            {
+                this.playSound(this.getDrinkingSound(p_21138_), 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+            }
+
+            if (p_21138_.getUseAnimation() == UseAnim.EAT)
+            {
+                this.addItemParticles(p_21138_, p_21139_);
+                this.playSound(this.getEatingSound(p_21138_), 0.5F + 0.5F * (float)this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            }
+        }
+    }
+
+    private void addItemParticles(ItemStack stack, int count)
+    {
+        for (int i = 0; i < count; ++i)
+        {
+            Vec3 vec3 = new Vec3(((double)this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vec3 = vec3.xRot(-this.xRot * ((float)Math.PI / 180F));
+            vec3 = vec3.yRot(-this.yRot * ((float)Math.PI / 180F));
+            double d0 = (double)(-this.random.nextFloat()) * 0.6D - 0.3D;
+            new Vec3(((double)this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+            InteractionHand interactionhand = this.getUsedItemHand();
+            Vec3 vector3d1;
+
+            if (interactionhand == InteractionHand.MAIN_HAND)
+            {
+                vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(0).getPosition();
+            }
+            else
+            {
+                vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(1).getPosition();
+            }
+
+            this.level.addParticle(new ItemParticleOption(ParticleTypes.ITEM, stack), vector3d1.x, vector3d1.y, vector3d1.z, vec3.x, vec3.y + 0.05D, vec3.z);
+        }
+    }
+
+    public boolean isClimbeyJumpEquipped()
+    {
+        return this.getItemBySlot(EquipmentSlot.FEET) != null && this.minecraft.jumpTracker.isBoots(this.getItemBySlot(EquipmentSlot.FEET));
+    }
+
+    public boolean isClimbeyClimbEquipped()
+    {
+        if (this.getMainHandItem() != null && this.minecraft.climbTracker.isClaws(this.getMainHandItem()))
+        {
+            return true;
+        }
+        else
+        {
+            return this.getOffhandItem() != null && this.minecraft.climbTracker.isClaws(this.getOffhandItem());
+        }
+    }
+
+    public void die(DamageSource p_36152_)
+    {
+        super.die(p_36152_);
+        this.minecraft.vr.triggerHapticPulse(0, 2000);
+        this.minecraft.vr.triggerHapticPulse(1, 2000);
+    }
+
+    public void stepSound(BlockPos blockforNoise, Vec3 soundPos)
+    {
+        BlockState blockstate = this.level.getBlockState(blockforNoise);
+        Block block = blockstate.getBlock();
+        SoundType soundtype = block.getSoundType(blockstate);
+        BlockState blockstate1 = this.level.getBlockState(blockforNoise.above());
+
+        if (blockstate1.getBlock() == Blocks.SNOW)
+        {
+            soundtype = Blocks.SNOW.getSoundType(blockstate1);
+        }
+
+        float f = soundtype.getVolume();
+        float f1 = soundtype.getPitch();
+        SoundEvent soundevent = soundtype.getStepSound();
+
+        if (!this.isSilent() && !block.defaultBlockState().getMaterial().isLiquid())
+        {
+            this.level.playSound((LocalPlayer)null, soundPos.x, soundPos.y, soundPos.z, soundevent, this.getSoundSource(), f, f1);
+        }
+    }
+
+    public void updateSyncFields(LocalPlayer old)
+    {
+        this.xLast = old.xLast;
+        this.yLast1 = old.yLast1;
+        this.zLast = old.zLast;
+        this.yRotLast = old.yRotLast;
+        this.xRotLast = old.xRotLast;
+        this.lastOnGround = old.lastOnGround;
+        this.wasShiftKeyDown = old.wasShiftKeyDown;
+        this.wasSprinting = old.wasSprinting;
+        this.positionReminder = old.positionReminder;
+    }
+
+    public ItemStack eat(Level p_36185_, ItemStack p_36186_)
+    {
+        if (p_36186_.isEdible() && this == Minecraft.getInstance().player && p_36186_.getHoverName().getString().equals("EAT ME"))
+        {
+            Minecraft.getInstance().vrPlayer.wfMode = 0.5D;
+            Minecraft.getInstance().vrPlayer.wfCount = 400;
+        }
+
+        return super.eat(p_36185_, p_36186_);
+    }
+
+    public float getMuhJumpFactor()
+    {
+        return this.moveMulIn.lengthSqr() > 0.0D ? (float)((double)this.getBlockJumpFactor() * this.moveMulIn.y) : this.getBlockJumpFactor();
+    }
+
+    public float getMuhSpeedFactor()
+    {
+        return this.moveMulIn.lengthSqr() > 0.0D ? (float)((double)this.getBlockSpeedFactor() * (this.moveMulIn.x + this.moveMulIn.z) / 2.0D) : this.getBlockSpeedFactor();
+    }
+
+    public void releaseUsingItem()
+    {
+        NetworkHelper.sendActiveHand((byte)this.getUsedItemHand().ordinal());
+        super.releaseUsingItem();
+    }
 }
