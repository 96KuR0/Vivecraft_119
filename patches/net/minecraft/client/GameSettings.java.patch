--- a/net/minecraft/client/GameSettings.java
+++ b/net/minecraft/client/GameSettings.java
@@ -66,6 +66,7 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.provider.MCOpenVR;
 
 public class GameSettings
 {
@@ -178,6 +179,7 @@
     public double fov = 70.0D;
     public double gamma;
     public int guiScale;
+    public int guiScaleUser; // to store the user's setting, do not actually use
     public ParticleStatus particles = ParticleStatus.ALL;
     public NarratorStatus narrator = NarratorStatus.OFF;
     public String language = "en_us";
@@ -228,7 +230,7 @@
     public int ofTranslucentBlocks = 0;
     public boolean ofDynamicFov = true;
     public boolean ofAlternateBlocks = true;
-    public int ofDynamicLights = 3;
+    public int ofDynamicLights = 2;
     public boolean ofCustomEntityModels = true;
     public boolean ofCustomGuis = true;
     public boolean ofShowGlErrors = true;
@@ -304,6 +306,9 @@
         this.ofKeyBindZoom = new KeyBinding("of.key.zoom", 67, "key.categories.misc");
         this.keyBindings = ArrayUtils.add(this.keyBindings, this.ofKeyBindZoom);
         KeyUtils.fixKeyConflicts(this.keyBindings, new KeyBinding[] {this.ofKeyBindZoom});
+        //Vivecraft
+        this.keyBindings = MCOpenVR.initializeBindings(this.keyBindings);
+        //
         this.renderDistanceChunks = 8;
         this.loadOptions();
         Config.initGameSettings(this);
@@ -506,7 +511,7 @@
 
                     if ("guiScale".equals(s))
                     {
-                        this.guiScale = Integer.parseInt(s1);
+                        this.guiScaleUser = Integer.parseInt(s1); // VIVECRAFT: ignore gui scale
                     }
 
                     if ("particles".equals(s))
@@ -868,7 +873,7 @@
                 printwriter.println("gamma:" + this.gamma);
                 printwriter.println("renderDistance:" + this.renderDistanceChunks);
                 printwriter.println("entityDistanceScaling:" + this.field_238329_c_);
-                printwriter.println("guiScale:" + this.guiScale);
+                printwriter.println("guiScale:" + this.guiScaleUser);
                 printwriter.println("particles:" + this.particles.getId());
                 printwriter.println("maxFps:" + this.framerateLimit);
                 printwriter.println("difficulty:" + this.difficulty.getId());
@@ -1062,7 +1067,7 @@
             {
                 if (i >= aint[j])
                 {
-                    this.ofAaLevel = aint[j];
+                    this.ofAaLevel = 0; //Vivecraft aint[j];
                 }
             }
 
@@ -1509,7 +1514,7 @@
                 return;
             }
 
-            this.ofFastRender = !this.ofFastRender;
+            this.ofFastRender = false; //Vivecraft !this.ofFastRender;
 
             if (this.ofFastRender)
             {
@@ -2626,6 +2631,15 @@
             KeyUtils.fixKeyConflicts(this.keyBindings, new KeyBinding[] {this.ofKeyBindZoom});
             KeyBinding.resetKeyBindingArrayAndHash();
             bufferedreader.close();
+            
+            //Vivecraft important.
+            this.ofFastRender = false;
+            this.ofUseFbo = true;
+            this.ofUseVbo = true;
+            this.ofAaLevel = 0;
+            this.ofAfLevel = 1;
+            //
+            
         }
         catch (Exception exception11)
         {
@@ -2762,7 +2776,7 @@
         this.cloudOption = CloudOption.FANCY;
         this.fov = 70.0D;
         this.gamma = 0.0D;
-        this.guiScale = 0;
+        this.guiScaleUser = 0; // VIVECRAFT: ignore gui scale
         this.particles = ParticleStatus.ALL;
         this.heldItemTooltips = true;
         this.ofUseVbo = true;
@@ -2997,3 +3011,4 @@
         resourcePackListIn.setEnabledPacks(set);
     }
 }
+
