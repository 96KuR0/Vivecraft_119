--- a/net/minecraft/client/renderer/FirstPersonRenderer.java
+++ b/net/minecraft/client/renderer/FirstPersonRenderer.java
@@ -2,15 +2,28 @@
 
 import com.google.common.base.MoreObjects;
 import com.mojang.blaze3d.matrix.MatrixStack;
+import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.IVertexBuilder;
+
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Objects;
+
+import org.lwjgl.opengl.GL11;
+import org.vivecraft.render.VRArmRenderer;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.player.AbstractClientPlayerEntity;
 import net.minecraft.client.entity.player.ClientPlayerEntity;
 import net.minecraft.client.renderer.entity.EntityRendererManager;
 import net.minecraft.client.renderer.entity.PlayerRenderer;
 import net.minecraft.client.renderer.model.ItemCameraTransforms;
+import net.minecraft.client.renderer.model.ModelBakery;
+import net.minecraft.client.renderer.texture.AtlasTexture;
 import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
+import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.entity.LivingEntity;
 import net.minecraft.item.CrossbowItem;
 import net.minecraft.item.FilledMapItem;
@@ -20,7 +33,9 @@
 import net.minecraft.util.Hand;
 import net.minecraft.util.HandSide;
 import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.storage.MapData;
 import net.optifine.Config;
 import net.optifine.reflect.Reflector;
@@ -39,12 +54,40 @@
     private float prevEquippedProgressOffHand;
     private final EntityRendererManager renderManager;
     private final ItemRenderer itemRenderer;
+    //Vivecraft
+    private final VRArmRenderer myRenderVRPlayer;
+    private final Map<String, VRArmRenderer> renderVRPlayerSkinMap = new HashMap<>();
+    public VRFirstPersonArmSwing swingType = VRFirstPersonArmSwing.Attack;  
+    public float xdist = -0;
+    public enum VRFirstPersonArmSwing{
+    	Attack,
+    	Use,
+    	Interact
+    }
+    private enum VivecraftItemRendering{
+    	Item,
+    	Block,
+    	Shield,
+    	Sword,
+    	Tool,
+    	Bow,
+    	Spear,
+    	Map,
+    	Noms,
+    	Crossbow
+    }
+    //
 
     public FirstPersonRenderer(Minecraft p_i146_1_)
     {
         this.mc = p_i146_1_;
         this.renderManager = p_i146_1_.getRenderManager();
         this.itemRenderer = p_i146_1_.getItemRenderer();
+        //Vivecraft
+        myRenderVRPlayer = new VRArmRenderer(this.renderManager);
+        renderVRPlayerSkinMap.put("default", this.myRenderVRPlayer);
+        renderVRPlayerSkinMap.put("slim", new VRArmRenderer(this.renderManager, true));     
+        //
     }
 
     public void renderItemSide(LivingEntity livingEntityIn, ItemStack itemStackIn, ItemCameraTransforms.TransformType transformTypeIn, boolean leftHand, MatrixStack matrixStackIn, IRenderTypeBuffer bufferIn, int combinedLightIn)
@@ -556,4 +599,100 @@
             this.equippedProgressOffHand = 0.0F;
         }
     }
+    
+    //VIVECRAFT ADDITIONS
+    public float getEquipProgress(Hand hand, float partialTicks){
+    	if(hand == Hand.MAIN_HAND)
+    		return 1.0f- (this.prevEquippedProgressMainHand + (this.equippedProgressMainHand - this.prevEquippedProgressMainHand) * partialTicks);
+    	else
+    		return 1.0F - (this.prevEquippedProgressOffHand + (this.equippedProgressOffHand - this.prevEquippedProgressOffHand) * partialTicks);
+    }
+
+     
+    public boolean isInsideOpaqueBlock(Vec3d in, boolean set)
+    {
+
+    	if (mc.world == null) return false;
+    	BlockPos bp = new BlockPos(in);
+    	
+    	if(mc.world.getBlockState(bp).causesSuffocation(mc.world, bp)) {
+    		mc.gameRenderer.inBlock = 1;
+    		return true;
+    	}
+    	
+    	if(!set) return false;
+    	mc.gameRenderer.inBlock = 0;    	
+    	Vec3d pos = in.add(0, 0, 0);
+    	float per = 0;
+    	float buffer = .07f;	
+    	
+    	if((pos.x - Math.floor(pos.x)) < buffer) 
+    	{
+    		per = (float) (pos.x - Math.floor(pos.x));
+    		mc.gameRenderer.inBlock = (buffer - per) / buffer; 
+    		if (mc.world.getBlockState(bp.west()).causesSuffocation(mc.world, bp.west())) return true;
+    	}
+    	
+    	if(pos.x - Math.floor(pos.x) > 1-buffer){
+    		per = 1f - (float) (pos.x - Math.floor(pos.x));
+    		mc.gameRenderer.inBlock = (buffer - per) / buffer; 
+    		if (mc.world.getBlockState(bp.east()).causesSuffocation(mc.world, bp.east())) return true;
+    	}
+    	
+    	if((pos.y - Math.floor(pos.y)) < buffer) 
+    	{
+    		per = (float) (pos.y - Math.floor(pos.y));
+    		mc.gameRenderer.inBlock = (buffer - per) / buffer; 
+    		if (mc.world.getBlockState(bp.down()).causesSuffocation(mc.world, bp.down())) return true;
+    	} 
+    	
+    	if(pos.y - Math.floor(pos.y) > 1-buffer){
+    		per = 1f - (float) (pos.y - Math.floor(pos.y));
+    		mc.gameRenderer.inBlock = (buffer - per) / buffer; 
+    		if (mc.world.getBlockState(bp.up()).causesSuffocation(mc.world,bp.up())) return true;
+    	}
+    	
+    	if((pos.z - Math.floor(pos.z)) < buffer) 
+    	{
+    		per = (float) (pos.z - Math.floor(pos.z));
+    		mc.gameRenderer.inBlock = (buffer - per) / buffer; 
+    		if (mc.world.getBlockState(bp.north()).causesSuffocation(mc.world, bp.north())) return true;
+    	} 
+    	
+    	if(pos.z - Math.floor(pos.z) > 1-buffer){
+    		per = 1f - (float) (pos.z - Math.floor(pos.z));
+    		mc.gameRenderer.inBlock = (buffer - per) / buffer; 
+    		if (mc.world.getBlockState(bp.south()).causesSuffocation(mc.world, bp.south())) return true;
+    	}
+
+    	return false;
+    	
+    }
+    
+    
+//    public boolean isInsideOfMaterial(Vec3d pos, Material materialIn)
+//    {
+//    	BlockPos blockpos = new BlockPos(pos);
+//    	BlockState BlockState = mc.world.getBlockState(blockpos);
+//    	BlockState BlockStateup = mc.world.getBlockState(blockpos.up());
+//
+//    	if (BlockState.getMaterial() == materialIn)
+//    	{
+//    		float f = BlockLiquid.getLiquidHeightPercent(BlockState.getBlock().getMetaFromState(BlockState)) -0.11111111F;;
+//    		if(BlockStateup.getMaterial() != materialIn && materialIn instanceof MaterialLiquid) f+=0.09F;
+//    		
+//    		//float f1 = (float)(blockpos.getY() + 1) - f;
+//    		boolean flag = (pos.y-blockpos.getY()) < (1-f);
+//    		return flag;
+//    	}
+//    	else
+//    	{
+//    		return false;
+//    	}
+//   }
+    //
+    
+    
+
 }
+
