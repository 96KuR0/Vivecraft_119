--- a/net/minecraft/client/renderer/GameRenderer.java
+++ b/net/minecraft/client/renderer/GameRenderer.java
@@ -3,22 +3,32 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.gson.JsonSyntaxException;
+import com.mojang.blaze3d.pipeline.RenderTarget;
 import com.mojang.blaze3d.platform.GLX;
 import com.mojang.blaze3d.platform.GlStateManager;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL43;
+
 import com.mojang.blaze3d.platform.Lighting;
+import com.mojang.blaze3d.platform.MemoryTracker;
 import com.mojang.blaze3d.platform.NativeImage;
 import com.mojang.blaze3d.platform.Window;
 import com.mojang.blaze3d.shaders.Program;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
+import com.mojang.blaze3d.vertex.BufferUploader;
 import com.mojang.blaze3d.vertex.DefaultVertexFormat;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.Tesselator;
 import com.mojang.blaze3d.vertex.VertexFormat;
+import com.mojang.blaze3d.vertex.VertexFormat.Mode;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.math.Matrix4f;
 import com.mojang.math.Vector3f;
 import java.io.IOException;
+import java.nio.Buffer;
+import java.nio.FloatBuffer;
+import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
@@ -38,14 +48,23 @@
 import net.minecraft.client.gui.screens.ChatScreen;
 import net.minecraft.client.gui.screens.LoadingOverlay;
 import net.minecraft.client.gui.screens.ReceivingLevelScreen;
+import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.gui.screens.TitleScreen;
+import net.minecraft.client.gui.screens.WinScreen;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.player.AbstractClientPlayer;
+import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.renderer.block.model.ItemTransforms;
+import net.minecraft.client.renderer.entity.ItemRenderer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.resources.language.I18n;
+import net.minecraft.client.resources.model.ModelBakery;
+import net.minecraft.client.resources.model.ModelResourceLocation;
 import net.minecraft.client.server.IntegratedServer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.Vec3i;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextComponent;
@@ -53,7 +72,9 @@
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.ResourceManagerReloadListener;
 import net.minecraft.server.packs.resources.ResourceProvider;
+import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
+import net.minecraft.world.InteractionHand;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
@@ -64,10 +85,12 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.ProjectileUtil;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
+import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.FogType;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
@@ -80,17 +103,35 @@
 import net.optifine.GlErrors;
 import net.optifine.Lagometer;
 import net.optifine.RandomEntities;
+import net.optifine.SmartAnimations;
 import net.optifine.entity.model.CustomEntityModels;
 import net.optifine.gui.GuiChatOF;
 import net.optifine.reflect.Reflector;
-import net.optifine.reflect.ReflectorResolver;
 import net.optifine.shaders.Shaders;
 import net.optifine.shaders.ShadersRender;
 import net.optifine.util.MemoryMonitor;
 import net.optifine.util.TimedEvent;
+import org.apache.commons.lang3.tuple.Triple;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.VRData;
+import org.vivecraft.gameplay.VRPlayer;
+import org.vivecraft.gameplay.screenhandlers.GuiHandler;
+import org.vivecraft.gameplay.screenhandlers.KeyboardHandler;
+import org.vivecraft.gameplay.screenhandlers.RadialHandler;
+import org.vivecraft.gameplay.trackers.BowTracker;
+import org.vivecraft.gameplay.trackers.TelescopeTracker;
+import org.vivecraft.provider.ControllerType;
+import org.vivecraft.reflection.MCReflection;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.VRActiveRenderInfo;
+import org.vivecraft.render.VRWidgetHelper;
+import org.vivecraft.utils.Utils;
+import org.vivecraft.settings.VRSettings;
+//TODO: this needs a lot of work
 public class GameRenderer implements ResourceManagerReloadListener, AutoCloseable
 {
     private static final ResourceLocation NAUSEA_LOCATION = new ResourceLocation("textures/misc/nausea.png");
@@ -131,7 +172,7 @@
     public static final int EFFECT_NONE = EFFECTS.length;
     private int effectIndex = EFFECT_NONE;
     private boolean effectActive;
-    private final Camera mainCamera = new Camera();
+    private final Camera mainCamera = new VRActiveRenderInfo();
     public ShaderInstance blitShader;
     private final Map<String, ShaderInstance> shaders = Maps.newHashMap();
     @Nullable
@@ -244,7 +285,7 @@
     private static ShaderInstance rendertypeCrumblingShader;
     private boolean initialized = false;
     private Level updatedWorld = null;
-    private float clipDistance = 128.0F;
+    public float clipDistance = 128.0F;
     private long lastServerTime = 0L;
     private int lastServerTicks = 0;
     private int serverWaitTime = 0;
@@ -253,6 +294,47 @@
     private float avgServerTickDiff = 0.0F;
     private PostChain[] fxaaShaders = new PostChain[10];
     private boolean guiLoadingVisible = false;
+    public float minClipDistance = 0.02F;
+    public Vec3 crossVec;
+    private FloatBuffer matrixBuffer = MemoryTracker.createFloatBuffer(16);
+    public Matrix4f thirdPassProjectionMatrix = new Matrix4f();
+    public boolean menuWorldFastTime;
+    public boolean inwater;
+    public boolean wasinwater;
+    public boolean inportal;
+    public boolean onfire;
+    public float inBlock = 0.0F;
+    private boolean always_true = true;
+    public double rveX;
+    public double rveY;
+    public double rveZ;
+    public double rvelastX;
+    public double rvelastY;
+    public double rvelastZ;
+    public double rveprevX;
+    public double rveprevY;
+    public double rveprevZ;
+    public float rveyaw;
+    public float rvepitch;
+    private float rvelastyaw;
+    private float rvelastpitch;
+    private float rveHeight;
+    private boolean cached;
+    private int polyblendsrca;
+    private int polyblenddsta;
+    private int polyblendsrcrgb;
+    private int polyblenddstrgb;
+    private net.optifine.shaders.Program prog;
+    private boolean polyblend;
+    private boolean polytex;
+    private boolean polylight;
+    private boolean polycull;
+    public static final ModelResourceLocation thirdPersonCameraModel = new ModelResourceLocation("vivecraft:camcorder");
+    public static final ModelResourceLocation thirdPersonCameraDisplayModel = new ModelResourceLocation("vivecraft:camcorder_display");
+    Vec3i tpUnlimitedColor = new Vec3i(-83, -40, -26);
+    Vec3i tpLimitedColor = new Vec3i(-51, -87, -51);
+    Vec3i tpInvalidColor = new Vec3i(83, 83, 83);
+    private FloatBuffer colorBuffer = BufferUtils.createFloatBuffer(4);
 
     public GameRenderer(Minecraft p_109083_, ResourceManager p_109084_, RenderBuffers p_109085_)
     {
@@ -263,6 +345,12 @@
         this.lightTexture = new LightTexture(this, p_109083_);
         this.renderBuffers = p_109085_;
         this.postEffect = null;
+
+        if (this.minecraft.gameRenderer != null)
+        {
+            System.out.println("**********NEW GAME RENDERER ***********");
+            Thread.dumpStack();
+        }
     }
 
     public void close()
@@ -775,13 +863,14 @@
     {
         Entity entity = this.minecraft.getCameraEntity();
 
-        if (entity != null && this.minecraft.level != null)
+        if (entity != null && this.minecraft.level != null && this.minecraft.vrPlayer.vrdata_world_render != null)
         {
             this.minecraft.getProfiler().push("pick");
             this.minecraft.crosshairPickEntity = null;
             double d0 = (double)this.minecraft.gameMode.getPickRange();
-            this.minecraft.hitResult = entity.pick(d0, p_109088_, false);
-            Vec3 vec3 = entity.getEyePosition(p_109088_);
+            this.minecraft.hitResult = this.minecraft.vrPlayer.rayTraceBlocksVR(this.minecraft.vrPlayer.vrdata_world_render, 0, d0, false);
+            this.crossVec = this.minecraft.vrPlayer.AimedPointAtDistance(this.minecraft.vrPlayer.vrdata_world_render, 0, d0);
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getController(0).getPosition();
             boolean flag = false;
             int i = 3;
             double d1 = d0;
@@ -808,7 +897,7 @@
                 d1 = this.minecraft.hitResult.getLocation().distanceToSqr(vec3);
             }
 
-            Vec3 vec31 = entity.getViewVector(1.0F);
+            Vec3 vec31 = this.minecraft.vrPlayer.vrdata_world_render.getController(0).getDirection();
             Vec3 vec32 = vec3.add(vec31.x * d0, vec31.y * d0, vec31.z * d0);
             float f = 1.0F;
             AABB aabb = entity.getBoundingBox().expandTowards(vec31.scale(d0)).inflate(1.0D, 1.0D, 1.0D);
@@ -866,9 +955,14 @@
         }
     }
 
+    //Vivecraft do not modify
     private double getFov(Camera p_109142_, float pActiveRenderInfo, boolean pPartialTicks)
     {
-        if (this.panoramicMode)
+        if (this.minecraft.level == null)
+        {
+            return this.minecraft.options.fov;
+        }
+        else if (this.panoramicMode)
         {
             return 90.0D;
         }
@@ -1058,6 +1152,7 @@
         RenderSystem.setProjectionMatrix(p_109112_);
     }
 
+    //Vivecraft modify this to always return the correct matrix for the pass.
     public Matrix4f getProjectionMatrix(double p_172717_)
     {
         PoseStack posestack = new PoseStack();
@@ -1068,15 +1163,46 @@
             Shaders.applyHandDepth(posestack);
         }
 
-        this.clipDistance = this.renderDistance + 1024.0F;
+        setupClipPlanes();
 
-        if (this.zoom != 1.0F)
+        if (this.minecraft.currentPass == RenderPass.LEFT) 
+        {
+        	 posestack.last().pose().multiply(this.minecraft.vrRenderer.eyeproj[0]);
+        }
+        else if (this.minecraft.currentPass == RenderPass.RIGHT)
+        {
+        	 posestack.last().pose().multiply(this.minecraft.vrRenderer.eyeproj[1]);
+        }
+        else if (this.minecraft.currentPass == RenderPass.THIRD)
+        {
+            if (this.minecraft.vrSettings.displayMirrorMode == VRSettings.MIRROR_MIXED_REALITY)
+            {
+                posestack.last().pose().multiply(Matrix4f.perspective((double)this.minecraft.vrSettings.mixedRealityFov, this.minecraft.vrSettings.mixedRealityAspectRatio, this.minClipDistance, this.clipDistance));
+            }
+            else
+            {
+                posestack.last().pose().multiply(Matrix4f.perspective((double)this.minecraft.vrSettings.mixedRealityFov, (float)this.minecraft.getWindow().getScreenWidth() / (float)this.minecraft.getWindow().getScreenHeight(), this.minClipDistance, this.clipDistance));
+            }
+            this.thirdPassProjectionMatrix = new Matrix4f(posestack.last().pose());
+        }
+        else if (this.minecraft.currentPass == RenderPass.CAMERA)
+        {
+            posestack.last().pose().multiply(Matrix4f.perspective((double)this.minecraft.vrSettings.handCameraFov, (float)this.minecraft.vrRenderer.cameraFramebuffer.viewWidth / (float)this.minecraft.vrRenderer.cameraFramebuffer.viewHeight, this.minClipDistance, this.clipDistance));
+        }
+        else if (this.minecraft.currentPass == RenderPass.SCOPEL || this.minecraft.currentPass == RenderPass.SCOPER)
         {
-            posestack.translate((double)this.zoomX, (double)(-this.zoomY), 0.0D);
-            posestack.scale(this.zoom, this.zoom, 1.0F);
+            posestack.last().pose().multiply(Matrix4f.perspective(70f/8f, 1.0F, 0.05F, this.clipDistance));
+        }
+        else 
+        { //vanilla, center
+            if (this.zoom != 1.0F)
+            {
+                posestack.translate((double)this.zoomX, (double)(-this.zoomY), 0.0D);
+                posestack.scale(this.zoom, this.zoom, 1.0F);
+            }
+            posestack.last().pose().multiply(Matrix4f.perspective(p_172717_, (float)this.minecraft.getWindow().getWidth() / (float)this.minecraft.getWindow().getHeight(), 0.05F, this.clipDistance));
         }
 
-        posestack.last().pose().multiply(Matrix4f.perspective(p_172717_, (float)this.minecraft.getWindow().getWidth() / (float)this.minecraft.getWindow().getHeight(), 0.05F, this.clipDistance));
         return posestack.last().pose();
     }
 
@@ -1093,29 +1219,39 @@
 
     public void render(float p_109094_, long pPartialTicks, boolean pNanoTime)
     {
-        this.frameInit();
-
-        if (!this.minecraft.isWindowActive() && this.minecraft.options.pauseOnLostFocus && (!this.minecraft.options.touchscreen || !this.minecraft.mouseHandler.isRightPressed()))
+        if (this.minecraft.currentPass == RenderPass.LEFT)
         {
-            if (Util.getMillis() - this.lastActiveTime > 500L)
+            this.frameInit();
+
+            if (!this.always_true && !this.minecraft.isWindowActive() && this.minecraft.options.pauseOnLostFocus && (!this.minecraft.options.touchscreen || !this.minecraft.mouseHandler.isRightPressed()))
             {
-                this.minecraft.pauseGame(false);
+                if (Util.getMillis() - this.lastActiveTime > 500L)
+                {
+                    this.minecraft.pauseGame(false);
+                }
+            }
+            else
+            {
+                this.lastActiveTime = Util.getMillis();
             }
-        }
-        else
-        {
-            this.lastActiveTime = Util.getMillis();
         }
 
         if (!this.minecraft.noRender)
         {
             int i = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
             int j = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
+            RenderSystem.viewport(0, 0, this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight());
 
-            if (pNanoTime && this.minecraft.level != null && !Config.isReloadingResources())
+            if (pNanoTime && !this.isInMenuRoom() && this.minecraft.level != null && !Config.isReloadingResources())
             {
+                PoseStack posestack = new PoseStack();
                 this.minecraft.getProfiler().push("level");
-                this.renderLevel(p_109094_, pPartialTicks, new PoseStack());
+                this.renderLevel(p_109094_, pPartialTicks, posestack);
+
+                if (this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+                {
+                    this.renderFaceOverlay(p_109094_);
+                }
 
                 if (this.minecraft.hasSingleplayerServer() && this.lastScreenshotAttempt < Util.getMillis() - 1000L)
                 {
@@ -1129,7 +1265,7 @@
 
                 this.minecraft.levelRenderer.doEntityOutline();
 
-                if (this.postEffect != null && this.effectActive)
+                if (this.postEffect != null && this.effectActive && this.minecraft.currentPass != RenderPass.THIRD)
                 {
                     RenderSystem.disableBlend();
                     RenderSystem.disableDepthTest();
@@ -1345,9 +1481,9 @@
 
                     nativeimage1.close();
                 }
-                catch (IOException ioexception1)
+                catch (IOException ioexception)
                 {
-                    LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception1);
+                    LOGGER.warn("Couldn't save auto screenshot", (Throwable)ioexception);
                 }
                 finally {
                     nativeimage.close();
@@ -1358,11 +1494,7 @@
 
     private boolean shouldRenderBlockOutline()
     {
-        if (!this.renderBlockOutline)
-        {
-            return false;
-        }
-        else
+        if (this.renderBlockOutline && (!this.minecraft.options.hideGui || this.minecraft.vrSettings.renderBlockOutlineMode != 1) && this.minecraft.vrSettings.renderBlockOutlineMode != 2 && !this.minecraft.teleportTracker.isAiming())
         {
             Entity entity = this.minecraft.getCameraEntity();
             boolean flag = entity instanceof Player && !this.minecraft.options.hideGui;
@@ -1391,18 +1523,42 @@
 
             return flag;
         }
+        else
+        {
+            return false;
+        }
     }
 
     public void renderLevel(float p_109090_, long pPartialTicks, PoseStack pFinishTimeNano)
     {
-        this.lightTexture.updateLightTexture(p_109090_);
+        if (this.minecraft.currentPass == RenderPass.LEFT)
+        {
+            this.lightTexture.updateLightTexture(p_109090_);
+        }
 
         if (this.minecraft.getCameraEntity() == null)
         {
             this.minecraft.setCameraEntity(this.minecraft.player);
         }
 
-        this.pick(p_109090_);
+        if (this.minecraft.currentPass == RenderPass.LEFT)
+        {
+            this.pick(p_109090_);
+
+            if (this.minecraft.hitResult != null && this.minecraft.hitResult.getType() != HitResult.Type.MISS)
+            {
+                this.crossVec = this.minecraft.hitResult.getLocation();
+            }
+
+            if (this.minecraft.screen == null)
+            {
+                this.minecraft.teleportTracker.updateTeleportDestinations(this, this.minecraft, this.minecraft.player);
+            }
+        }
+
+        this.cacheRVEPos((LivingEntity)this.minecraft.getCameraEntity());
+        this.setupRVE();
+        this.setupOverlayStatus(p_109090_);
 
         if (Config.isShaders())
         {
@@ -1420,13 +1576,7 @@
         boolean flag1 = this.shouldRenderBlockOutline();
         this.minecraft.getProfiler().popPush("camera");
         Camera camera = this.mainCamera;
-        this.renderDistance = (float)(this.minecraft.options.renderDistance * 16);
-
-        if (Config.isFogOn())
-        {
-            this.renderDistance *= 0.95F;
-        }
-
+        setupClipPlanes();
         PoseStack posestack = new PoseStack();
         double d0 = this.getFov(camera, p_109090_, true);
         posestack.last().pose().multiply(this.getProjectionMatrix(d0));
@@ -1488,26 +1638,13 @@
             Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, this.minecraft.levelRenderer, pFinishTimeNano, p_109090_, matrix4f, pPartialTicks);
         }
 
-        this.minecraft.getProfiler().popPush("hand");
+        boolean flag2 = false;
+        GL11.glDisable(GL11.GL_STENCIL_TEST);
+        this.minecraft.getProfiler().popPush("ShadersEnd");
 
-        if (this.renderHand && !Shaders.isShadowPass)
+        if (flag && !flag2 && this.renderHand && !Shaders.isShadowPass)
         {
-            if (flag)
-            {
-                ShadersRender.renderHand1(this, pFinishTimeNano, camera, p_109090_);
-                Shaders.renderCompositeFinal();
-            }
-
-            RenderSystem.clear(256, Minecraft.ON_OSX);
-
-            if (flag)
-            {
-                ShadersRender.renderFPOverlay(this, pFinishTimeNano, camera, p_109090_);
-            }
-            else
-            {
-                this.renderItemInHand(pFinishTimeNano, camera, p_109090_);
-            }
+            Shaders.renderCompositeFinal();
         }
 
         if (flag)
@@ -1515,6 +1652,7 @@
             Shaders.endRender();
         }
 
+        this.restoreRVEPos((LivingEntity)this.minecraft.getCameraEntity());
         this.minecraft.getProfiler().pop();
     }
 
@@ -1626,8 +1764,6 @@
 
         if (!this.initialized)
         {
-            ReflectorResolver.resolve();
-
             if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
             {
                 Config.setNotify64BitJava(true);
@@ -1698,7 +1834,7 @@
         }
     }
 
-    private void updateMainMenu(TitleScreen mainGui)
+    private void updateMainMenu(TitleScreen p_updateMainMenu_1_)
     {
         try
         {
@@ -1723,14 +1859,14 @@
                 return;
             }
 
-            Reflector.setFieldValue(mainGui, Reflector.GuiMainMenu_splashText, s);
+            Reflector.setFieldValue(p_updateMainMenu_1_, Reflector.GuiMainMenu_splashText, s);
         }
         catch (Throwable throwable)
         {
         }
     }
 
-    public boolean setFxaaShader(int fxaaLevel)
+    public boolean setFxaaShader(int p_setFxaaShader_1_)
     {
         if (!GLX.isUsingFBOs())
         {
@@ -1740,7 +1876,7 @@
         {
             return true;
         }
-        else if (fxaaLevel != 2 && fxaaLevel != 4)
+        else if (p_setFxaaShader_1_ != 2 && p_setFxaaShader_1_ != 4)
         {
             if (this.postEffect == null)
             {
@@ -1753,7 +1889,7 @@
                 return true;
             }
         }
-        else if (this.postEffect != null && this.postEffect == this.fxaaShaders[fxaaLevel])
+        else if (this.postEffect != null && this.postEffect == this.fxaaShaders[p_setFxaaShader_1_])
         {
             return true;
         }
@@ -1763,8 +1899,8 @@
         }
         else
         {
-            this.loadEffect(new ResourceLocation("shaders/post/fxaa_of_" + fxaaLevel + "x.json"));
-            this.fxaaShaders[fxaaLevel] = this.postEffect;
+            this.loadEffect(new ResourceLocation("shaders/post/fxaa_of_" + p_setFxaaShader_1_ + "x.json"));
+            this.fxaaShaders[p_setFxaaShader_1_] = this.postEffect;
             return this.effectActive;
         }
     }
@@ -1810,6 +1946,7 @@
             multibuffersource$buffersource.endBatch();
             RenderSystem.enableCull();
             RenderSystem.disableDepthTest();
+            RenderSystem.depthFunc(515);
         }
     }
 
@@ -2200,4 +2337,2326 @@
     {
         return rendertypeCrumblingShader;
     }
+
+    public void drawSizedQuad(float displayWidth, float displayHeight, float size, GlStateManager.Color color)
+    {
+        float f = displayHeight / displayWidth;
+        Tesselator tesselator = Tesselator.getInstance();
+        BufferBuilder bufferbuilder = tesselator.getBuilder();
+        bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR_NORMAL);
+        bufferbuilder.vertex((double)(-(size / 2.0F)), (double)(-(size * f) / 2.0F), 0.0D).uv(0.0F, 0.0F).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        bufferbuilder.vertex((double)(size / 2.0F), (double)(-(size * f) / 2.0F), 0.0D).uv(1.0F, 0.0F).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        bufferbuilder.vertex((double)(size / 2.0F), (double)(size * f / 2.0F), 0.0D).uv(1.0F, 1.0F).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        bufferbuilder.vertex((double)(-(size / 2.0F)), (double)(size * f / 2.0F), 0.0D).uv(0.0F, 1.0F).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        tesselator.end();
+    }
+
+    public void drawSizedQuad(float displayWidth, float displayHeight, float size)
+    {
+        this.drawSizedQuad(displayWidth, displayHeight, size, new GlStateManager.Color());
+    }
+
+    public void drawSizedQuadWithLightmap(float displayWidth, float displayHeight, float size, int lighti, GlStateManager.Color color)
+    {
+        float f = displayHeight / displayWidth;
+        this.lightTexture.turnOnLightLayer();
+        Tesselator tesselator = Tesselator.getInstance();
+        BufferBuilder bufferbuilder = tesselator.getBuilder();
+        bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX_LMAP_COLOR_NORMAL);
+        bufferbuilder.vertex((double)(-(size / 2.0F)), (double)(-(size * f) / 2.0F), 0.0D).uv(0.0F, 0.0F).uv2(lighti).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        bufferbuilder.vertex((double)(size / 2.0F), (double)(-(size * f) / 2.0F), 0.0D).uv(1.0F, 0.0F).uv2(lighti).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        bufferbuilder.vertex((double)(size / 2.0F), (double)(size * f / 2.0F), 0.0D).uv(1.0F, 1.0F).uv2(lighti).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        bufferbuilder.vertex((double)(-(size / 2.0F)), (double)(size * f / 2.0F), 0.0D).uv(0.0F, 1.0F).uv2(lighti).color(color.r, color.g, color.b, color.a).normal(0.0F, 0.0F, 1.0F).endVertex();
+        tesselator.end();
+        this.lightTexture.turnOffLightLayer();
+    }
+
+    public void drawSizedQuadWithLightmap(float displayWidth, float displayHeight, float size, int lighti)
+    {
+        this.drawSizedQuadWithLightmap(displayWidth, displayHeight, size, lighti, new GlStateManager.Color());
+    }
+
+    public void handleNotificationText()
+    {
+        String s = "";
+        String s1 = "";
+        String s2 = "";
+        boolean flag = false;
+
+        if (this.minecraft.errorHelper != null)
+        {
+            if (System.currentTimeMillis() < this.minecraft.errorHelper.endTime)
+            {
+                s = this.minecraft.errorHelper.title;
+                s1 = this.minecraft.errorHelper.message;
+                s2 = this.minecraft.errorHelper.resolution;
+                flag = true;
+            }
+            else
+            {
+                this.minecraft.errorHelper = null;
+            }
+        }
+
+        if (flag)
+        {
+            this.displayNotificationText(s, s1, s2, this.minecraft.getWindow().getScreenWidth(), this.minecraft.getWindow().getScreenHeight(), true, true);
+        }
+    }
+
+    public void renderFadeBlend(float r, float g, float b, float fadeAlpha, int left, int right, int bottom, int top)
+    {
+        if (fadeAlpha != 0.0F && !Config.isShaders())
+        {
+            GlStateManager._enableBlend();
+            GlStateManager.disableAlphaTest();
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+            GlStateManager._disableDepthTest();
+            GlStateManager._disableTexture();
+            //GlStateManager._disableLighting();
+            GL11.glMatrixMode(GL11.GL_PROJECTION);
+            GL43.glPushMatrix();
+            GL11.glLoadIdentity();
+            GL11.glOrtho(0.0D, (double)this.minecraft.getWindow().getWidth(), (double)this.minecraft.getWindow().getHeight(), 0.0D, -1.0D, 1.0D);
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL43.glPushMatrix();
+            GL11.glLoadIdentity();
+            GlStateManager.color4f(r, g, b, fadeAlpha);
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glVertex3f((float)left, (float)top, 0.0F);
+            GL11.glVertex3f((float)left, (float)bottom, 0.0F);
+            GL11.glVertex3f((float)right, (float)bottom, 0.0F);
+            GL11.glVertex3f((float)right, (float)top, 0.0F);
+            GL11.glEnd();
+            GL11.glMatrixMode(GL11.GL_PROJECTION);
+            GL43.glPopMatrix();
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL43.glPopMatrix();
+            GlStateManager._enableDepthTest();
+            GlStateManager._enableTexture();
+            GlStateManager.enableAlphaTest();
+            //GlStateManager._enableLighting();
+        }
+    }
+
+    void render2D(float par1, RenderTarget framebuffer, Vec3 pos, org.vivecraft.utils.math.Matrix4f rot, boolean depthAlways)
+    {
+        if (!this.minecraft.bowTracker.isDrawing)
+        {
+            boolean flag = this.isInMenuRoom();
+            this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, par1, true)));
+            GL43.glPushMatrix();
+            GL11.glLoadIdentity();
+            this.applyVRModelViewLegacy(this.minecraft.currentPass);
+            GL43.glLoadIdentity();
+            Vec3 vec3 = this.apply2DModelView(this.minecraft.currentPass, pos, rot);
+            framebuffer.bindRead();
+            GlStateManager._disableCull();
+            GlStateManager._enableTexture();
+            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, 33071.0F);
+            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, 33071.0F);
+            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
+            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, 34046, 16.0F);
+            GlStateManager.Color GlStateManager$color = new GlStateManager.Color();
+
+            if (!flag)
+            {
+                if (this.minecraft.screen == null)
+                {
+                    GlStateManager$color.a = this.minecraft.vrSettings.hudOpacity;
+                }
+
+                if (this.minecraft.player != null && this.minecraft.player.isShiftKeyDown())
+                {
+                    GlStateManager$color.a *= 0.75F;
+                }
+
+                GlStateManager._enableBlend();
+                RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE_MINUS_DST_ALPHA, GlStateManager.DestFactor.ONE);
+            }
+            else
+            {
+                GlStateManager._disableBlend();
+            }
+
+            if (depthAlways)
+            {
+                GlStateManager._depthFunc(519);
+            }
+            else
+            {
+                GlStateManager._depthFunc(515);
+            }
+
+            GlStateManager.alphaFunc(516, 0.003921569F);
+            GlStateManager._depthMask(true);
+            GlStateManager._enableDepthTest();
+
+            if (flag)
+            {
+                GlStateManager.disableAlphaTest();
+            }
+            else
+            {
+                GlStateManager.enableAlphaTest();
+            }
+
+            //GlStateManager._disableLighting();
+
+            if (this.minecraft.level != null)
+            {
+                if (this.itemInHandRenderer.isInsideOpaqueBlock(vec3))
+                {
+                    vec3 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition();
+                }
+
+                int i = Config.isShaders() ? 8 : 4;
+                int j = Utils.getCombinedLightWithMin(this.minecraft.level, new BlockPos(vec3), i);
+                this.drawSizedQuadWithLightmap((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, j, GlStateManager$color);
+            }
+            else
+            {
+                this.drawSizedQuad((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, GlStateManager$color);
+            }
+
+            //GlStateManager._blendColor(1.0F, 1.0F, 1.0F, 1.0F);
+            RenderSystem.defaultBlendFunc();
+            GlStateManager._depthFunc(515);
+            GlStateManager._enableCull();
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL43.glPopMatrix();
+        }
+    }
+
+    void renderPhysicalKeyboard(float partialTicks)
+    {
+        if (!this.minecraft.bowTracker.isDrawing)
+        {
+            this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, partialTicks, true)));
+            GL43.glPushMatrix();
+            GL43.glLoadIdentity();
+            //RenderSystem.enableRescaleNormal();
+            //Lighting.turnBackOn();
+            this.applyPhysicalKeyboardModelView(this.minecraft.currentPass, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room);
+            KeyboardHandler.physicalKeyboard.render();
+            //Lighting.turnOff();
+            //RenderSystem.disableRescaleNormal();
+            GL43.glPopMatrix();
+        }
+    }
+
+    private void renderGuiLayer(float par1, boolean depthAlways)
+    {
+        if (!this.minecraft.bowTracker.isDrawing)
+        {
+            if (this.minecraft.screen != null || !this.minecraft.options.hideGui)
+            {
+                if (!RadialHandler.isShowing())
+                {
+                    boolean flag = this.isInMenuRoom();
+
+                    if (flag)
+                    {
+                        this.applystereoLegacy(this.minecraft.currentPass);
+                        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+                        GL43.glTranslated(this.minecraft.vrPlayer.vrdata_world_render.origin.x - vec3.x, this.minecraft.vrPlayer.vrdata_world_render.origin.y - vec3.y, this.minecraft.vrPlayer.vrdata_world_render.origin.z - vec3.z);
+
+                        if (this.minecraft.menuWorldRenderer != null && this.minecraft.menuWorldRenderer.isReady())
+                        {
+                            try
+                            {
+                                this.renderTechjarsAwesomeMainMenuRoom();
+                            }
+                            catch (Exception exception)
+                            {
+                                System.out.println("Error rendering main menu world, unloading to prevent more errors");
+                                exception.printStackTrace();
+                                this.minecraft.menuWorldRenderer.destroy();
+                            }
+                        }
+                        else
+                        {
+                            this.renderJrbuddasAwesomeMainMenuRoom();
+                        }
+                    }
+
+                    GL43.glPushMatrix();
+                    GL43.glLoadIdentity();
+                    Vec3 vec31 = GuiHandler.applyGUIModelView(this.minecraft.currentPass);
+                    GuiHandler.guiFramebuffer.bindRead();
+                    RenderSystem.disableCull();
+                    RenderSystem.enableTexture();
+                    GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, 33071.0F);
+                    GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, 33071.0F);
+                    GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
+                    GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
+                    GL11.glTexParameterf(GL11.GL_TEXTURE_2D, 34046, 16.0F);
+                    GlStateManager.Color GlStateManager$color = new GlStateManager.Color();
+
+                    if (!flag)
+                    {
+                        if (this.minecraft.screen == null)
+                        {
+                            GlStateManager$color.a = this.minecraft.vrSettings.hudOpacity;
+                        }
+
+                        if (this.minecraft.player != null && this.minecraft.player.isShiftKeyDown())
+                        {
+                            GlStateManager$color.a *= 0.75F;
+                        }
+
+                        RenderSystem.enableBlend();
+                        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE_MINUS_DST_ALPHA, GlStateManager.DestFactor.ONE);
+                    }
+                    else
+                    {
+                        RenderSystem.disableBlend();
+                    }
+
+                    if (depthAlways)
+                    {
+                        RenderSystem.depthFunc(519);
+                    }
+                    else
+                    {
+                        RenderSystem.depthFunc(515);
+                    }
+
+                    GlStateManager.alphaFunc(516, 0.003921569F);
+                    RenderSystem.depthMask(true);
+                    RenderSystem.enableDepthTest();
+
+                    if (flag)
+                    {
+                        GlStateManager.disableAlphaTest();
+                    }
+                    else
+                    {
+                        GlStateManager.enableAlphaTest();
+                    }
+
+                    //RenderSystem.disableLighting();
+
+                    if (this.minecraft.level != null)
+                    {
+                        if (this.itemInHandRenderer.isInsideOpaqueBlock(vec31))
+                        {
+                            vec31 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition();
+                        }
+
+                        int i = Config.isShaders() ? 8 : 4;
+                        int j = Utils.getCombinedLightWithMin(this.minecraft.level, new BlockPos(vec31), i);
+                        this.drawSizedQuadWithLightmap((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, j, GlStateManager$color);
+                    }
+                    else
+                    {
+                        this.drawSizedQuad((float)this.minecraft.getWindow().getGuiScaledWidth(), (float)this.minecraft.getWindow().getGuiScaledHeight(), 1.5F, GlStateManager$color);
+                    }
+
+                    //RenderSystem.blendColor(1.0F, 1.0F, 1.0F, 1.0F);
+                    RenderSystem.depthFunc(515);
+                    RenderSystem.enableDepthTest();
+                    //RenderSystem.defaultAlphaFunc();
+                    RenderSystem.defaultBlendFunc();
+                    RenderSystem.enableCull();
+                    GL43.glPopMatrix();
+                }
+            }
+        }
+    }
+
+    public void renderDebugAxes(int r, int g, int b, float radius)
+    {
+        this.setupPolyRendering(true);
+        this.minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+        this.renderCircle(new Vec3(0.0D, 0.0D, 0.0D), radius, 32, r, g, b, 255, 0);
+        this.renderCircle(new Vec3(0.0D, 0.01D, 0.0D), radius * 0.75F, 32, r, g, b, 255, 0);
+        this.renderCircle(new Vec3(0.0D, 0.02D, 0.0D), radius * 0.25F, 32, r, g, b, 255, 0);
+        this.renderCircle(new Vec3(0.0D, 0.0D, 0.15D), radius * 0.5F, 32, r, g, b, 255, 2);
+        this.setupPolyRendering(false);
+    }
+
+    public void drawScreen(float par1, Screen screen, PoseStack matrixstack)
+    {
+        int i = 0;
+        int j = 0;
+        GL11.glDisable(GL11.GL_STENCIL_TEST);
+        RenderSystem.clearColor(0.0F, 0.0F, 0.0F, 0.0F);
+        Minecraft minecraft = this.minecraft;
+        RenderSystem.clear(16640, Minecraft.ON_OSX);
+        RenderSystem.colorMask(true, true, true, true);
+        GL43.glMatrixMode(5889);
+        GL43.glLoadIdentity();
+        GL43.glOrtho(0.0D, (double)this.minecraft.getWindow().getWidth() / this.minecraft.getWindow().getGuiScale(), (double)this.minecraft.getWindow().getHeight() / this.minecraft.getWindow().getGuiScale(), 0.0D, 1000.0D, 3000.0D);
+        GL43.glMatrixMode(5888);
+        GL43.glLoadIdentity();
+        GL43.glTranslatef(0.0F, 0.0F, -2000.0F);
+        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+        screen.render(matrixstack, 0, 0, par1);
+        //RenderSystem.disableLighting();
+        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+        this.minecraft.getMainRenderTarget().bindRead();
+        this.minecraft.getMainRenderTarget().genMipMaps();
+        this.minecraft.getMainRenderTarget().unbindRead();
+        GL11.glEnable(GL11.GL_STENCIL_TEST);
+    }
+
+    public void drawFramebufferNEW(float partialTicks, boolean renderWorldIn, PoseStack matrixstack)
+    {
+        if (!this.minecraft.noRender)
+        {
+            int i = (int)(this.minecraft.mouseHandler.xpos() * (double)this.minecraft.getWindow().getGuiScaledWidth() / (double)this.minecraft.getWindow().getScreenWidth());
+            int j = (int)(this.minecraft.mouseHandler.ypos() * (double)this.minecraft.getWindow().getGuiScaledHeight() / (double)this.minecraft.getWindow().getScreenHeight());
+            Window window = this.minecraft.getWindow();
+            RenderSystem.clearColor(0.0F, 0.0F, 0.0F, 0.0F);
+            RenderSystem.clear(16640, Minecraft.ON_OSX);
+            GL43.glMatrixMode(5889);
+            GL43.glPushMatrix();
+            GL43.glLoadIdentity();
+            GL43.glOrtho(0.0D, (double)window.getScreenWidth() / window.getGuiScale(), (double)window.getScreenHeight() / window.getGuiScale(), 0.0D, 1000.0D, 3000.0D);
+            GL43.glMatrixMode(5888);
+            GL43.glPushMatrix();
+            GL43.glLoadIdentity();
+            GL43.glTranslatef(0.0F, 0.0F, -2000.0F);
+            Lighting.setupFor3DItems();
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+            GlStateManager.alphaFunc(516, 0.01F);
+
+            if (this.lightTexture.isCustom())
+            {
+                this.lightTexture.setAllowed(false);
+            }
+
+            this.lightTexture.turnOffLightLayer();
+            this.minecraft.pumpkineffect = 0.0F;
+
+            if (renderWorldIn && this.minecraft.level != null && (!this.minecraft.options.hideGui || this.minecraft.screen != null))
+            {
+                if (Reflector.ForgeIngameGui.exists())
+                {
+                    //RenderSystem.defaultAlphaFunc();
+                    Reflector.ForgeIngameGui_renderVignette.setValue(false);
+                    Reflector.ForgeIngameGui_renderPortal.setValue(false);
+                    Reflector.ForgeIngameGui_renderCrosshairs.setValue(false);
+                }
+
+                if (!Main.viewonly)
+                {
+                    this.minecraft.gui.render(matrixstack, partialTicks);
+                }
+
+                if (this.minecraft.options.ofShowFps && !this.minecraft.options.renderDebug)
+                {
+                    Config.drawFps(matrixstack);
+                }
+
+                if (this.minecraft.options.renderDebug)
+                {
+                    Lagometer.showLagometer(matrixstack, (int)this.minecraft.getWindow().getGuiScale());
+                }
+
+                RenderSystem.clear(256, Minecraft.ON_OSX);
+            }
+
+            RenderSystem.clear(256, Minecraft.ON_OSX);
+
+            if (this.guiLoadingVisible != (this.minecraft.getOverlay() != null))
+            {
+                if (this.minecraft.getOverlay() != null)
+                {
+                    LoadingOverlay.registerTextures(this.minecraft);
+
+                    if (this.minecraft.getOverlay() instanceof LoadingOverlay)
+                    {
+                        LoadingOverlay loadingoverlay = (LoadingOverlay)this.minecraft.getOverlay();
+                        loadingoverlay.update();
+                    }
+                }
+
+                this.guiLoadingVisible = this.minecraft.getOverlay() != null;
+            }
+
+            if (this.minecraft.getOverlay() != null)
+            {
+                try
+                {
+                    this.minecraft.getOverlay().render(matrixstack, i, j, this.minecraft.getDeltaFrameTime());
+                }
+                catch (Throwable throwable11)
+                {
+                    CrashReport crashreport = CrashReport.forThrowable(throwable11, "Rendering overlay");
+                    CrashReportCategory crashreportcategory = crashreport.addCategory("Overlay render details");
+                    crashreportcategory.setDetail("Overlay name", () ->
+                    {
+                        return this.minecraft.getOverlay().getClass().getCanonicalName();
+                    });
+                    throw new ReportedException(crashreport);
+                }
+            }
+            else if (this.minecraft.screen != null)
+            {
+                try
+                {
+                    if (Reflector.ForgeHooksClient_drawScreen.exists())
+                    {
+                        Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, this.minecraft.screen, matrixstack, i, j, this.minecraft.getDeltaFrameTime());
+                    }
+                    else
+                    {
+                        this.minecraft.screen.render(matrixstack, i, j, this.minecraft.getDeltaFrameTime());
+                    }
+
+                    this.minecraft.gui.drawMouseMenuQuad(i, j);
+                }
+                catch (Throwable throwable)
+                {
+                    CrashReport crashreport1 = CrashReport.forThrowable(throwable, "Rendering screen");
+                    CrashReportCategory crashreportcategory1 = crashreport1.addCategory("Screen render details");
+                    crashreportcategory1.setDetail("Screen name", () ->
+                    {
+                        return this.minecraft.screen.getClass().getCanonicalName();
+                    });
+                    crashreportcategory1.setDetail("Mouse location", () ->
+                    {
+                        return String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%f, %f)", i, j, this.minecraft.mouseHandler.xpos(), this.minecraft.mouseHandler.ypos());
+                    });
+                    crashreportcategory1.setDetail("Screen size", () ->
+                    {
+                        return String.format(Locale.ROOT, "Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %f", this.minecraft.getWindow().getGuiScaledWidth(), this.minecraft.getWindow().getGuiScaledHeight(), this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), this.minecraft.getWindow().getGuiScale());
+                    });
+                    throw new ReportedException(crashreport1);
+                }
+            }
+
+            //RenderSystem.enableColorMaterial();
+            RenderSystem.disableBlend();
+            //RenderSystem.disableLighting();
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+            this.minecraft.getProfiler().push("toasts");
+            this.minecraft.getToasts().render(new PoseStack());
+            this.minecraft.getProfiler().pop();
+            this.lightTexture.setAllowed(true);
+        }
+
+        if (this.minecraft.options.renderDebugCharts && !this.minecraft.options.hideGui)
+        {
+            this.minecraft.drawProfiler();
+        }
+
+        this.frameFinish();
+        this.waitForServerThread();
+        MemoryMonitor.update();
+        Lagometer.updateLagometer();
+
+        if (this.minecraft.options.ofProfiler)
+        {
+            this.minecraft.options.renderDebugCharts = true;
+        }
+
+        this.minecraft.getMainRenderTarget().bindRead();
+        this.minecraft.getMainRenderTarget().genMipMaps();
+        this.minecraft.getMainRenderTarget().unbindRead();
+        GL43.glMatrixMode(5889);
+        GL43.glPopMatrix();
+        GL43.glMatrixMode(5888);
+        GL43.glPopMatrix();
+    }
+
+    private void renderTeleportArc(VRPlayer vrPlayer)
+    {
+        if (this.minecraft.teleportTracker.vrMovementStyle.showBeam && this.minecraft.teleportTracker.isAiming() && this.minecraft.teleportTracker.movementTeleportArcSteps > 1)
+        {
+            this.minecraft.getProfiler().push("teleportArc");
+            boolean flag = Config.isShaders();
+            GlStateManager._enableCull();
+            this.minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+            Tesselator tesselator = Tesselator.getInstance();
+            tesselator.getBuilder().begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_NORMAL);
+            double d0 = this.minecraft.teleportTracker.lastTeleportArcDisplayOffset;
+            Vec3 vec3 = this.minecraft.teleportTracker.getDestination();
+            boolean flag1 = vec3.x != 0.0D || vec3.y != 0.0D || vec3.z != 0.0D;
+            byte b0 = -1;
+            Vec3i vec3i;
+
+            if (!flag1)
+            {
+                vec3i = new Vec3i(83, 75, 83);
+                b0 = -128;
+            }
+            else
+            {
+                if (NetworkHelper.isLimitedSurvivalTeleport() && !this.minecraft.player.getAbilities().mayfly)
+                {
+                    vec3i = this.tpLimitedColor;
+                }
+                else
+                {
+                    vec3i = this.tpUnlimitedColor;
+                }
+
+                d0 = this.minecraft.vrRenderer.getCurrentTimeSecs() * (double)this.minecraft.teleportTracker.vrMovementStyle.textureScrollSpeed * 0.6D;
+                this.minecraft.teleportTracker.lastTeleportArcDisplayOffset = d0;
+            }
+
+            float f = this.minecraft.teleportTracker.vrMovementStyle.beamHalfWidth * 0.15F;
+            int i = this.minecraft.teleportTracker.movementTeleportArcSteps - 1;
+
+            if (this.minecraft.teleportTracker.vrMovementStyle.beamGrow)
+            {
+                i = (int)((double)i * this.minecraft.teleportTracker.movementTeleportProgress);
+            }
+
+            double d1 = 1.0D / (double)i;
+            Vec3 vec31 = new Vec3(0.0D, 1.0D, 0.0D);
+
+            for (int j = 0; j < i; ++j)
+            {
+                double d2 = (double)j / (double)i + d0 * d1;
+                int k = Mth.floor(d2);
+                d2 = d2 - (double)((float)k);
+                Vec3 vec32 = this.minecraft.teleportTracker.getInterpolatedArcPosition((float)(d2 - d1 * (double)0.4F)).subtract(this.minecraft.getCameraEntity().position());
+                Vec3 vec33 = this.minecraft.teleportTracker.getInterpolatedArcPosition((float)d2).subtract(this.minecraft.getCameraEntity().position());
+                float f2 = (float)d2 * 2.0F;
+                this.renderBox(tesselator, vec32, vec33, -f, f, (-1.0F + f2) * f, (1.0F + f2) * f, vec31, vec3i, b0);
+            }
+
+            tesselator.end();
+            GlStateManager._disableCull();
+
+            if (flag1 && this.minecraft.teleportTracker.movementTeleportProgress >= 1.0D)
+            {
+                Vec3 vec34 = (new Vec3(vec3.x, vec3.y, vec3.z)).subtract(this.minecraft.getCameraEntity().position());
+                int l = 1;
+                float f1 = 0.01F;
+                double d4 = 0.0D;
+                double d5 = 0.0D;
+                double d3 = 0.0D;
+
+                if (l == 0)
+                {
+                    d5 -= (double)f1;
+                }
+
+                if (l == 1)
+                {
+                    d5 += (double)f1;
+                }
+
+                if (l == 2)
+                {
+                    d3 -= (double)f1;
+                }
+
+                if (l == 3)
+                {
+                    d3 += (double)f1;
+                }
+
+                if (l == 4)
+                {
+                    d4 -= (double)f1;
+                }
+
+                if (l == 5)
+                {
+                    d4 += (double)f1;
+                }
+
+                this.renderFlatQuad(vec34.add(d4, d5, d3), 0.6F, 0.6F, 0.0F, (int)((double)vec3i.getX() * 1.03D), (int)((double)vec3i.getY() * 1.03D), (int)((double)vec3i.getZ() * 1.03D), 64);
+
+                if (l == 0)
+                {
+                    d5 -= (double)f1;
+                }
+
+                if (l == 1)
+                {
+                    d5 += (double)f1;
+                }
+
+                if (l == 2)
+                {
+                    d3 -= (double)f1;
+                }
+
+                if (l == 3)
+                {
+                    d3 += (double)f1;
+                }
+
+                if (l == 4)
+                {
+                    d4 -= (double)f1;
+                }
+
+                if (l == 5)
+                {
+                    d4 += (double)f1;
+                }
+
+                this.renderFlatQuad(vec34.add(d4, d5, d3), 0.4F, 0.4F, 0.0F, (int)((double)vec3i.getX() * 1.04D), (int)((double)vec3i.getY() * 1.04D), (int)((double)vec3i.getZ() * 1.04D), 64);
+
+                if (l == 0)
+                {
+                    d5 -= (double)f1;
+                }
+
+                if (l == 1)
+                {
+                    d5 += (double)f1;
+                }
+
+                if (l == 2)
+                {
+                    d3 -= (double)f1;
+                }
+
+                if (l == 3)
+                {
+                    d3 += (double)f1;
+                }
+
+                if (l == 4)
+                {
+                    d4 -= (double)f1;
+                }
+
+                if (l == 5)
+                {
+                    d4 += (double)f1;
+                }
+
+                this.renderFlatQuad(vec34.add(d4, d5, d3), 0.2F, 0.2F, 0.0F, (int)((double)vec3i.getX() * 1.05D), (int)((double)vec3i.getY() * 1.05D), (int)((double)vec3i.getZ() * 1.05D), 64);
+            }
+
+            this.minecraft.getProfiler().pop();
+            RenderSystem.enableCull();
+        }
+    }
+
+    public void SetupRenderingAtController(int controller, PoseStack matrix)
+    {
+        Vec3 vec3 = this.getControllerRenderPos(controller);
+        vec3 = vec3.subtract(this.minecraft.vrPlayer.getVRDataWorld().getEye(this.minecraft.currentPass).getPosition());
+
+        if (vec3 != null)
+        {
+            matrix.translate((double)((float)vec3.x), (double)((float)vec3.y), (double)((float)vec3.z));
+        }
+
+        matrix.scale(this.minecraft.vrPlayer.vrdata_world_render.worldScale, this.minecraft.vrPlayer.vrdata_world_render.worldScale, this.minecraft.vrPlayer.vrdata_world_render.worldScale);
+        matrix.last().pose().multiply(this.minecraft.vrPlayer.vrdata_world_render.getController(controller).getMatrix().inverted().transposed().toMCMatrix());
+    }
+
+    public void SetupRenderingAtControllerLegacy(int controller)
+    {
+        Vec3 vec3 = this.getControllerRenderPos(controller);
+        vec3 = vec3.subtract(this.minecraft.vrPlayer.getVRDataWorld().getEye(this.minecraft.currentPass).getPosition());
+
+        if (vec3 != null)
+        {
+            GL11.glTranslatef((float)vec3.x, (float)vec3.y, (float)vec3.z);
+        }
+
+        GL11.glScalef(this.minecraft.vrPlayer.vrdata_world_render.worldScale, this.minecraft.vrPlayer.vrdata_world_render.worldScale, this.minecraft.vrPlayer.vrdata_world_render.worldScale);
+        FloatBuffer floatbuffer = this.minecraft.vrPlayer.vrdata_world_render.getController(controller).getMatrix().transposed().toFloatBuffer();
+        GL11.glMultMatrixf(floatbuffer);
+    }
+
+    public void renderFlatQuad(Vec3 pos, float width, float height, float yaw, int r, int g, int b, int a)
+    {
+        Tesselator tesselator = Tesselator.getInstance();
+        tesselator.getBuilder().begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_NORMAL);
+        Vec3 vec3 = (new Vec3((double)(-width / 2.0F), 0.0D, (double)(height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));
+        Vec3 vec31 = (new Vec3((double)(-width / 2.0F), 0.0D, (double)(-height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));
+        Vec3 vec32 = (new Vec3((double)(width / 2.0F), 0.0D, (double)(-height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));
+        Vec3 vec33 = (new Vec3((double)(width / 2.0F), 0.0D, (double)(height / 2.0F))).yRot((float)Math.toRadians((double)(-yaw)));
+        tesselator.getBuilder().vertex(pos.x + vec3.x, pos.y, pos.z + vec3.z).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+        tesselator.getBuilder().vertex(pos.x + vec31.x, pos.y, pos.z + vec31.z).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+        tesselator.getBuilder().vertex(pos.x + vec32.x, pos.y, pos.z + vec32.z).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+        tesselator.getBuilder().vertex(pos.x + vec33.x, pos.y, pos.z + vec33.z).color(r, g, b, a).normal(0.0F, 1.0F, 0.0F).endVertex();
+        tesselator.end();
+    }
+
+    public void renderCircle(Vec3 pos, float radius, int edges, int r, int g, int b, int a, int side)
+    {
+        Tesselator tesselator = Tesselator.getInstance();
+        tesselator.getBuilder().begin(Mode.TRIANGLE_FAN, DefaultVertexFormat.POSITION_COLOR);
+        tesselator.getBuilder().vertex(pos.x, pos.y, pos.z).color(r, g, b, a).endVertex();
+
+        for (int i = 0; i < edges + 1; ++i)
+        {
+            float f = (float)i / (float)edges * (float)Math.PI * 2.0F;
+
+            if (side != 0 && side != 1)
+            {
+                if (side != 2 && side != 3)
+                {
+                    if (side == 4 || side == 5)
+                    {
+                        float f5 = (float)pos.x;
+                        float f7 = (float)pos.y + (float)Math.cos((double)f) * radius;
+                        float f9 = (float)pos.z + (float)Math.sin((double)f) * radius;
+                        tesselator.getBuilder().vertex((double)f5, (double)f7, (double)f9).color(r, g, b, a).endVertex();
+                    }
+                }
+                else
+                {
+                    float f4 = (float)pos.x + (float)Math.cos((double)f) * radius;
+                    float f6 = (float)pos.y + (float)Math.sin((double)f) * radius;
+                    float f8 = (float)pos.z;
+                    tesselator.getBuilder().vertex((double)f4, (double)f6, (double)f8).color(r, g, b, a).endVertex();
+                }
+            }
+            else
+            {
+                float f1 = (float)pos.x + (float)Math.cos((double)f) * radius;
+                float f2 = (float)pos.y;
+                float f3 = (float)pos.z + (float)Math.sin((double)f) * radius;
+                tesselator.getBuilder().vertex((double)f1, (double)f2, (double)f3).color(r, g, b, a).endVertex();
+            }
+        }
+
+        tesselator.end();
+    }
+
+    private void renderBox(Tesselator tes, Vec3 start, Vec3 end, float minX, float maxX, float minY, float maxY, Vec3 up, Vec3i color, byte alpha)
+    {
+        Vec3 vec3 = start.subtract(end).normalize();
+        Vec3 vec31 = vec3.cross(up);
+        up = vec31.cross(vec3);
+        Vec3 vec32 = new Vec3(vec31.x * (double)minX, vec31.y * (double)minX, vec31.z * (double)minX);
+        vec31 = vec31.scale((double)maxX);
+        Vec3 vec33 = new Vec3(up.x * (double)minY, up.y * (double)minY, up.z * (double)minY);
+        up = up.scale((double)maxY);
+        org.vivecraft.utils.lwjgl.Vector3f vector3f = Utils.convertToVector3f(vec3);
+        org.vivecraft.utils.lwjgl.Vector3f vector3f1 = Utils.convertToVector3f(up.normalize());
+        org.vivecraft.utils.lwjgl.Vector3f vector3f2 = Utils.convertToVector3f(vec31.normalize());
+        Vec3 vec34 = start.add(vec31.x + vec33.x, vec31.y + vec33.y, vec31.z + vec33.z);
+        Vec3 vec35 = start.add(vec31.x + up.x, vec31.y + up.y, vec31.z + up.z);
+        Vec3 vec36 = start.add(vec32.x + vec33.x, vec32.y + vec33.y, vec32.z + vec33.z);
+        Vec3 vec37 = start.add(vec32.x + up.x, vec32.y + up.y, vec32.z + up.z);
+        Vec3 vec38 = end.add(vec31.x + vec33.x, vec31.y + vec33.y, vec31.z + vec33.z);
+        Vec3 vec39 = end.add(vec31.x + up.x, vec31.y + up.y, vec31.z + up.z);
+        Vec3 vec310 = end.add(vec32.x + vec33.x, vec32.y + vec33.y, vec32.z + vec33.z);
+        Vec3 vec311 = end.add(vec32.x + up.x, vec32.y + up.y, vec32.z + up.z);
+        BufferBuilder bufferbuilder = tes.getBuilder();
+        bufferbuilder.vertex(vec34.x, vec34.y, vec34.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+        bufferbuilder.vertex(vec36.x, vec36.y, vec36.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+        bufferbuilder.vertex(vec37.x, vec37.y, vec37.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+        bufferbuilder.vertex(vec35.x, vec35.y, vec35.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f.x, vector3f.y, vector3f.z).endVertex();
+        bufferbuilder.vertex(vec310.x, vec310.y, vec310.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+        bufferbuilder.vertex(vec38.x, vec38.y, vec38.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+        bufferbuilder.vertex(vec39.x, vec39.y, vec39.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+        bufferbuilder.vertex(vec311.x, vec311.y, vec311.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f.x, -vector3f.y, -vector3f.z).endVertex();
+        bufferbuilder.vertex(vec38.x, vec38.y, vec38.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec34.x, vec34.y, vec34.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec35.x, vec35.y, vec35.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec39.x, vec39.y, vec39.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f2.x, vector3f2.y, vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec36.x, vec36.y, vec36.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec310.x, vec310.y, vec310.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec311.x, vec311.y, vec311.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec37.x, vec37.y, vec37.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f2.x, -vector3f2.y, -vector3f2.z).endVertex();
+        bufferbuilder.vertex(vec37.x, vec37.y, vec37.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+        bufferbuilder.vertex(vec311.x, vec311.y, vec311.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+        bufferbuilder.vertex(vec39.x, vec39.y, vec39.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+        bufferbuilder.vertex(vec35.x, vec35.y, vec35.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(vector3f1.x, vector3f1.y, vector3f1.z).endVertex();
+        bufferbuilder.vertex(vec310.x, vec310.y, vec310.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+        bufferbuilder.vertex(vec36.x, vec36.y, vec36.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+        bufferbuilder.vertex(vec34.x, vec34.y, vec34.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+        bufferbuilder.vertex(vec38.x, vec38.y, vec38.z).color(color.getX(), color.getY(), color.getZ(), alpha).normal(-vector3f1.x, -vector3f1.y, -vector3f1.z).endVertex();
+    }
+
+    private void renderJrbuddasAwesomeMainMenuRoom()
+    {
+        GlStateManager._clearColor(0.1F, 0.1F, 0.1F, 0.1F);
+        GlStateManager.clear(16384);
+        GlStateManager._disableBlend();
+        GlStateManager.color4f(0.5F, 0.5F, 0.5F, 1.0F);
+        GlStateManager._enableDepthTest();
+        GlStateManager._enableTexture();
+        //GlStateManager._enableLighting();
+        //GlStateManager._enableLight(0);
+        GlStateManager._enableCull();
+        //GlStateManager._enableColorMaterial();
+        //GlStateManager._colorMaterial(1032, 5634);
+        Minecraft.getInstance().getTextureManager().bindForSetup(Screen.BACKGROUND_LOCATION);
+        int i = 4;
+        float f = 2.5F;
+        float f1 = 1.3F;
+        float[] afloat = this.minecraft.vr.getPlayAreaSize();
+
+        if (afloat != null)
+        {
+            float f2 = afloat[0] + f1;
+            float f3 = afloat[1] + f1;
+            GL43.glPushMatrix();
+            GL11.glTranslatef(-f2 / 2.0F, 0.0F, -f3 / 2.0F);
+            GL11.glLightfv(16384, 4611, this.setColorBuffer(f2 / 2.0F, 1.8F, f3 / 2.0F, 1.0F));
+            GL11.glLightfv(16384, 4609, this.setColorBuffer(1.0F, 1.0F, 1.0F, 1.0F));
+            GL11.glLightfv(16384, 4608, this.setColorBuffer(0.2F, 0.2F, 0.2F, 1.0F));
+            GL11.glLightfv(16384, 4610, this.setColorBuffer(1.0F, 1.0F, 1.0F, 1.0F));
+            GL11.glLightfv(16384, 4615, this.setColorBuffer(1.0F, 0.0F, 0.0F, 0.0F));
+            GL11.glLightfv(16384, 4616, this.setColorBuffer(0.0F, 0.0F, 0.0F, 0.0F));
+            GL11.glLightfv(16384, 4617, this.setColorBuffer(0.0F, 0.0F, 0.0F, 0.0F));
+            GL11.glLightModelfv(2899, this.setColorBuffer(0.0F, 0.0F, 0.0F, 1.0F));
+            //GlStateManager._shadeModel(7425);
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glNormal3f(0.0F, 1.0F, 0.0F);
+            GL11.glTexCoord2f(0.0F, 0.0F);
+            GL11.glVertex3f(0.0F, 0.0F, 0.0F);
+            GL11.glTexCoord2f(0.0F, (float)i * f3);
+            GL11.glVertex3f(0.0F, 0.0F, f3);
+            GL11.glTexCoord2f((float)i * f2, (float)i * f3);
+            GL11.glVertex3f(f2, 0.0F, f3);
+            GL11.glTexCoord2f((float)i * f2, 0.0F);
+            GL11.glVertex3f(f2, 0.0F, 0.0F);
+            GL11.glEnd();
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glNormal3f(0.0F, -1.0F, 0.0F);
+            GL11.glTexCoord2f(0.0F, 0.0F);
+            GL11.glVertex3f(0.0F, f, 0.0F);
+            GL11.glTexCoord2f((float)i * f2, 0.0F);
+            GL11.glVertex3f(f2, f, 0.0F);
+            GL11.glTexCoord2f((float)i * f2, (float)i * f3);
+            GL11.glVertex3f(f2, f, f3);
+            GL11.glTexCoord2f(0.0F, (float)i * f3);
+            GL11.glVertex3f(0.0F, f, f3);
+            GL11.glEnd();
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glNormal3f(1.0F, 0.0F, 0.0F);
+            GL11.glTexCoord2f(0.0F, 0.0F);
+            GL11.glVertex3f(0.0F, 0.0F, 0.0F);
+            GL11.glTexCoord2f(0.0F, (float)i * f);
+            GL11.glVertex3f(0.0F, f, 0.0F);
+            GL11.glTexCoord2f((float)i * f3, (float)i * f);
+            GL11.glVertex3f(0.0F, f, f3);
+            GL11.glTexCoord2f((float)i * f3, 0.0F);
+            GL11.glVertex3f(0.0F, 0.0F, f3);
+            GL11.glEnd();
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glNormal3f(-1.0F, 0.0F, 0.0F);
+            GL11.glTexCoord2f(0.0F, 0.0F);
+            GL11.glVertex3f(f2, 0.0F, 0.0F);
+            GL11.glTexCoord2f((float)i * f3, 0.0F);
+            GL11.glVertex3f(f2, 0.0F, f3);
+            GL11.glTexCoord2f((float)i * f3, (float)i * f);
+            GL11.glVertex3f(f2, f, f3);
+            GL11.glTexCoord2f(0.0F, (float)i * f);
+            GL11.glVertex3f(f2, f, 0.0F);
+            GL11.glEnd();
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glNormal3f(0.0F, 0.0F, 1.0F);
+            GL11.glTexCoord2f(0.0F, 0.0F);
+            GL11.glVertex3f(0.0F, 0.0F, 0.0F);
+            GL11.glTexCoord2f((float)i * f2, 0.0F);
+            GL11.glVertex3f(f2, 0.0F, 0.0F);
+            GL11.glTexCoord2f((float)i * f2, (float)i * f);
+            GL11.glVertex3f(f2, f, 0.0F);
+            GL11.glTexCoord2f(0.0F, (float)i * f);
+            GL11.glVertex3f(0.0F, f, 0.0F);
+            GL11.glEnd();
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glNormal3f(0.0F, 0.0F, -1.0F);
+            GL11.glTexCoord2f(0.0F, 0.0F);
+            GL11.glVertex3f(0.0F, 0.0F, f3);
+            GL11.glTexCoord2f(0.0F, (float)i * f);
+            GL11.glVertex3f(0.0F, f, f3);
+            GL11.glTexCoord2f((float)i * f2, (float)i * f);
+            GL11.glVertex3f(f2, f, f3);
+            GL11.glTexCoord2f((float)i * f2, 0.0F);
+            GL11.glVertex3f(f2, 0.0F, f3);
+            GL11.glEnd();
+            GL43.glPopMatrix();
+        }
+
+        //Lighting.turnOff();
+    }
+
+    private void renderTechjarsAwesomeMainMenuRoom()
+    {
+        GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GlStateManager._enableDepthTest();
+        GlStateManager._enableTexture();
+        GlStateManager._enableBlend();
+        GlStateManager.enableAlphaTest();
+        GlStateManager._enableCull();
+        GlStateManager.alphaFunc(516, 0.1F);
+        GL43.glPushMatrix();
+        int i = Calendar.getInstance().get(15);
+        this.minecraft.menuWorldRenderer.time = this.menuWorldFastTime ? (long)((float)(this.minecraft.tickCounter * 10) + 10.0F * this.minecraft.getFrameTime()) : (long)((double)(System.currentTimeMillis() + (long)i - 21600000L) / 8.64E7D * 24000.0D);
+        Vec3 vec3 = this.minecraft.menuWorldRenderer.getEyePos();
+        float f = (float)vec3.x;
+        float f1 = (float)vec3.y;
+        float f2 = (float)vec3.z;
+        this.minecraft.menuWorldRenderer.fogRenderer.updateFogColor();
+        this.minecraft.menuWorldRenderer.fogRenderer.setupFog(-1);
+        GlStateManager.clear(16640);
+        this.minecraft.menuWorldRenderer.renderSky(f, f1, f2, 2);
+        this.minecraft.menuWorldRenderer.fogRenderer.setupFog(0);
+
+        if ((double)f1 < 128.0D + this.minecraft.options.ofCloudsHeight * 128.0D)
+        {
+            this.minecraft.menuWorldRenderer.renderClouds(2, (double)f, (double)f1, (double)f2);
+        }
+
+        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+        GlStateManager._enableBlend();
+        this.minecraft.menuWorldRenderer.updateLightmap();
+        this.minecraft.menuWorldRenderer.fogRenderer.setupFog(0);
+        this.minecraft.menuWorldRenderer.render();
+
+        if ((double)f1 >= 128.0D + this.minecraft.options.ofCloudsHeight * 128.0D)
+        {
+            this.minecraft.menuWorldRenderer.renderClouds(2, (double)f, (double)f1, (double)f2);
+            RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+            GlStateManager._enableBlend();
+        }
+
+        float[] afloat = this.minecraft.vr.getPlayAreaSize();
+
+        if (afloat != null)
+        {
+            float f3 = (float)Math.ceil((double)afloat[0]);
+            float f4 = (float)Math.ceil((double)afloat[1]);
+            Minecraft.getInstance().getTextureManager().bindForSetup(Screen.BACKGROUND_LOCATION);
+            float f5 = this.minecraft.menuWorldRenderer.getSunBrightness();
+            GlStateManager.color4f(f5, f5, f5, 0.3F);
+            GL11.glTranslatef(-f3 / 2.0F, 0.0F, -f4 / 2.0F);
+            GL11.glBegin(GL11.GL_QUADS);
+            GL11.glNormal3f(0.0F, 1.0F, 0.0F);
+            GL11.glTexCoord2f(0.0F, 0.0F);
+            GL11.glVertex3f(0.0F, 0.005F, 0.0F);
+            GL11.glTexCoord2f(0.0F, f4);
+            GL11.glVertex3f(0.0F, 0.005F, f4);
+            GL11.glTexCoord2f(f3, f4);
+            GL11.glVertex3f(f3, 0.005F, f4);
+            GL11.glTexCoord2f(f3, 0.0F);
+            GL11.glVertex3f(f3, 0.005F, 0.0F);
+            GL11.glEnd();
+        }
+
+        GL43.glPopMatrix();
+        //GlStateManager._disableFog();
+        RenderSystem.defaultBlendFunc();
+    }
+
+    public boolean shouldRenderCrosshair()
+    {
+        if (Main.viewonly)
+        {
+            return false;
+        }
+        else if (this.minecraft.level == null)
+        {
+            return false;
+        }
+        else if (this.minecraft.screen != null)
+        {
+            return false;
+        }
+        else
+        {
+            boolean flag = this.minecraft.vrSettings.renderInGameCrosshairMode == 0 || this.minecraft.vrSettings.renderInGameCrosshairMode == 1 && !this.minecraft.options.hideGui;
+
+            if (!flag)
+            {
+                return false;
+            }
+            else if (this.minecraft.currentPass == RenderPass.THIRD)
+            {
+                return false;
+            }
+            else if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
+            {
+                if (this.minecraft.currentPass == RenderPass.CAMERA)
+                {
+                    return false;
+                }
+                else if (KeyboardHandler.Showing)
+                {
+                    return false;
+                }
+                else if (RadialHandler.isUsingController(ControllerType.RIGHT))
+                {
+                    return false;
+                }
+                else if (this.minecraft.bowTracker.isNotched())
+                {
+                    return false;
+                }
+                else if (!this.minecraft.vr.getInputAction(this.minecraft.vr.keyVRInteract).isEnabledRaw(ControllerType.RIGHT) && !this.minecraft.vr.keyVRInteract.isKeyDown(ControllerType.RIGHT))
+                {
+                    if (!this.minecraft.vr.getInputAction(this.minecraft.vr.keyClimbeyGrab).isEnabledRaw(ControllerType.RIGHT) && !this.minecraft.vr.keyClimbeyGrab.isKeyDown(ControllerType.RIGHT))
+                    {
+                        if (this.minecraft.teleportTracker.isAiming())
+                        {
+                            return false;
+                        }
+                        else if (this.minecraft.climbTracker.isGrabbingLadder(0))
+                        {
+                            return false;
+                        }
+                        else
+                        {
+                            return !(this.minecraft.vrPlayer.worldScale > 15.0F);
+                        }
+                    }
+                    else
+                    {
+                        return false;
+                    }
+                }
+                else
+                {
+                    return false;
+                }
+            }
+            else
+            {
+                return false;
+            }
+        }
+    }
+
+    private void renderCrosshairAtDepth(boolean depthAlways)
+    {
+        if (this.shouldRenderCrosshair())
+        {
+            this.minecraft.getProfiler().popPush("crosshair");
+            GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+            Vec3 vec3 = this.crossVec;
+            Vec3 vec31 = vec3.subtract(this.minecraft.vrPlayer.vrdata_world_render.getController(0).getPosition());
+            float f = (float)vec31.length();
+            float f1 = (float)((double)(0.125F * this.minecraft.vrSettings.crosshairScale) * Math.sqrt((double)this.minecraft.vrPlayer.vrdata_world_render.worldScale));
+            vec3 = vec3.add(vec31.normalize().scale(-0.01D));
+            GL43.glPushMatrix();
+            GL43.glLoadIdentity();
+            this.applyVRModelViewLegacy(this.minecraft.currentPass);
+            Vec3 vec32 = vec3.subtract(this.minecraft.getCameraEntity().position());
+            GL11.glTranslated(vec32.x, vec32.y, vec32.z);
+
+            if (this.minecraft.hitResult != null && this.minecraft.hitResult.getType() == HitResult.Type.BLOCK)
+            {
+                BlockHitResult blockhitresult = (BlockHitResult)this.minecraft.hitResult;
+
+                if (blockhitresult.getDirection() == Direction.DOWN)
+                {
+                    GL11.glRotatef(-this.minecraft.vrPlayer.vrdata_world_render.getController(0).getYaw(), 0.0F, 1.0F, 0.0F);
+                    GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
+                }
+                else if (blockhitresult.getDirection() == Direction.EAST)
+                {
+                    GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
+                }
+                else if (blockhitresult.getDirection() != Direction.NORTH && blockhitresult.getDirection() != Direction.SOUTH)
+                {
+                    if (blockhitresult.getDirection() == Direction.UP)
+                    {
+                        GL11.glRotatef(-this.minecraft.vrPlayer.vrdata_world_render.getController(0).getYaw(), 0.0F, 1.0F, 0.0F);
+                        GL11.glRotatef(-90.0F, 1.0F, 0.0F, 0.0F);
+                    }
+                    else if (blockhitresult.getDirection() == Direction.WEST)
+                    {
+                        GL11.glRotatef(90.0F, 0.0F, 1.0F, 0.0F);
+                    }
+                }
+            }
+            else
+            {
+                GL11.glRotatef(-this.minecraft.vrPlayer.vrdata_world_render.getController(0).getYaw(), 0.0F, 1.0F, 0.0F);
+                GL11.glRotatef(-this.minecraft.vrPlayer.vrdata_world_render.getController(0).getPitch(), 1.0F, 0.0F, 0.0F);
+            }
+
+            if (this.minecraft.vrSettings.crosshairScalesWithDistance)
+            {
+                float f5 = 0.3F + 0.2F * f;
+                f1 *= f5;
+            }
+
+            this.lightTexture.turnOnLightLayer();
+            GL43.glScalef(f1, f1, f1);
+            RenderSystem.depthMask(true);
+            RenderSystem.enableDepthTest();
+            //RenderSystem.disableLighting();
+            RenderSystem.disableCull();
+            GlStateManager.enableAlphaTest();
+
+            if (depthAlways)
+            {
+                RenderSystem.depthFunc(519);
+            }
+            else
+            {
+                RenderSystem.depthFunc(515);
+            }
+
+            boolean flag = Config.isShaders();
+            RenderSystem.enableBlend();
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.ONE_MINUS_DST_COLOR, GlStateManager.DestFactor.ZERO, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+            int i = LevelRenderer.getLightColor(this.minecraft.level, new BlockPos(vec3));
+            float f2 = 1.0F;
+
+            if (this.minecraft.hitResult == null || this.minecraft.hitResult.getType() == HitResult.Type.MISS)
+            {
+                f2 = 0.5F;
+            }
+
+            this.minecraft.getTextureManager().bindForSetup(Screen.GUI_ICONS_LOCATION);
+            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, 33071.0F);
+            GL11.glTexParameterf(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, 33071.0F);
+            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
+            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
+            float f3 = 0.00390625F;
+            float f4 = 0.00390625F;
+            BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+            bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_TEX_LMAP_COLOR_NORMAL);
+            bufferbuilder.vertex(-1.0D, 1.0D, 0.0D).uv(0.0F, 15.0F * f4).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+            bufferbuilder.vertex(1.0D, 1.0D, 0.0D).uv(15.0F * f3, 15.0F * f4).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+            bufferbuilder.vertex(1.0D, -1.0D, 0.0D).uv(15.0F * f3, 0.0F).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+            bufferbuilder.vertex(-1.0D, -1.0D, 0.0D).uv(0.0F, 0.0F).uv2(i).color(f2, f2, f2, 1.0F).normal(0.0F, 0.0F, 1.0F).endVertex();
+            Tesselator.getInstance().end();
+            RenderSystem.defaultBlendFunc();
+            RenderSystem.disableBlend();
+            RenderSystem.enableCull();
+            RenderSystem.depthFunc(515);
+            GL43.glPopMatrix();
+        }
+    }
+
+    public void renderFadeBlend(float r, float g, float b, float fadeAlpha)
+    {
+        this.renderFadeBlend(r, g, b, fadeAlpha, 0, this.minecraft.getWindow().getWidth(), this.minecraft.getWindow().getHeight(), 0);
+    }
+
+    public Vec3 getControllerRenderPos(int c)
+    {
+        if (!this.minecraft.vrSettings.seated)
+        {
+            return this.minecraft.vrPlayer.vrdata_world_render.getController(c).getPosition();
+        }
+        else
+        {
+            Vec3 vec3;
+
+            if (this.minecraft.getCameraEntity() != null && this.minecraft.level != null)
+            {
+                Vec3 vec32 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getDirection();
+                vec32 = vec32.yRot((float)Math.toRadians(c == 0 ? -35.0D : 35.0D));
+                vec32 = new Vec3(vec32.x, 0.0D, vec32.z);
+                vec32 = vec32.normalize();
+                RenderPass renderpass = RenderPass.CENTER;
+                vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(renderpass).getPosition().add(vec32.x * 0.3D * (double)this.minecraft.vrPlayer.vrdata_world_render.worldScale, -0.4D * (double)this.minecraft.vrPlayer.vrdata_world_render.worldScale, vec32.z * 0.3D * (double)this.minecraft.vrPlayer.vrdata_world_render.worldScale);
+            }
+            else
+            {
+                Vec3 vec31 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getDirection();
+                vec31 = vec31.yRot((float)Math.toRadians(c == 0 ? -35.0D : 35.0D));
+                vec31 = new Vec3(vec31.x, 0.0D, vec31.z);
+                vec31 = vec31.normalize();
+                vec3 = this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition().add(vec31.x * 0.3D, -0.4D, vec31.z * 0.3D);
+            }
+
+            return vec3;
+        }
+    }
+
+    private Vec3 apply2DModelView(RenderPass currentPass, Vec3 guipos, org.vivecraft.utils.math.Matrix4f guirot)
+    {
+        this.minecraft.getProfiler().push("applyKeyboardModelView");
+        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition();
+        Vec3 vec31 = new Vec3(0.0D, 0.0D, 0.0D);
+        float f = GuiHandler.guiScale;
+        VRPlayer vrplayer = this.minecraft.vrPlayer;
+        guipos = VRPlayer.room_to_world_pos(guipos, this.minecraft.vrPlayer.vrdata_world_render);
+        org.vivecraft.utils.math.Matrix4f matrix4f = org.vivecraft.utils.math.Matrix4f.rotationY(this.minecraft.vrPlayer.vrdata_world_render.rotation_radians);
+        guirot = org.vivecraft.utils.math.Matrix4f.multiply(matrix4f, guirot);
+        GL11.glMultMatrixf(this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getMatrix().toFloatBuffer());
+        GL11.glTranslatef((float)(guipos.x - vec3.x), (float)(guipos.y - vec3.y), (float)(guipos.z - vec3.z));
+        GL11.glMultMatrixf(guirot.transposed().toFloatBuffer());
+        GL11.glTranslatef((float)vec31.x, (float)vec31.y, (float)vec31.z);
+        float f1 = f * this.minecraft.vrPlayer.vrdata_world_render.worldScale;
+        GL43.glScalef(f1, f1, f1);
+        this.minecraft.getProfiler().pop();
+        return guipos;
+    }
+
+    private Vec3 applyPhysicalKeyboardModelView(RenderPass currentPass, Vec3 guipos, org.vivecraft.utils.math.Matrix4f guirot)
+    {
+        this.minecraft.getProfiler().push("applyPhysicalKeyboardModelView");
+        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition();
+        VRPlayer vrplayer = this.minecraft.vrPlayer;
+        guipos = VRPlayer.room_to_world_pos(guipos, this.minecraft.vrPlayer.vrdata_world_render);
+        org.vivecraft.utils.math.Matrix4f matrix4f = org.vivecraft.utils.math.Matrix4f.rotationY(this.minecraft.vrPlayer.vrdata_world_render.rotation_radians);
+        guirot = org.vivecraft.utils.math.Matrix4f.multiply(matrix4f, guirot);
+        GL11.glMultMatrixf(this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getMatrix().toFloatBuffer());
+        GL43.glTranslatef((float)(guipos.x - vec3.x), (float)(guipos.y - vec3.y), (float)(guipos.z - vec3.z));
+        //GlStateManager._multMatrix(guirot.transposed().toFloatBuffer());
+        float f = this.minecraft.vrPlayer.vrdata_world_render.worldScale;
+        GL43.glScalef(f, f, f);
+        this.minecraft.getProfiler().pop();
+        return guipos;
+    }
+
+    private void applyVRModelView(RenderPass currentPass, PoseStack matrix)
+    {
+        matrix.last().pose().multiply(this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getMatrix().transposed().toMCMatrix());
+    }
+
+    public void applystereo(RenderPass currentPass, PoseStack matrix)
+    {
+        if (currentPass == RenderPass.LEFT || currentPass == RenderPass.RIGHT)
+        {
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition().subtract(this.minecraft.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition());
+            matrix.translate((double)((float)(-vec3.x)), (double)((float)(-vec3.y)), (double)((float)(-vec3.z)));
+        }
+    }
+
+    public void removeStereo(RenderPass currentPass, PoseStack matrix)
+    {
+        if (currentPass == RenderPass.LEFT || currentPass == RenderPass.RIGHT)
+        {
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition().subtract(this.minecraft.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition());
+            matrix.translate((double)((float)vec3.x), (double)((float)vec3.y), (double)((float)vec3.z));
+        }
+    }
+
+    public void applyVRModelViewLegacy(RenderPass currentPass)
+    {
+        FloatBuffer floatbuffer = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getMatrix().toFloatBuffer();
+        GL11.glMultMatrixf(floatbuffer);
+    }
+
+    private void applystereoLegacy(RenderPass currentPass)
+    {
+        if (currentPass == RenderPass.LEFT || currentPass == RenderPass.RIGHT)
+        {
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition().subtract(this.minecraft.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition());
+            GL11.glTranslatef((float)vec3.x, (float)vec3.y, (float)vec3.z);
+        }
+    }
+
+    private void removeStereoLegacy(RenderPass currentPass)
+    {
+        if (currentPass == RenderPass.LEFT || currentPass == RenderPass.RIGHT)
+        {
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(currentPass).getPosition().subtract(this.minecraft.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition());
+            GL11.glTranslatef((float)(-vec3.x), (float)(-vec3.y), (float)(-vec3.z));
+        }
+    }
+
+    private void setupPolyRendering(boolean enable)
+    {
+        boolean flag = Config.isShaders();
+
+        if (enable)
+        {
+            this.polyblendsrca = GlStateManager.BLEND.srcAlpha;
+            this.polyblenddsta = GlStateManager.BLEND.dstAlpha;
+            this.polyblendsrcrgb = GlStateManager.BLEND.srcRgb;
+            this.polyblenddstrgb = GlStateManager.BLEND.dstRgb;
+            this.polyblend = GL11.glIsEnabled(GL11.GL_BLEND);
+            this.polytex = GL11.glIsEnabled(GL11.GL_TEXTURE_2D);
+            this.polylight = GL11.glIsEnabled(GL11.GL_LIGHTING);
+            this.polycull = GL11.glIsEnabled(GL11.GL_CULL_FACE);
+            GlStateManager._enableBlend();
+            RenderSystem.defaultBlendFunc();
+            GlStateManager._disableTexture();
+            //GlStateManager._disableLighting();
+            GlStateManager._disableCull();
+
+            if (flag)
+            {
+                this.prog = Shaders.activeProgram;
+                Shaders.useProgram(Shaders.ProgramTexturedLit);
+            }
+        }
+        else
+        {
+            RenderSystem.blendFuncSeparate(this.polyblendsrcrgb, this.polyblenddstrgb, this.polyblendsrca, this.polyblenddsta);
+
+            if (!this.polyblend)
+            {
+                GlStateManager._disableBlend();
+            }
+
+            if (this.polytex)
+            {
+                GlStateManager._enableTexture();
+            }
+
+            if (this.polylight)
+            {
+                //GlStateManager._enableLighting();
+            }
+
+            if (this.polycull)
+            {
+                GlStateManager._enableCull();
+            }
+
+            if (flag && this.polytex)
+            {
+                Shaders.useProgram(this.prog);
+            }
+        }
+    }
+
+    public void setupRVE()
+    {
+        if (this.cached)
+        {
+            VRData.VRDevicePose vrdata$vrdevicepose = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass);
+            Vec3 vec3 = vrdata$vrdevicepose.getPosition();
+            LivingEntity livingentity = (LivingEntity)this.minecraft.getCameraEntity();
+            livingentity.setPosRaw(vec3.x, vec3.y, vec3.z);
+            livingentity.xOld = vec3.x;
+            livingentity.yOld = vec3.y;
+            livingentity.zOld = vec3.z;
+            livingentity.xo = vec3.x;
+            livingentity.yo = vec3.y;
+            livingentity.zo = vec3.z;
+            livingentity.setXRot(-vrdata$vrdevicepose.getPitch());
+            livingentity.xRotO = livingentity.getXRot();
+            livingentity.setYRot(vrdata$vrdevicepose.getYaw());
+            livingentity.yHeadRot = livingentity.getYRot();
+            livingentity.yHeadRotO = livingentity.getYRot();
+
+            MCReflection.Entity_eyeHeight.set(livingentity, 0);
+        }
+    }
+
+    public void cacheRVEPos(LivingEntity e)
+    {
+        if (this.minecraft.getCameraEntity() != null)
+        {
+            if (!this.cached)
+            {
+                this.rveX = e.getX();
+                this.rveY = e.getY();
+                this.rveZ = e.getZ();
+                this.rvelastX = e.xOld;
+                this.rvelastY = e.yOld;
+                this.rvelastZ = e.zOld;
+                this.rveprevX = e.xo;
+                this.rveprevY = e.yo;
+                this.rveprevZ = e.zo;
+                this.rveyaw = e.yHeadRot;
+                this.rvepitch = e.getXRot();
+                this.rvelastyaw = e.yHeadRotO;
+                this.rvelastpitch = e.xRotO;
+                this.rveHeight = e.getEyeHeight();
+                this.cached = true;
+            }
+        }
+    }
+
+    public void restoreRVEPos(LivingEntity e)
+    {
+        if (e != null)
+        {
+            e.setPosRaw(this.rveX, this.rveY, this.rveZ);
+            e.xOld = this.rvelastX;
+            e.yOld = this.rvelastY;
+            e.zOld = this.rvelastZ;
+            e.xo = this.rveprevX;
+            e.yo = this.rveprevY;
+            e.zo = this.rveprevZ;
+            e.setYRot(this.rveyaw);
+            e.setXRot(this.rvepitch);
+            e.yRotO = this.rvelastyaw;
+            e.xRotO = this.rvelastpitch;
+            e.yHeadRot = this.rveyaw;
+            e.yHeadRotO = this.rvelastyaw;
+            MCReflection.Entity_eyeHeight.set(e, this.rveHeight);
+            this.cached = false;
+        }
+    }
+
+    private void setupOverlayStatus(float partialTicks)
+    {
+        this.inBlock = 0.0F;
+        this.inwater = false;
+        this.onfire = false;
+
+        if (!this.minecraft.player.isSpectator() && !this.isInMenuRoom() && this.minecraft.player.isAlive())
+        {
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+            Triple<Float, BlockState, BlockPos> triple = this.itemInHandRenderer.getNearOpaqueBlock(vec3, (double)this.minClipDistance);
+
+            if (triple != null && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderBlockOverlay, this.minecraft.player, new PoseStack(), Reflector.getFieldValue(Reflector.RenderBlockOverlayEvent_OverlayType_BLOCK), triple.getMiddle(), triple.getRight()))
+            {
+                this.inBlock = triple.getLeft();
+            }
+            else
+            {
+                this.inBlock = 0.0F;
+            }
+
+            this.inwater = this.minecraft.player.isEyeInFluid(FluidTags.WATER) && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderWaterOverlay, this.minecraft.player, new PoseStack());
+            this.onfire = this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA && this.minecraft.player.isOnFire() && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderFireOverlay, this.minecraft.player, new PoseStack());
+        }
+    }
+
+    private void renderVRSelfEffects(float par1)
+    {
+        if (this.onfire && this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+        {
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+            GL11.glLoadIdentity();
+
+            if (this.onfire)
+            {
+                this.renderFireInFirstPerson();
+            }
+
+            this.renderItemActivationAnimation(0, 0, par1);
+        }
+    }
+
+    private void renderVrShadow(float par1, boolean depthAlways)
+    {
+        if (this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+        {
+            if (this.minecraft.player.isAlive())
+            {
+                if (!(this.minecraft.player.getRoomYOffsetFromPose() < 0.0D))
+                {
+                    if (this.minecraft.player.getVehicle() == null)
+                    {
+                        AABB aabb = this.minecraft.player.getBoundingBox();
+
+                        if (this.minecraft.vrSettings.vrShowBlueCircleBuddy && aabb != null)
+                        {
+                            GL43.glMatrixMode(5888);
+                            GL43.glPushMatrix();
+                            GL43.glLoadIdentity();
+                            GlStateManager._disableCull();
+                            this.applyVRModelViewLegacy(this.minecraft.currentPass);
+                            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+                            LocalPlayer localplayer = this.minecraft.player;
+                            Vec3 vec31 = new Vec3(this.rvelastX + (this.rveX - this.rvelastX) * (double)par1, this.rvelastY + (this.rveY - this.rvelastY) * (double)par1, this.rvelastZ + (this.rveZ - this.rvelastZ) * (double)par1);
+                            Vec3 vec32 = vec31.subtract(vec3).add(0.0D, 0.005D, 0.0D);
+                            this.setupPolyRendering(true);
+                            RenderSystem.enableDepthTest();
+
+                            if (depthAlways)
+                            {
+                                RenderSystem.depthFunc(519);
+                            }
+                            else
+                            {
+                                GlStateManager._depthFunc(515);
+                            }
+
+                            this.minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+                            this.renderFlatQuad(vec32, (float)(aabb.maxX - aabb.minX), (float)(aabb.maxZ - aabb.minZ), 0.0F, 0, 0, 0, 64);
+                            RenderSystem.depthFunc(515);
+                            this.setupPolyRendering(false);
+                            GL43.glMatrixMode(5888);
+                            GL43.glPopMatrix();
+                            GlStateManager._enableCull();
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    void DrawScopeFB(PoseStack matrixStackIn, int i)
+    {
+        if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
+        {
+            this.lightTexture.turnOffLightLayer();
+            GL43.glPushMatrix();
+            //RenderSystem.multMatrix(matrixStackIn.last().pose());
+            RenderSystem.enableDepthTest();
+            GlStateManager.enableAlphaTest();
+            RenderSystem.disableTexture();
+            RenderSystem.enableBlend();
+            GlStateManager.alphaFunc(516, 0.0F);
+
+            if (i == 0)
+            {
+                this.minecraft.vrRenderer.telescopeFramebufferR.bindRead();
+            }
+            else
+            {
+                this.minecraft.vrRenderer.telescopeFramebufferL.bindRead();
+            }
+
+            this.drawSizedQuad(720.0F, 720.0F, 0.075F * this.minecraft.vrPlayer.vrdata_world_render.worldScale, new GlStateManager.Color(0.0F, 0.0F, 0.0F, 1.0F));
+            RenderSystem.enableTexture();
+            RenderSystem.disableBlend();
+            this.drawSizedQuadWithLightmap(720.0F, 720.0F, 0.075F * this.minecraft.vrPlayer.vrdata_world_render.worldScale, LightTexture.pack(15, 15));
+            RenderSystem.enableBlend();
+            RenderSystem.disableTexture();
+            float f = TelescopeTracker.viewPercent(i);
+            this.drawSizedQuad(720.0F, 720.0F, 0.075F * this.minecraft.vrPlayer.vrdata_world_render.worldScale, new GlStateManager.Color(0.0F, 0.0F, 0.0F, 1.0F - f));
+            RenderSystem.colorMask(true, true, true, true);
+            //RenderSystem.defaultAlphaFunc();
+            this.lightTexture.turnOnLightLayer();
+            GL43.glPopMatrix();
+        }
+    }
+
+    void drawEyeStencil(boolean shaders)
+    {
+        if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
+        {
+            if ((this.minecraft.currentPass == RenderPass.LEFT || this.minecraft.currentPass == RenderPass.RIGHT) && this.minecraft.vrSettings.vrUseStencil && this.minecraft.vr.isHMDTracking())
+            {
+                net.optifine.shaders.Program program = Shaders.activeProgram;
+
+                if (shaders && Shaders.dfb != null)
+                {
+                    Shaders.dfb.bindFramebuffer();
+                    Shaders.useProgram(Shaders.ProgramNone);
+
+                    for (int i = 0; i < Shaders.usedDepthBuffers; ++i)
+                    {
+                        GlStateManager._bindTexture(Shaders.dfb.depthTextures.get(i));
+                        this.minecraft.vrRenderer.doStencilForEye(this.minecraft.currentPass == RenderPass.LEFT ? 0 : 1);
+                    }
+
+                    Shaders.useProgram(program);
+                }
+                else
+                {
+                    this.minecraft.vrRenderer.doStencilForEye(this.minecraft.currentPass == RenderPass.LEFT ? 0 : 1);
+                }
+            }
+            else
+            {
+                GL11.glDisable(GL11.GL_STENCIL_TEST);
+            }
+        }
+        else
+        {
+            if (!Config.isShaders())
+            {
+                this.minecraft.vrRenderer.doCircleStencil(this.minecraft.mainRenderTarget);
+            }
+        }
+    }
+
+    public boolean shouldOccludeGui()
+    {
+        Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+
+        if (this.minecraft.currentPass != RenderPass.THIRD && this.minecraft.currentPass != RenderPass.CAMERA)
+        {
+            return !this.isInMenuRoom() && this.minecraft.screen == null && !KeyboardHandler.Showing && !RadialHandler.isShowing() && this.minecraft.vrSettings.hudOcclusion && !this.itemInHandRenderer.isInsideOpaqueBlock(vec3);
+        }
+        else
+        {
+            return true;
+        }
+    }
+
+    public boolean shouldRenderHands()
+    {
+        if (Main.viewonly)
+        {
+            return false;
+        }
+        else if (this.minecraft.currentPass == RenderPass.THIRD)
+        {
+            return this.minecraft.vrSettings.displayMirrorMode == 15;
+        }
+        else
+        {
+            return this.minecraft.currentPass != RenderPass.CAMERA;
+        }
+    }
+
+    public boolean isInMenuRoom()
+    {
+        return this.minecraft.level == null || this.minecraft.screen instanceof WinScreen || this.minecraft.integratedServerLaunchInProgress || this.minecraft.getOverlay() != null;
+    }
+
+    public void displayNotificationText(String prefix, String message, String suffix, int displayWidth, int displayHeight, boolean isStereo, boolean isGuiOrtho)
+    {
+        float f = isGuiOrtho ? 0.0055F : 0.00375F;
+        int i = 55;
+        int j = 12;
+        float f1 = isGuiOrtho ? 0.85F : 0.8F;
+        new Vec3(0.0D, 0.0D, 0.0D);
+
+        if (isStereo)
+        {
+            this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, 0.0F, true)));
+        }
+        else
+        {
+            GL11.glMatrixMode(GL11.GL_PROJECTION);
+            GL43.glPushMatrix();
+            GL11.glLoadIdentity();
+            //GlStateManager._multMatrix(Matrix4f.perspective(90.0D, (float)displayWidth / (float)displayHeight, this.minClipDistance, this.clipDistance * 4.0F));
+            GL11.glMatrixMode(GL11.GL_MODELVIEW);
+        }
+
+        GL43.glPushMatrix();
+        GL11.glLoadIdentity();
+        int k = 8;
+        ArrayList<String> arraylist = new ArrayList<>();
+
+        if (message != null)
+        {
+            Utils.wordWrap(message, 55, arraylist);
+        }
+
+        float f2 = (float)arraylist.size();
+        float f3 = f2 / 2.0F;
+        float f4 = isGuiOrtho ? 0.0F : 0.0F;
+        float f5 = f3 * 12.0F * 0.003F;
+        float f6 = -0.6F;
+        boolean flag = GL11.glIsEnabled(GL11.GL_DEPTH_TEST);
+        GlStateManager._disableDepthTest();
+        GL11.glTranslatef(f4, f5, f6);
+        GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
+        float f7 = (float)Math.sqrt((double)(f4 * f4 + f5 * f5 + f6 * f6));
+        GL11.glScalef(-f * f7, -f * f7, -f * f7);
+        PoseStack posestack = new PoseStack();
+
+        if (prefix != null)
+        {
+            this.minecraft.font.drawShadow(posestack, prefix, (float)(-this.minecraft.font.width(prefix) / 2), -8.0F, 16777215);
+        }
+
+        for (String s : arraylist)
+        {
+            this.minecraft.font.drawShadow(posestack, s, (float)(-this.minecraft.font.width(s) / 2), (float)k, 16777215);
+            k += 12;
+        }
+
+        k = k + 12;
+
+        if (suffix != null)
+        {
+            this.minecraft.font.drawShadow(posestack, suffix, (float)(-this.minecraft.font.width(suffix) / 2), (float)k, 16777215);
+        }
+
+        if (flag)
+        {
+            GlStateManager._enableDepthTest();
+        }
+
+        GL11.glMatrixMode(GL11.GL_PROJECTION);
+        GL43.glPopMatrix();
+        GL11.glMatrixMode(GL11.GL_MODELVIEW);
+        GL43.glPopMatrix();
+    }
+
+    private FloatBuffer setColorBuffer(float red, float green, float blue, float alpha)
+    {
+        ((Buffer)this.colorBuffer).clear();
+        this.colorBuffer.put(red).put(green).put(blue).put(alpha);
+        ((Buffer)this.colorBuffer).flip();
+        return this.colorBuffer;
+    }
+
+    private void renderSwingDebug(int c)
+    {
+    }
+
+    void renderVRHands(float partialTicks, boolean renderright, boolean renderleft, boolean menuhandright, boolean menuhandleft)
+    {
+        this.minecraft.getProfiler().push("hands");
+
+        if (renderright)
+        {
+            this.minecraft.getItemRenderer();
+            ItemRenderer.ismainhand = true;
+
+            if (menuhandright)
+            {
+                this.renderMainMenuHand(0, partialTicks, false);
+            }
+            else
+            {
+                this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, partialTicks, true)));
+                GL43.glLoadIdentity();
+                PoseStack posestack = new PoseStack();
+                posestack.last().pose().setIdentity();
+                this.applyVRModelView(this.minecraft.currentPass, posestack);
+                this.renderVRHand_Main(posestack, partialTicks);
+                this.renderSwingDebug(0);
+            }
+
+            this.minecraft.getItemRenderer();
+            ItemRenderer.ismainhand = false;
+        }
+
+        if (renderleft)
+        {
+            if (menuhandleft)
+            {
+                this.renderMainMenuHand(1, partialTicks, false);
+            }
+            else
+            {
+                this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(this.mainCamera, partialTicks, true)));
+                GL43.glLoadIdentity();
+                PoseStack posestack1 = new PoseStack();
+                posestack1.last().pose().setIdentity();
+                this.applyVRModelView(this.minecraft.currentPass, posestack1);
+                this.renderVRHand_Offhand(partialTicks, true, posestack1);
+                this.renderSwingDebug(1);
+            }
+        }
+
+        this.minecraft.getProfiler().pop();
+    }
+
+    private void renderVRHand_Main(PoseStack matrix, float partialTicks)
+    {
+        matrix.pushPose();
+        this.SetupRenderingAtController(0, matrix);
+        ItemStack itemstack = this.minecraft.player.getMainHandItem();
+        ItemStack itemstack1 = null; //this.minecraft.physicalGuiManager.getHeldItemOverride();
+
+        if (itemstack1 != null)
+        {
+            itemstack = itemstack1;
+        }
+
+        if (this.minecraft.climbTracker.isClimbeyClimb() && itemstack.getItem() != Items.SHEARS)
+        {
+            itemstack = itemstack1 == null ? this.minecraft.player.getOffhandItem() : itemstack1;
+        }
+
+        if (BowTracker.isHoldingBow(this.minecraft.player, InteractionHand.MAIN_HAND))
+        {
+            int i = 0;
+
+            if (this.minecraft.vrSettings.vrReverseShootingEye)
+            {
+                i = 1;
+            }
+
+            ItemStack itemstack2 = this.minecraft.player.getProjectile(this.minecraft.player.getMainHandItem());
+
+            if (itemstack2 != ItemStack.EMPTY && !this.minecraft.bowTracker.isNotched())
+            {
+                itemstack = itemstack2;
+            }
+            else
+            {
+                itemstack = ItemStack.EMPTY;
+            }
+        }
+        else if (BowTracker.isHoldingBow(this.minecraft.player, InteractionHand.OFF_HAND) && this.minecraft.bowTracker.isNotched())
+        {
+            int j = 0;
+
+            if (this.minecraft.vrSettings.vrReverseShootingEye)
+            {
+                j = 1;
+            }
+
+            itemstack = ItemStack.EMPTY;
+        }
+
+        boolean flag = false;
+
+        if (Config.isShaders())
+        {
+            Shaders.beginHand(matrix, flag);
+        }
+        else
+        {
+            matrix.pushPose();
+        }
+
+        this.lightTexture.turnOnLightLayer();
+        MultiBufferSource.BufferSource multibuffersource$buffersource = this.renderBuffers.bufferSource();
+        this.itemInHandRenderer.renderArmWithItem(this.minecraft.player, partialTicks, 0.0F, InteractionHand.MAIN_HAND, this.minecraft.player.getAttackAnim(partialTicks), itemstack, 0.0F, matrix, multibuffersource$buffersource, this.minecraft.getEntityRenderDispatcher().getPackedLightCoords(this.minecraft.player, partialTicks));
+        multibuffersource$buffersource.endBatch();
+        this.lightTexture.turnOffLightLayer();
+
+        if (Config.isShaders())
+        {
+            Shaders.endHand(matrix);
+        }
+        else
+        {
+            matrix.popPose();
+        }
+
+        matrix.popPose();
+    }
+
+    private void renderVRHand_Offhand(float partialTicks, boolean renderTeleport, PoseStack matrix)
+    {
+        boolean flag = Config.isShaders();
+        boolean flag1 = false;
+
+        if (flag)
+        {
+            flag1 = Shaders.isShadowPass;
+        }
+
+        matrix.pushPose();
+        this.SetupRenderingAtController(1, matrix);
+        ItemStack itemstack = this.minecraft.player.getOffhandItem();
+        ItemStack itemstack1 = null;//this.minecraft.physicalGuiManager.getOffhandOverride();
+
+        if (itemstack1 != null)
+        {
+            itemstack = itemstack1;
+        }
+
+        if (this.minecraft.climbTracker.isClimbeyClimb() && (itemstack == null || itemstack.getItem() != Items.SHEARS))
+        {
+            itemstack = this.minecraft.player.getMainHandItem();
+        }
+
+        if (BowTracker.isHoldingBow(this.minecraft.player, InteractionHand.MAIN_HAND))
+        {
+            int i = 1;
+
+            if (this.minecraft.vrSettings.vrReverseShootingEye)
+            {
+                i = 0;
+            }
+
+            itemstack = this.minecraft.player.getMainHandItem();
+        }
+
+        boolean flag2 = false;
+
+        if (Config.isShaders())
+        {
+            Shaders.beginHand(matrix, flag2);
+        }
+        else
+        {
+            matrix.pushPose();
+        }
+
+        this.lightTexture.turnOnLightLayer();
+        MultiBufferSource.BufferSource multibuffersource$buffersource = this.renderBuffers.bufferSource();
+        this.itemInHandRenderer.renderArmWithItem(this.minecraft.player, partialTicks, 0.0F, InteractionHand.OFF_HAND, this.minecraft.player.getAttackAnim(partialTicks), itemstack, 0.0F, matrix, multibuffersource$buffersource, this.minecraft.getEntityRenderDispatcher().getPackedLightCoords(this.minecraft.player, partialTicks));
+        multibuffersource$buffersource.endBatch();
+        this.lightTexture.turnOffLightLayer();
+
+        if (Config.isShaders())
+        {
+            Shaders.endHand(matrix);
+        }
+        else
+        {
+            matrix.popPose();
+        }
+
+        matrix.popPose();
+
+        if (renderTeleport)
+        {
+            GL43.glPushMatrix();
+            GL43.glLoadIdentity();
+            this.applyVRModelViewLegacy(this.minecraft.currentPass);
+            this.applystereoLegacy(this.minecraft.currentPass);
+            net.optifine.shaders.Program program = Shaders.activeProgram;
+
+            if (Config.isShaders())
+            {
+                Shaders.useProgram(Shaders.ProgramTexturedLit);
+            }
+
+            GlStateManager.enableAlphaTest();
+            RenderSystem.enableBlend();
+            RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+            RenderSystem.disableTexture();
+
+            if (NetworkHelper.isLimitedSurvivalTeleport() && !this.minecraft.vrPlayer.getFreeMove() && this.minecraft.gameMode.hasMissTime() && this.minecraft.teleportTracker.vrMovementStyle.arcAiming && !this.minecraft.bowTracker.isActive(this.minecraft.player))
+            {
+                GL43.glPushMatrix();
+                this.removeStereoLegacy(this.minecraft.currentPass);
+                this.SetupRenderingAtControllerLegacy(1);
+                Vec3 vec3 = new Vec3(0.0D, 0.005D, 0.03D);
+                float f1 = 0.03F;
+                float f;
+
+                if (this.minecraft.teleportTracker.isAiming())
+                {
+                    f = 2.0F * (float)((double)this.minecraft.teleportTracker.getTeleportEnergy() - 4.0D * this.minecraft.teleportTracker.movementTeleportDistance) / 100.0F * f1;
+                }
+                else
+                {
+                    f = 2.0F * this.minecraft.teleportTracker.getTeleportEnergy() / 100.0F * f1;
+                }
+
+                if (f < 0.0F)
+                {
+                    f = 0.0F;
+                }
+
+                this.minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+                this.renderFlatQuad(vec3.add(0.0D, 0.05001D, 0.0D), f, f, 0.0F, this.tpLimitedColor.getX(), this.tpLimitedColor.getY(), this.tpLimitedColor.getZ(), 128);
+                this.renderFlatQuad(vec3.add(0.0D, 0.05D, 0.0D), f1, f1, 0.0F, this.tpLimitedColor.getX(), this.tpLimitedColor.getY(), this.tpLimitedColor.getZ(), 50);
+                GL43.glPopMatrix();
+            }
+
+            if (this.minecraft.teleportTracker.isAiming())
+            {
+                GL43.glPushMatrix();
+                this.removeStereoLegacy(this.minecraft.currentPass);
+                RenderSystem.enableDepthTest();
+
+                if (this.minecraft.teleportTracker.vrMovementStyle.arcAiming)
+                {
+                    this.renderTeleportArc(this.minecraft.vrPlayer);
+                }
+
+                GL43.glPopMatrix();
+            }
+
+            RenderSystem.enableTexture();
+            RenderSystem.defaultBlendFunc();
+
+            if (Config.isShaders())
+            {
+                Shaders.useProgram(program);
+            }
+
+            GL43.glMatrixMode(5888);
+            GL43.glPopMatrix();
+        }
+    }
+
+    void renderMainMenuHand(int c, float partialTicks, boolean depthAlways)
+    {
+        this.resetProjectionMatrix(this.getProjectionMatrix(this.getFov(mainCamera, partialTicks, false)));
+        GL43.glMatrixMode(5888);
+        GL43.glPushMatrix();
+        GL43.glLoadIdentity();
+        RenderSystem.disableTexture();
+        GlStateManager.disableAlphaTest();
+        RenderSystem.enableDepthTest();
+        this.applyVRModelViewLegacy(this.minecraft.currentPass);
+
+        if (this.minecraft.getOverlay() == null)
+        {
+            this.minecraft.getTextureManager().bindForSetup(new ResourceLocation("vivecraft:textures/white.png"));
+        }
+
+        Tesselator tesselator = Tesselator.getInstance();
+
+        if (depthAlways && c == 0)
+        {
+            RenderSystem.depthFunc(519);
+        }
+        else
+        {
+            RenderSystem.depthFunc(515);
+        }
+
+        Vec3i vec3i = new Vec3i(200 - 127 * c, 200 - 127 * c, 200 - 127 * c);
+        byte b0 = -1;
+        GL43.glPushMatrix();
+        this.SetupRenderingAtControllerLegacy(c);
+        Vec3 vec3 = new Vec3(0.0D, 0.0D, 0.0D);
+        Vec3 vec31 = this.minecraft.vrPlayer.vrdata_world_render.getController(c).getDirection();
+        Vec3 vec32 = this.minecraft.vrPlayer.vrdata_world_render.getController(c).getCustomVector(new Vec3(0.0D, 1.0D, 0.0D));
+        vec32 = new Vec3(0.0D, 1.0D, 0.0D);
+        vec31 = new Vec3(0.0D, 0.0D, -1.0D);
+        Vec3 vec33 = new Vec3(vec3.x - vec31.x * 0.18D, vec3.y - vec31.y * 0.18D, vec3.z - vec31.z * 0.18D);
+
+        if (this.minecraft.level != null)
+        {
+            float f = (float)this.minecraft.level.getMaxLocalRawBrightness(new BlockPos(this.minecraft.vrPlayer.vrdata_world_render.hmd.getPosition()));
+            int i = Config.isShaders() ? 8 : 4;
+
+            if (f < (float)i)
+            {
+                f = (float)i;
+            }
+
+            float f1 = f / (float)this.minecraft.level.getMaxLightLevel();
+            vec3i = new Vec3i((double)((float)vec3i.getX() * f1), (double)((float)vec3i.getY() * f1), (double)((float)vec3i.getZ() * f1));
+        }
+
+        tesselator.getBuilder().begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_NORMAL);
+        this.renderBox(tesselator, vec3, vec33, -0.02F, 0.02F, -0.0125F, 0.0125F, vec32, vec3i, b0);
+        tesselator.getBuilder().end();
+        BufferUploader.end(tesselator.getBuilder());
+        GL43.glPopMatrix();
+        RenderSystem.enableTexture();
+        GL43.glPopMatrix();
+        RenderSystem.depthFunc(515);
+    }
+
+    public void setupClipPlanes()
+    {
+        this.renderDistance = (float)(this.minecraft.options.renderDistance * 16);
+
+        if (Config.isFogOn())
+        {
+            this.renderDistance *= 0.95F;
+        }
+        
+        this.clipDistance = this.renderDistance + 1024.0F;
+    }
+
+    private void renderFaceOverlay(float par1)
+    {
+        boolean flag = Config.isShaders();
+
+        if (flag)
+        {
+            Shaders.beginFPOverlay();
+        }
+
+        if (this.inBlock > 0.0F)
+        {
+            this.renderFaceInBlock();
+            this.renderGuiLayer(par1, true);
+
+            if (KeyboardHandler.Showing)
+            {
+                if (this.minecraft.vrSettings.physicalKeyboard)
+                {
+                    this.renderPhysicalKeyboard(par1);
+                }
+                else
+                {
+                    this.render2D(par1, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, true);
+                }
+            }
+
+            if (RadialHandler.isShowing())
+            {
+                this.render2D(par1, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, true);
+            }
+
+            if (this.inBlock >= 1.0F)
+            {
+                this.renderVRHands(par1, true, true, true, true);
+            }
+        }
+
+        if (flag)
+        {
+            Shaders.endFPOverlay();
+        }
+    }
+
+    private void renderFaceInBlock()
+    {
+        Tesselator tesselator = Tesselator.getInstance();
+        BufferBuilder bufferbuilder = tesselator.getBuilder();
+        GlStateManager.color4f(0.0F, 0.0F, 0.0F, this.minecraft.gameRenderer.inBlock);
+        GL43.glMatrixMode(5889);
+        GL43.glPushMatrix();
+        GL43.glLoadIdentity();
+        GL43.glOrtho(0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 100.0D);
+        GL43.glMatrixMode(5888);
+        GL43.glPushMatrix();
+        GL43.glLoadIdentity();
+        GlStateManager._disableDepthTest();
+        GlStateManager._disableTexture();
+        GlStateManager._enableBlend();
+        GlStateManager._disableCull();
+        bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION);
+        bufferbuilder.vertex(-1.0D, -1.0D, 0.0D).endVertex();
+        bufferbuilder.vertex(2.0D, -1.0D, 0.0D).endVertex();
+        bufferbuilder.vertex(2.0D, 2.0D, 0.0D).endVertex();
+        bufferbuilder.vertex(-1.0D, 2.0D, 0.0D).endVertex();
+        tesselator.end();
+        GL43.glMatrixMode(5889);
+        GL43.glPopMatrix();
+        GL43.glMatrixMode(5888);
+        GL43.glPopMatrix();
+        GlStateManager._enableTexture();
+        GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+    }
+
+    private void renderFireInFirstPerson()
+    {
+        PoseStack posestack = new PoseStack();
+        this.applyVRModelView(this.minecraft.currentPass, posestack);
+        this.applystereo(this.minecraft.currentPass, posestack);
+        BufferBuilder bufferbuilder = Tesselator.getInstance().getBuilder();
+        RenderSystem.depthFunc(519);
+
+        if (this.minecraft.currentPass == RenderPass.THIRD || this.minecraft.currentPass == RenderPass.CAMERA)
+        {
+            GlStateManager._depthFunc(515);
+        }
+
+        RenderSystem.enableBlend();
+        RenderSystem.defaultBlendFunc();
+        TextureAtlasSprite textureatlassprite = ModelBakery.FIRE_1.sprite();
+        RenderSystem.enableDepthTest();
+
+        if (SmartAnimations.isActive())
+        {
+            SmartAnimations.spriteRendered(textureatlassprite);
+        }
+
+        this.minecraft.getTextureManager().bindForSetup(textureatlassprite.atlas().location());
+        float f = textureatlassprite.getU0();
+        float f1 = textureatlassprite.getU1();
+        float f2 = (f + f1) / 2.0F;
+        float f3 = textureatlassprite.getV0();
+        float f4 = textureatlassprite.getV1();
+        float f5 = (f3 + f4) / 2.0F;
+        float f6 = textureatlassprite.uvShrinkRatio();
+        float f7 = Mth.lerp(f6, f, f2);
+        float f8 = Mth.lerp(f6, f1, f2);
+        float f9 = Mth.lerp(f6, f3, f5);
+        float f10 = Mth.lerp(f6, f4, f5);
+        float f11 = 1.0F;
+        float f12 = 0.3F;
+        float f13 = (float)(this.minecraft.vrPlayer.vrdata_world_render.getHeadPivot().y - this.minecraft.gameRenderer.rveY);
+
+        for (int i = 0; i < 4; ++i)
+        {
+            posestack.pushPose();
+            posestack.mulPose(Vector3f.YP.rotationDegrees((float)i * 90.0F - this.minecraft.vrPlayer.vrdata_world_render.getBodyYaw()));
+            posestack.translate(0.0D, (double)(-f13), 0.0D);
+            Matrix4f matrix4f = posestack.last().pose();
+            bufferbuilder.begin(Mode.QUADS, DefaultVertexFormat.POSITION_COLOR_TEX);
+            bufferbuilder.vertex(matrix4f, -f12, 0.0F, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f8, f10).endVertex();
+            bufferbuilder.vertex(matrix4f, f12, 0.0F, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f7, f10).endVertex();
+            bufferbuilder.vertex(matrix4f, f12, f13, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f7, f9).endVertex();
+            bufferbuilder.vertex(matrix4f, -f12, f13, -f12).color(1.0F, 1.0F, 1.0F, 0.9F).uv(f8, f9).endVertex();
+            bufferbuilder.end();
+            BufferUploader.end(bufferbuilder);
+            posestack.popPose();
+        }
+
+        RenderSystem.depthFunc(515);
+        RenderSystem.disableBlend();
+    }
+
+    public void renderVRFabulous(float partialTicks, LevelRenderer worldrendererin, boolean menuhandright, boolean menuhandleft)
+    {
+        this.minecraft.getProfiler().popPush("VR");
+        this.renderCrosshairAtDepth(!this.minecraft.vrSettings.useCrosshairOcclusion);
+        this.minecraft.getMainRenderTarget().unbindWrite();
+        worldrendererin.alphaSortVROccludedFramebuffer.clear(Minecraft.ON_OSX);
+        worldrendererin.alphaSortVROccludedFramebuffer.copyDepthFrom(this.minecraft.getMainRenderTarget());
+        worldrendererin.alphaSortVROccludedFramebuffer.bindWrite(true);
+
+        if (this.shouldOccludeGui())
+        {
+            this.renderGuiLayer(partialTicks, false);
+            this.renderVrShadow(partialTicks, false);
+
+            if (KeyboardHandler.Showing)
+            {
+                if (this.minecraft.vrSettings.physicalKeyboard)
+                {
+                    this.renderPhysicalKeyboard(partialTicks);
+                }
+                else
+                {
+                    this.render2D(partialTicks, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, false);
+                }
+            }
+
+            if (RadialHandler.isShowing())
+            {
+                this.render2D(partialTicks, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, false);
+            }
+        }
+
+        worldrendererin.alphaSortVRUnoccludedFramebuffer.clear(Minecraft.ON_OSX);
+        worldrendererin.alphaSortVRUnoccludedFramebuffer.bindWrite(true);
+
+        if (!this.shouldOccludeGui())
+        {
+            this.renderGuiLayer(partialTicks, false);
+            this.renderVrShadow(partialTicks, false);
+
+            if (KeyboardHandler.Showing)
+            {
+                if (this.minecraft.vrSettings.physicalKeyboard)
+                {
+                    this.renderPhysicalKeyboard(partialTicks);
+                }
+                else
+                {
+                    this.render2D(partialTicks, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, false);
+                }
+            }
+
+            if (RadialHandler.isShowing())
+            {
+                this.render2D(partialTicks, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, false);
+            }
+        }
+
+        this.renderVRSelfEffects(partialTicks);
+        VRWidgetHelper.renderVRThirdPersonCamWidget();
+        VRWidgetHelper.renderVRHandheldCameraWidget();
+        boolean flag = this.shouldRenderHands();
+        this.renderVRHands(partialTicks, flag && menuhandright, flag && menuhandleft, true, true);
+        worldrendererin.alphaSortVRHandsFramebuffer.clear(Minecraft.ON_OSX);
+        worldrendererin.alphaSortVRHandsFramebuffer.copyDepthFrom(this.minecraft.getMainRenderTarget());
+        worldrendererin.alphaSortVRHandsFramebuffer.bindWrite(true);
+        this.renderVRHands(partialTicks, flag && !menuhandright, flag && !menuhandleft, false, false);
+        RenderSystem.enableTexture();
+        RenderSystem.defaultBlendFunc();
+        //RenderSystem.defaultAlphaFunc();
+        GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
+        //Lighting.turnBackOn();
+        //Lighting.turnOff();
+        this.minecraft.getMainRenderTarget().bindWrite(true);
+    }
+
+    public void renderVrFast(float partialTicks, boolean secondpass, boolean menuright, boolean menuleft)
+    {
+        this.minecraft.getProfiler().popPush("VR");
+        this.lightTexture.turnOffLightLayer();
+
+        if (secondpass)
+        {
+            this.renderVrShadow(partialTicks, !this.shouldOccludeGui());
+        }
+
+        if (!secondpass)
+        {
+            this.renderCrosshairAtDepth(!this.minecraft.vrSettings.useCrosshairOcclusion);
+        }
+
+        if (!secondpass)
+        {
+            VRWidgetHelper.renderVRThirdPersonCamWidget();
+        }
+
+        if (!secondpass)
+        {
+            VRWidgetHelper.renderVRHandheldCameraWidget();
+        }
+
+        if (secondpass)
+        {
+            this.renderGuiLayer(partialTicks, !this.shouldOccludeGui());
+        }
+
+        if (secondpass && KeyboardHandler.Showing)
+        {
+            if (this.minecraft.vrSettings.physicalKeyboard)
+            {
+                this.renderPhysicalKeyboard(partialTicks);
+            }
+            else
+            {
+                this.render2D(partialTicks, KeyboardHandler.Framebuffer, KeyboardHandler.Pos_room, KeyboardHandler.Rotation_room, !this.shouldOccludeGui());
+            }
+        }
+
+        if (secondpass && RadialHandler.isShowing())
+        {
+            this.render2D(partialTicks, RadialHandler.Framebuffer, RadialHandler.Pos_room, RadialHandler.Rotation_room, !this.shouldOccludeGui());
+        }
+
+        this.renderVRHands(partialTicks, this.shouldRenderHands(), this.shouldRenderHands(), menuright, menuleft);
+        this.renderVRSelfEffects(partialTicks);
+    }
 }
