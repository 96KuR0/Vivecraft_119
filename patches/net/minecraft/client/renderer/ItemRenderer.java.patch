--- a/net/minecraft/client/renderer/ItemRenderer.java
+++ b/net/minecraft/client/renderer/ItemRenderer.java
@@ -11,6 +11,12 @@
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import org.lwjgl.opengl.GL14;
+import org.vivecraft.gameplay.trackers.SwingTracker;
+import org.vivecraft.gameplay.trackers.TelescopeTracker;
+import org.vivecraft.render.SpecialItemRenderer;
+
 import net.minecraft.block.BlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.player.ClientPlayerEntity;
@@ -48,6 +54,7 @@
 import net.optifine.CustomItems;
 import net.optifine.reflect.Reflector;
 import net.optifine.reflect.ReflectorForge;
+import net.optifine.render.GlAlphaState;
 import net.optifine.render.RenderTypes;
 
 public class ItemRenderer implements IResourceManagerReloadListener
@@ -62,6 +69,13 @@
     private boolean renderModelHasEmissive = false;
     private boolean renderModelEmissive = false;
     private static boolean renderItemGui = false;
+    
+    //Vivecraft
+    public static boolean ismainhand = false;
+    public static boolean isfphand = false;
+    float fade = 1, manualFade = 1;
+    private GlAlphaState alphaState = new GlAlphaState();
+    //
 
     public ItemRenderer(TextureManager p_i49_1_, ModelManager p_i49_2_, ItemColors p_i49_3_)
     {
@@ -146,6 +160,14 @@
 
             matrixStackIn.translate(-0.5D, -0.5D, -0.5D);
 
+            //VIVECRAFT support held item transparency overrides.
+            ClientPlayerEntity p = Minecraft.getInstance().player;
+            if(p!=null && isfphand){
+            	fade =	SwingTracker.getItemFade(p, itemStackIn);         
+            } else {
+            	fade = manualFade;
+            }
+            //
             if (!modelIn.isBuiltInRenderer() && (itemStackIn.getItem() != Items.TRIDENT || flag1))
             {
                 RenderType rendertype1 = RenderTypeLookup.getRenderType(itemStackIn);
@@ -159,7 +181,12 @@
                 {
                     rendertype = rendertype1;
                 }
-
+                
+                //Vivecraft ¯\_(ツ)_/¯ pick one? make a better one?
+                if(isfphand && fade < 1)
+                	rendertype = Atlases.getTranslucentBlockType();
+                //
+                
                 IVertexBuilder ivertexbuilder = getBuffer(bufferIn, rendertype, true, itemStackIn.hasEffect());
 
                 if (Config.isCustomItems())
@@ -216,7 +243,19 @@
             {
                 k = this.itemColors.getColor(itemStackIn, bakedquad.getTintIndex());
             }
-
+            //Vivecraft color overrides for custom items
+            if (Minecraft.getInstance().jumpTracker.isBoots(itemStackIn))
+            {
+            	k = makeColor(1, 0, 255, 0);
+            } else if (Minecraft.getInstance().climbTracker.isClaws(itemStackIn))
+            {
+            	k = makeColor(1, 130, 0, 75);
+            } else if (TelescopeTracker.isTelescope(itemStackIn))
+            {
+            	k = makeColor(1, 40, 20, 175);
+            }
+            //
+		    	
             float f = (float)(k >> 16 & 255) / 255.0F;
             float f1 = (float)(k >> 8 & 255) / 255.0F;
             float f2 = (float)(k & 255) / 255.0F;
@@ -227,7 +266,7 @@
             }
             else
             {
-                bufferIn.addQuad(matrixstack$entry, bakedquad, f, f1, f2, combinedLightIn, combinedOverlayIn);
+       		     SpecialItemRenderer.addQuad(bufferIn, matrixstack$entry, bakedquad, f, f1, f2, fade, combinedLightIn, combinedOverlayIn);
             }
         }
     }
@@ -292,10 +331,15 @@
         this.textureManager.bindTexture(AtlasTexture.LOCATION_BLOCKS_TEXTURE);
         this.textureManager.getTexture(AtlasTexture.LOCATION_BLOCKS_TEXTURE).setBlurMipmapDirect(false, false);
         RenderSystem.enableRescaleNormal();
+        // VIVECRAFT: Save/restore the alpha properly so things stop breaking
+        GlStateManager.getAlphaState(this.alphaState);
+        GlStateManager.enableAlphaTest();
         RenderSystem.enableAlphaTest();
         RenderSystem.defaultAlphaFunc();
         RenderSystem.enableBlend();
-        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+        //RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+        // VIVECRAFT: DestFactor of ONE is really what we want here, because math
+        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
 
         if (Config.isCustomItems())
@@ -315,7 +359,6 @@
         {
             RenderHelper.setupGuiFlatDiffuseLighting();
         }
-
         this.renderItem(stack, ItemCameraTransforms.TransformType.GUI, false, matrixstack, irendertypebuffer$impl, 15728880, OverlayTexture.NO_OVERLAY, bakedmodel);
         irendertypebuffer$impl.finish();
         RenderSystem.enableDepthTest();
@@ -469,4 +512,21 @@
     {
         return VanillaResourceType.MODELS;
     }
+    
+    //Vivecraft Additions
+    private int makeColor(int a, int r, int g, int b) {
+    	return  a << 24 | r << 16 | g << 8 | b;
+    }
+    public float getCurrentFade() {
+    	return fade;
+    }
+
+    public float getFade() {
+    	return manualFade;
+    }
+
+    //used for physical inventory.
+    public void setFade(float fade) {
+    	this.manualFade = fade;
+    }
 }
