--- a/net/minecraft/client/renderer/ItemRenderer.java
+++ b/net/minecraft/client/renderer/ItemRenderer.java
@@ -11,6 +11,10 @@
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import org.lwjgl.opengl.GL14;
+import org.vivecraft.gameplay.trackers.SwingTracker;
+
 import net.minecraft.block.BlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.player.ClientPlayerEntity;
@@ -48,6 +52,7 @@
 import net.optifine.CustomItems;
 import net.optifine.reflect.Reflector;
 import net.optifine.reflect.ReflectorForge;
+import net.optifine.render.GlAlphaState;
 import net.optifine.render.RenderTypes;
 
 public class ItemRenderer implements IResourceManagerReloadListener
@@ -62,6 +67,13 @@
     private boolean renderModelHasEmissive = false;
     private boolean renderModelEmissive = false;
     private static boolean renderItemGui = false;
+    
+    //Vivecraft
+    public static boolean ismainhand = false;
+    public static boolean isfphand = false;
+    float fade = 1, manualFade = 1;
+    private GlAlphaState alphaState = new GlAlphaState();
+    //
 
     public ItemRenderer(TextureManager p_i49_1_, ModelManager p_i49_2_, ItemColors p_i49_3_)
     {
@@ -141,10 +153,27 @@
             {
                 modelIn = this.itemModelMesher.getModelManager().getModel(new ModelResourceLocation("minecraft:trident#inventory"));
             }
-
             modelIn.getItemCameraTransforms().getTransform(transformTypeIn).apply(leftHand, matrixStackIn);
             matrixStackIn.translate(-0.5D, -0.5D, -0.5D);
 
+            //VIVECRAFT support held item transparency overrides.
+            ClientPlayerEntity p = Minecraft.getInstance().player;
+            if(p!=null && isfphand){
+            	fade =	SwingTracker.getItemFade(p, itemStackIn);          	
+                GlStateManager.enableBlend();
+                if (fade < 1) {
+                    GL14.glBlendColor(1.0F, 1.0F, 1.0F, fade);
+                    // Breaks translucent items, but there's no other way to do this as long as Minecraft uses fixed pipeline rendering.
+                    RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.CONSTANT_ALPHA, GlStateManager.DestFactor.ONE_MINUS_CONSTANT_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+                } else {
+                	RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
+                }
+            } else {
+            	fade = manualFade;
+            }
+            //
+            
+            
             if (!modelIn.isBuiltInRenderer() && (itemStackIn.getItem() != Items.TRIDENT || flag1))
             {
                 RenderType rendertype1 = RenderTypeLookup.getRenderType(itemStackIn);
@@ -183,11 +212,17 @@
             }
             else if (Reflector.IForgeItem_getTileEntityItemStackRenderer.exists())
             {
+            	//VIVECRAFT - item partial transparency
+            	GlStateManager.color4f(1.0F, 1.0F, 1.0F, fade );
+            	//
                 ItemStackTileEntityRenderer itemstacktileentityrenderer = (ItemStackTileEntityRenderer)Reflector.call(itemStackIn.getItem(), Reflector.IForgeItem_getTileEntityItemStackRenderer);
                 itemstacktileentityrenderer.render(itemStackIn, matrixStackIn, bufferIn, combinedLightIn, combinedOverlayIn);
             }
             else
             {
+            	//VIVECRAFT - item partial transparency
+            	GlStateManager.color4f(1.0F, 1.0F, 1.0F, fade );
+            	//
                 ItemStackTileEntityRenderer.instance.render(itemStackIn, matrixStackIn, bufferIn, combinedLightIn, combinedOverlayIn);
             }
 
@@ -216,6 +251,20 @@
                 k = this.itemColors.getColor(itemStackIn, bakedquad.getTintIndex());
             }
 
+                //Vivecraft color overrides for custom items
+    			int b = Math.round(fade * 255);
+    			int rev = (255 - b) << 24;
+                k = (k & 0xFFFFFF) | rev; //apply fade to tinted color (doesn't work as renderQuad can't pass alpha values, but left here as an academic exercise)
+		
+		    	if (Minecraft.getInstance().jumpTracker.isBoots(itemStackIn))
+		    	{
+		    		k = makeColor(b, 0, 255, 0);
+		    	} else if (Minecraft.getInstance().climbTracker.isClaws(itemStackIn))
+		    	{
+		    		k = makeColor(b, 130, 0, 75);
+		    	}
+		    	//
+		    	
             float f = (float)(k >> 16 & 255) / 255.0F;
             float f1 = (float)(k >> 8 & 255) / 255.0F;
             float f2 = (float)(k & 255) / 255.0F;
@@ -283,10 +332,15 @@
         this.textureManager.bindTexture(AtlasTexture.LOCATION_BLOCKS_TEXTURE);
         this.textureManager.getTexture(AtlasTexture.LOCATION_BLOCKS_TEXTURE).setBlurMipmapDirect(false, false);
         RenderSystem.enableRescaleNormal();
+        // VIVECRAFT: Save/restore the alpha properly so things stop breaking
+        GlStateManager.getAlphaState(this.alphaState);
+        GlStateManager.enableAlphaTest();
         RenderSystem.enableAlphaTest();
         RenderSystem.defaultAlphaFunc();
         RenderSystem.enableBlend();
-        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+        //RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
+        // VIVECRAFT: DestFactor of ONE is really what we want here, because math
+        RenderSystem.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ONE);
         RenderSystem.color4f(1.0F, 1.0F, 1.0F, 1.0F);
 
         if (Config.isCustomItems())
@@ -306,7 +360,6 @@
         {
             RenderHelper.setupGuiFlatDiffuseLighting();
         }
-
         this.renderItem(stack, ItemCameraTransforms.TransformType.GUI, false, matrixstack, irendertypebuffer$impl, 15728880, OverlayTexture.NO_OVERLAY, bakedmodel);
         irendertypebuffer$impl.finish();
         RenderSystem.enableDepthTest();
@@ -460,4 +513,21 @@
     {
         return VanillaResourceType.MODELS;
     }
+    
+    //Vivecraft Additions
+    private int makeColor(int a, int r, int g, int b) {
+    	return  a << 24 | r << 16 | g << 8 | b;
+    }
+    	public float getCurrentFade() {
+		return fade;
+	}
+
+    public float getFade() {
+        return manualFade;
+    }
+	
+    //used for physical inventory.
+	public void setFade(float fade) {
+		this.manualFade = fade;
+	}
 }
