--- a/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
+++ b/net/minecraft/client/renderer/block/LiquidBlockRenderer.java
@@ -35,6 +35,7 @@
     private final TextureAtlasSprite[] lavaIcons = new TextureAtlasSprite[2];
     private final TextureAtlasSprite[] waterIcons = new TextureAtlasSprite[2];
     private TextureAtlasSprite waterOverlay;
+    public static boolean skipStupidGoddamnChunkBoundaryClipping;
 
     protected void setupSprites()
     {
@@ -86,7 +87,7 @@
     public boolean tesselate(BlockAndTintGetter p_110955_, BlockPos p_110956_, VertexConsumer p_110957_, FluidState p_110958_)
     {
         BlockState blockstate = p_110958_.createLegacyBlock();
-        boolean f;
+        int l2;
 
         try
         {
@@ -95,8 +96,8 @@
                 SVertexBuilder.pushEntity(blockstate, p_110957_);
             }
 
-            boolean flag = p_110958_.is(FluidTags.LAVA);
-            TextureAtlasSprite[] atextureatlassprite = flag ? this.lavaIcons : this.waterIcons;
+            boolean flag1 = p_110958_.is(FluidTags.LAVA);
+            TextureAtlasSprite[] atextureatlassprite = flag1 ? this.lavaIcons : this.waterIcons;
             BlockState blockstate1 = p_110955_.getBlockState(p_110956_);
 
             if (Reflector.ForgeHooksClient_getFluidSprites.exists())
@@ -124,311 +125,311 @@
                 }
             }
 
-            boolean flag9 = !isNeighborSameFluid(p_110955_, p_110956_, Direction.UP, p_110958_);
-            boolean flag1 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.DOWN) && !isFaceOccludedByNeighbor(p_110955_, p_110956_, Direction.DOWN, 0.8888889F);
-            boolean flag2 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.NORTH);
-            boolean flag3 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.SOUTH);
-            boolean flag4 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.WEST);
-            boolean flag5 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.EAST);
-
-            if (flag9 || flag1 || flag5 || flag4 || flag2 || flag3)
-            {
-                if (i < 0)
-                {
-                    i = CustomColors.getFluidColor(p_110955_, blockstate, p_110956_, renderenv);
-                }
-
-                float f28 = (float)(i >> 16 & 255) / 255.0F;
-                float f1 = (float)(i >> 8 & 255) / 255.0F;
-                float f2 = (float)(i & 255) / 255.0F;
-                boolean flag7 = false;
-                float f3 = p_110955_.getShade(Direction.DOWN, true);
-                float f4 = p_110955_.getShade(Direction.UP, true);
-                float f5 = p_110955_.getShade(Direction.NORTH, true);
-                float f6 = p_110955_.getShade(Direction.WEST, true);
-                float f7 = this.getWaterHeight(p_110955_, p_110956_, p_110958_.getType());
-                float f8 = this.getWaterHeight(p_110955_, p_110956_.south(), p_110958_.getType());
-                float f9 = this.getWaterHeight(p_110955_, p_110956_.east().south(), p_110958_.getType());
-                float f10 = this.getWaterHeight(p_110955_, p_110956_.east(), p_110958_.getType());
-                double d0 = (double)(p_110956_.getX() & 15);
-                double d1 = (double)(p_110956_.getY() & 15);
-                double d2 = (double)(p_110956_.getZ() & 15);
-
-                if (Config.isRenderRegions())
-                {
-                    int j = p_110956_.getX() >> 4 << 4;
-                    int k = p_110956_.getY() >> 4 << 4;
-                    int l = p_110956_.getZ() >> 4 << 4;
-                    int i1 = 8;
-                    int j1 = j >> i1 << i1;
-                    int k1 = l >> i1 << i1;
-                    int l1 = j - j1;
-                    int i2 = l - k1;
-                    d0 += (double)l1;
-                    d1 += (double)k;
-                    d2 += (double)i2;
-                }
-
-                if (Config.isShaders() && Shaders.useMidBlockAttrib)
-                {
-                    p_110957_.setMidBlock((float)(d0 + 0.5D), (float)(d1 + 0.5D), (float)(d2 + 0.5D));
-                }
-
-                float f29 = 0.001F;
-                float f30 = flag1 ? 0.001F : 0.0F;
-
-                if (flag9 && !isFaceOccludedByNeighbor(p_110955_, p_110956_, Direction.UP, Math.min(Math.min(f7, f8), Math.min(f9, f10))))
-                {
-                    flag7 = true;
-                    f7 -= 0.001F;
-                    f8 -= 0.001F;
-                    f9 -= 0.001F;
-                    f10 -= 0.001F;
-                    Vec3 vec3 = p_110958_.getFlow(p_110955_, p_110956_);
-                    float f11;
-                    float f12;
-                    float f13;
-                    float f32;
-                    float f35;
-                    float f38;
-                    float f40;
-                    float f42;
+            boolean flag8 = !isNeighborSameFluid(p_110955_, p_110956_, Direction.UP, p_110958_);
+            boolean flag2 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.DOWN) && !isFaceOccludedByNeighbor(p_110955_, p_110956_, Direction.DOWN, 0.8888889F);
+            boolean flag3 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.NORTH);
+            boolean flag4 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.SOUTH);
+            boolean flag5 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.WEST);
+            boolean flag6 = shouldRenderFace(p_110955_, p_110956_, p_110958_, blockstate1, Direction.EAST);
 
-                    if (vec3.x == 0.0D && vec3.z == 0.0D)
-                    {
-                        TextureAtlasSprite textureatlassprite1 = atextureatlassprite[0];
-                        p_110957_.setSprite(textureatlassprite1);
-                        f32 = textureatlassprite1.getU(0.0D);
-                        f11 = textureatlassprite1.getV(0.0D);
-                        f35 = f32;
-                        f42 = textureatlassprite1.getV(16.0D);
-                        f38 = textureatlassprite1.getU(16.0D);
-                        f12 = f42;
-                        f40 = f38;
-                        f13 = f11;
-                    }
-                    else
-                    {
-                        TextureAtlasSprite textureatlassprite = atextureatlassprite[1];
-                        p_110957_.setSprite(textureatlassprite);
-                        float f14 = (float)Mth.atan2(vec3.z, vec3.x) - ((float)Math.PI / 2F);
-                        float f15 = Mth.sin(f14) * 0.25F;
-                        float f16 = Mth.cos(f14) * 0.25F;
-                        float f17 = 8.0F;
-                        f32 = textureatlassprite.getU((double)(8.0F + (-f16 - f15) * 16.0F));
-                        f11 = textureatlassprite.getV((double)(8.0F + (-f16 + f15) * 16.0F));
-                        f35 = textureatlassprite.getU((double)(8.0F + (-f16 + f15) * 16.0F));
-                        f42 = textureatlassprite.getV((double)(8.0F + (f16 + f15) * 16.0F));
-                        f38 = textureatlassprite.getU((double)(8.0F + (f16 + f15) * 16.0F));
-                        f12 = textureatlassprite.getV((double)(8.0F + (f16 - f15) * 16.0F));
-                        f40 = textureatlassprite.getU((double)(8.0F + (f16 - f15) * 16.0F));
-                        f13 = textureatlassprite.getV((double)(8.0F + (-f16 - f15) * 16.0F));
-                    }
+            if (!flag8 && !flag2 && !flag6 && !flag5 && !flag3 && !flag4)
+            {
+                return false;
+            }
 
-                    float f46 = (f32 + f35 + f38 + f40) / 4.0F;
-                    float f47 = (f11 + f42 + f12 + f13) / 4.0F;
-                    float f48 = (float)atextureatlassprite[0].getWidth() / (atextureatlassprite[0].getU1() - atextureatlassprite[0].getU0());
-                    float f49 = (float)atextureatlassprite[0].getHeight() / (atextureatlassprite[0].getV1() - atextureatlassprite[0].getV0());
-                    float f50 = 4.0F / Math.max(f49, f48);
-                    f32 = Mth.lerp(f50, f32, f46);
-                    f35 = Mth.lerp(f50, f35, f46);
-                    f38 = Mth.lerp(f50, f38, f46);
-                    f40 = Mth.lerp(f50, f40, f46);
-                    f11 = Mth.lerp(f50, f11, f47);
-                    f42 = Mth.lerp(f50, f42, f47);
-                    f12 = Mth.lerp(f50, f12, f47);
-                    f13 = Mth.lerp(f50, f13, f47);
-                    int j2 = this.getLightColor(p_110955_, p_110956_);
-                    float f18 = f4 * f28;
-                    float f19 = f4 * f1;
-                    float f20 = f4 * f2;
-                    this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f7, d2 + 0.0D, f18, f19, f20, f, f32, f11, j2);
-                    this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f8, d2 + 1.0D, f18, f19, f20, f, f35, f42, j2);
-                    this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f9, d2 + 1.0D, f18, f19, f20, f, f38, f12, j2);
-                    this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f10, d2 + 0.0D, f18, f19, f20, f, f40, f13, j2);
+            if (i < 0)
+            {
+                i = CustomColors.getFluidColor(p_110955_, blockstate, p_110956_, renderenv);
+            }
 
-                    if (p_110958_.shouldRenderBackwardUpFace(p_110955_, p_110956_.above()))
-                    {
-                        this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f7, d2 + 0.0D, f18, f19, f20, f, f32, f11, j2);
-                        this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f10, d2 + 0.0D, f18, f19, f20, f, f40, f13, j2);
-                        this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f9, d2 + 1.0D, f18, f19, f20, f, f38, f12, j2);
-                        this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f8, d2 + 1.0D, f18, f19, f20, f, f35, f42, j2);
-                    }
+            float f1 = (float)(i >> 16 & 255) / 255.0F;
+            float f2 = (float)(i >> 8 & 255) / 255.0F;
+            float f3 = (float)(i & 255) / 255.0F;
+            boolean flag = false;
+            float f4 = p_110955_.getShade(Direction.DOWN, true);
+            float f5 = p_110955_.getShade(Direction.UP, true);
+            float f6 = p_110955_.getShade(Direction.NORTH, true);
+            float f7 = p_110955_.getShade(Direction.WEST, true);
+            float f8 = this.getWaterHeight(p_110955_, p_110956_, p_110958_.getType());
+            float f9 = this.getWaterHeight(p_110955_, p_110956_.south(), p_110958_.getType());
+            float f10 = this.getWaterHeight(p_110955_, p_110956_.east().south(), p_110958_.getType());
+            float f11 = this.getWaterHeight(p_110955_, p_110956_.east(), p_110958_.getType());
+            double d0 = skipStupidGoddamnChunkBoundaryClipping ? (double)p_110956_.getX() : (double)(p_110956_.getX() & 15);
+            double d1 = skipStupidGoddamnChunkBoundaryClipping ? (double)p_110956_.getY() : (double)(p_110956_.getY() & 15);
+            double d2 = skipStupidGoddamnChunkBoundaryClipping ? (double)p_110956_.getZ() : (double)(p_110956_.getZ() & 15);
+
+            if (Config.isRenderRegions() && !skipStupidGoddamnChunkBoundaryClipping)
+            {
+                int j = p_110956_.getX() >> 4 << 4;
+                int k = p_110956_.getY() >> 4 << 4;
+                l2 = p_110956_.getZ() >> 4 << 4;
+                int l = 8;
+                int i1 = j >> l << l;
+                int j1 = l2 >> l << l;
+                int k1 = j - i1;
+                int l1 = l2 - j1;
+                d0 += (double)k1;
+                d1 += (double)k;
+                d2 += (double)l1;
+            }
+
+            if (Config.isShaders() && Shaders.useMidBlockAttrib)
+            {
+                p_110957_.setMidBlock((float)(d0 + 0.5D), (float)(d1 + 0.5D), (float)(d2 + 0.5D));
+            }
+
+            float f29 = 0.001F;
+            float f30 = flag2 ? 0.001F : 0.0F;
+
+            if (flag8 && !isFaceOccludedByNeighbor(p_110955_, p_110956_, Direction.UP, Math.min(Math.min(f8, f9), Math.min(f10, f11))))
+            {
+                flag = true;
+                f8 -= 0.001F;
+                f9 -= 0.001F;
+                f10 -= 0.001F;
+                f11 -= 0.001F;
+                Vec3 vec3 = p_110958_.getFlow(p_110955_, p_110956_);
+                float f12;
+                float f13;
+                float f14;
+                float f32;
+                float f35;
+                float f38;
+                float f40;
+                float f41;
+
+                if (vec3.x == 0.0D && vec3.z == 0.0D)
+                {
+                    TextureAtlasSprite textureatlassprite1 = atextureatlassprite[0];
+                    p_110957_.setSprite(textureatlassprite1);
+                    f40 = textureatlassprite1.getU(0.0D);
+                    f32 = textureatlassprite1.getV(0.0D);
+                    f41 = f40;
+                    f14 = textureatlassprite1.getV(16.0D);
+                    f12 = textureatlassprite1.getU(16.0D);
+                    f35 = f14;
+                    f13 = f12;
+                    f38 = f32;
                 }
+                else
+                {
+                    TextureAtlasSprite textureatlassprite = atextureatlassprite[1];
+                    p_110957_.setSprite(textureatlassprite);
+                    float f15 = (float)Mth.atan2(vec3.z, vec3.x) - ((float)Math.PI / 2F);
+                    float f16 = Mth.sin(f15) * 0.25F;
+                    float f17 = Mth.cos(f15) * 0.25F;
+                    float f18 = 8.0F;
+                    f40 = textureatlassprite.getU((double)(8.0F + (-f17 - f16) * 16.0F));
+                    f32 = textureatlassprite.getV((double)(8.0F + (-f17 + f16) * 16.0F));
+                    f41 = textureatlassprite.getU((double)(8.0F + (-f17 + f16) * 16.0F));
+                    f14 = textureatlassprite.getV((double)(8.0F + (f17 + f16) * 16.0F));
+                    f12 = textureatlassprite.getU((double)(8.0F + (f17 + f16) * 16.0F));
+                    f35 = textureatlassprite.getV((double)(8.0F + (f17 - f16) * 16.0F));
+                    f13 = textureatlassprite.getU((double)(8.0F + (f17 - f16) * 16.0F));
+                    f38 = textureatlassprite.getV((double)(8.0F + (-f17 - f16) * 16.0F));
+                }
+
+                float f46 = (f40 + f41 + f12 + f13) / 4.0F;
+                float f47 = (f32 + f14 + f35 + f38) / 4.0F;
+                float f48 = (float)atextureatlassprite[0].getWidth() / (atextureatlassprite[0].getU1() - atextureatlassprite[0].getU0());
+                float f49 = (float)atextureatlassprite[0].getHeight() / (atextureatlassprite[0].getV1() - atextureatlassprite[0].getV0());
+                float f50 = 4.0F / Math.max(f49, f48);
+                f40 = Mth.lerp(f50, f40, f46);
+                f41 = Mth.lerp(f50, f41, f46);
+                f12 = Mth.lerp(f50, f12, f46);
+                f13 = Mth.lerp(f50, f13, f46);
+                f32 = Mth.lerp(f50, f32, f47);
+                f14 = Mth.lerp(f50, f14, f47);
+                f35 = Mth.lerp(f50, f35, f47);
+                f38 = Mth.lerp(f50, f38, f47);
+                int i2 = this.getLightColor(p_110955_, p_110956_);
+                float f19 = f5 * f1;
+                float f20 = f5 * f2;
+                float f21 = f5 * f3;
+                this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f8, d2 + 0.0D, f19, f20, f21, f, f40, f32, i2);
+                this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f9, d2 + 1.0D, f19, f20, f21, f, f41, f14, i2);
+                this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f10, d2 + 1.0D, f19, f20, f21, f, f12, f35, i2);
+                this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f11, d2 + 0.0D, f19, f20, f21, f, f13, f38, i2);
 
-                if (flag1)
+                if (p_110958_.shouldRenderBackwardUpFace(p_110955_, p_110956_.above()))
                 {
-                    p_110957_.setSprite(atextureatlassprite[0]);
-                    float f31 = atextureatlassprite[0].getU0();
-                    float f33 = atextureatlassprite[0].getU1();
-                    float f36 = atextureatlassprite[0].getV0();
-                    float f39 = atextureatlassprite[0].getV1();
-                    int i3 = this.getLightColor(p_110955_, p_110956_.below());
-                    float f41 = p_110955_.getShade(Direction.DOWN, true);
-                    float f43 = f41 * f28;
-                    float f44 = f41 * f1;
-                    float f45 = f41 * f2;
-                    this.vertexVanilla(p_110957_, d0, d1 + (double)f30, d2 + 1.0D, f43, f44, f45, f, f31, f39, i3);
-                    this.vertexVanilla(p_110957_, d0, d1 + (double)f30, d2, f43, f44, f45, f, f31, f36, i3);
-                    this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f30, d2, f43, f44, f45, f, f33, f36, i3);
-                    this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f30, d2 + 1.0D, f43, f44, f45, f, f33, f39, i3);
-                    flag7 = true;
-                }
-
-                for (int l2 = 0; l2 < 4; ++l2)
-                {
-                    float f34;
-                    float f37;
-                    double d3;
-                    double d4;
-                    double d5;
-                    double d6;
-                    Direction direction;
-                    boolean flag10;
+                    this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f8, d2 + 0.0D, f19, f20, f21, f, f40, f32, i2);
+                    this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f11, d2 + 0.0D, f19, f20, f21, f, f13, f38, i2);
+                    this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f10, d2 + 1.0D, f19, f20, f21, f, f12, f35, i2);
+                    this.vertexVanilla(p_110957_, d0 + 0.0D, d1 + (double)f9, d2 + 1.0D, f19, f20, f21, f, f41, f14, i2);
+                }
+            }
 
-                    if (l2 == 0)
-                    {
-                        f34 = f7;
-                        f37 = f10;
-                        d3 = d0;
-                        d5 = d0 + 1.0D;
-                        d4 = d2 + (double)0.001F;
-                        d6 = d2 + (double)0.001F;
-                        direction = Direction.NORTH;
-                        flag10 = flag2;
-                    }
-                    else if (l2 == 1)
-                    {
-                        f34 = f9;
-                        f37 = f8;
-                        d3 = d0 + 1.0D;
-                        d5 = d0;
-                        d4 = d2 + 1.0D - (double)0.001F;
-                        d6 = d2 + 1.0D - (double)0.001F;
-                        direction = Direction.SOUTH;
-                        flag10 = flag3;
-                    }
-                    else if (l2 == 2)
-                    {
-                        f34 = f8;
-                        f37 = f7;
-                        d3 = d0 + (double)0.001F;
-                        d5 = d0 + (double)0.001F;
-                        d4 = d2 + 1.0D;
-                        d6 = d2;
-                        direction = Direction.WEST;
-                        flag10 = flag4;
-                    }
-                    else
+            if (flag2)
+            {
+                p_110957_.setSprite(atextureatlassprite[0]);
+                float f31 = atextureatlassprite[0].getU0();
+                float f33 = atextureatlassprite[0].getU1();
+                float f36 = atextureatlassprite[0].getV0();
+                float f39 = atextureatlassprite[0].getV1();
+                int i3 = this.getLightColor(p_110955_, p_110956_.below());
+                float f42 = p_110955_.getShade(Direction.DOWN, true);
+                float f43 = f42 * f1;
+                float f44 = f42 * f2;
+                float f45 = f42 * f3;
+                this.vertexVanilla(p_110957_, d0, d1 + (double)f30, d2 + 1.0D, f43, f44, f45, f, f31, f39, i3);
+                this.vertexVanilla(p_110957_, d0, d1 + (double)f30, d2, f43, f44, f45, f, f31, f36, i3);
+                this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f30, d2, f43, f44, f45, f, f33, f36, i3);
+                this.vertexVanilla(p_110957_, d0 + 1.0D, d1 + (double)f30, d2 + 1.0D, f43, f44, f45, f, f33, f39, i3);
+                flag = true;
+            }
+
+            for (int k2 = 0; k2 < 4; ++k2)
+            {
+                float f34;
+                float f37;
+                double d3;
+                double d4;
+                double d5;
+                double d6;
+                Direction direction;
+                boolean flag9;
+
+                if (k2 == 0)
+                {
+                    f34 = f8;
+                    f37 = f11;
+                    d3 = d0;
+                    d5 = d0 + 1.0D;
+                    d4 = d2 + (double)0.001F;
+                    d6 = d2 + (double)0.001F;
+                    direction = Direction.NORTH;
+                    flag9 = flag3;
+                }
+                else if (k2 == 1)
+                {
+                    f34 = f10;
+                    f37 = f9;
+                    d3 = d0 + 1.0D;
+                    d5 = d0;
+                    d4 = d2 + 1.0D - (double)0.001F;
+                    d6 = d2 + 1.0D - (double)0.001F;
+                    direction = Direction.SOUTH;
+                    flag9 = flag4;
+                }
+                else if (k2 == 2)
+                {
+                    f34 = f9;
+                    f37 = f8;
+                    d3 = d0 + (double)0.001F;
+                    d5 = d0 + (double)0.001F;
+                    d4 = d2 + 1.0D;
+                    d6 = d2;
+                    direction = Direction.WEST;
+                    flag9 = flag5;
+                }
+                else
+                {
+                    f34 = f11;
+                    f37 = f10;
+                    d3 = d0 + 1.0D - (double)0.001F;
+                    d5 = d0 + 1.0D - (double)0.001F;
+                    d4 = d2;
+                    d6 = d2 + 1.0D;
+                    direction = Direction.EAST;
+                    flag9 = flag6;
+                }
+
+                if (flag9 && !isFaceOccludedByNeighbor(p_110955_, p_110956_, direction, Math.max(f34, f37)))
+                {
+                    flag = true;
+                    BlockPos blockpos = p_110956_.relative(direction);
+                    TextureAtlasSprite textureatlassprite2 = atextureatlassprite[1];
+                    float f51 = 0.0F;
+                    float f52 = 0.0F;
+                    boolean flag10 = !flag1;
+
+                    if (Reflector.IForgeBlockState_shouldDisplayFluidOverlay.exists())
                     {
-                        f34 = f10;
-                        f37 = f9;
-                        d3 = d0 + 1.0D - (double)0.001F;
-                        d5 = d0 + 1.0D - (double)0.001F;
-                        d4 = d2;
-                        d6 = d2 + 1.0D;
-                        direction = Direction.EAST;
-                        flag10 = flag5;
+                        flag10 = atextureatlassprite[2] != null;
                     }
 
-                    if (flag10 && !isFaceOccludedByNeighbor(p_110955_, p_110956_, direction, Math.max(f34, f37)))
+                    if (flag10)
                     {
-                        flag7 = true;
-                        BlockPos blockpos = p_110956_.relative(direction);
-                        TextureAtlasSprite textureatlassprite2 = atextureatlassprite[1];
-                        float f51 = 0.0F;
-                        float f52 = 0.0F;
-                        boolean flag11 = !flag;
+                        BlockState blockstate2 = p_110955_.getBlockState(blockpos);
+                        Block block = blockstate2.getBlock();
+                        boolean flag7 = false;
 
                         if (Reflector.IForgeBlockState_shouldDisplayFluidOverlay.exists())
                         {
-                            flag11 = atextureatlassprite[2] != null;
+                            flag7 = Reflector.callBoolean(blockstate2, Reflector.IForgeBlockState_shouldDisplayFluidOverlay, p_110955_, blockpos, p_110958_);
                         }
 
-                        if (flag11)
+                        if (flag7 || block instanceof HalfTransparentBlock || block instanceof LeavesBlock || block == Blocks.BEACON)
                         {
-                            BlockState blockstate2 = p_110955_.getBlockState(blockpos);
-                            Block block = blockstate2.getBlock();
-                            boolean flag8 = false;
-
-                            if (Reflector.IForgeBlockState_shouldDisplayFluidOverlay.exists())
-                            {
-                                flag8 = Reflector.callBoolean(blockstate2, Reflector.IForgeBlockState_shouldDisplayFluidOverlay, p_110955_, blockpos, p_110958_);
-                            }
+                            textureatlassprite2 = this.waterOverlay;
+                        }
 
-                            if (flag8 || block instanceof HalfTransparentBlock || block instanceof LeavesBlock || block == Blocks.BEACON)
-                            {
-                                textureatlassprite2 = this.waterOverlay;
-                            }
+                        if (block == Blocks.FARMLAND || block == Blocks.GRASS_PATH)
+                        {
+                            f51 = 0.9375F;
+                            f52 = 0.9375F;
+                        }
 
-                            if (block == Blocks.FARMLAND || block == Blocks.GRASS_PATH)
-                            {
-                                f51 = 0.9375F;
-                                f52 = 0.9375F;
-                            }
+                        if (block instanceof SlabBlock)
+                        {
+                            SlabBlock slabblock = (SlabBlock)block;
 
-                            if (block instanceof SlabBlock)
+                            if (blockstate2.getValue(SlabBlock.TYPE) == SlabType.BOTTOM)
                             {
-                                SlabBlock slabblock = (SlabBlock)block;
-
-                                if (blockstate2.getValue(SlabBlock.TYPE) == SlabType.BOTTOM)
-                                {
-                                    f51 = 0.5F;
-                                    f52 = 0.5F;
-                                }
+                                f51 = 0.5F;
+                                f52 = 0.5F;
                             }
                         }
+                    }
 
-                        p_110957_.setSprite(textureatlassprite2);
+                    p_110957_.setSprite(textureatlassprite2);
 
-                        if (!(f34 <= f51) || !(f37 <= f52))
-                        {
-                            f51 = Math.min(f51, f34);
-                            f52 = Math.min(f52, f37);
+                    if (!(f34 <= f51) || !(f37 <= f52))
+                    {
+                        f51 = Math.min(f51, f34);
+                        f52 = Math.min(f52, f37);
 
-                            if (f51 > f29)
-                            {
-                                f51 -= f29;
-                            }
+                        if (f51 > f29)
+                        {
+                            f51 -= f29;
+                        }
 
-                            if (f52 > f29)
-                            {
-                                f52 -= f29;
-                            }
+                        if (f52 > f29)
+                        {
+                            f52 -= f29;
+                        }
 
-                            float f53 = textureatlassprite2.getV((double)((1.0F - f51) * 16.0F * 0.5F));
-                            float f54 = textureatlassprite2.getV((double)((1.0F - f52) * 16.0F * 0.5F));
-                            float f55 = textureatlassprite2.getU(0.0D);
-                            float f56 = textureatlassprite2.getU(8.0D);
-                            float f21 = textureatlassprite2.getV((double)((1.0F - f34) * 16.0F * 0.5F));
-                            float f22 = textureatlassprite2.getV((double)((1.0F - f37) * 16.0F * 0.5F));
-                            float f23 = textureatlassprite2.getV(8.0D);
-                            int k2 = this.getLightColor(p_110955_, blockpos);
-                            float f24 = l2 < 2 ? p_110955_.getShade(Direction.NORTH, true) : p_110955_.getShade(Direction.WEST, true);
-                            float f25 = 1.0F * f24 * f28;
-                            float f26 = 1.0F * f24 * f1;
-                            float f27 = 1.0F * f24 * f2;
-                            this.vertexVanilla(p_110957_, d3, d1 + (double)f34, d4, f25, f26, f27, f, f55, f21, k2);
-                            this.vertexVanilla(p_110957_, d5, d1 + (double)f37, d6, f25, f26, f27, f, f56, f22, k2);
-                            this.vertexVanilla(p_110957_, d5, d1 + (double)f30, d6, f25, f26, f27, f, f56, f54, k2);
-                            this.vertexVanilla(p_110957_, d3, d1 + (double)f30, d4, f25, f26, f27, f, f55, f53, k2);
+                        float f53 = textureatlassprite2.getV((double)((1.0F - f51) * 16.0F * 0.5F));
+                        float f54 = textureatlassprite2.getV((double)((1.0F - f52) * 16.0F * 0.5F));
+                        float f55 = textureatlassprite2.getU(0.0D);
+                        float f56 = textureatlassprite2.getU(8.0D);
+                        float f22 = textureatlassprite2.getV((double)((1.0F - f34) * 16.0F * 0.5F));
+                        float f23 = textureatlassprite2.getV((double)((1.0F - f37) * 16.0F * 0.5F));
+                        float f24 = textureatlassprite2.getV(8.0D);
+                        int j2 = this.getLightColor(p_110955_, blockpos);
+                        float f25 = k2 < 2 ? p_110955_.getShade(Direction.NORTH, true) : p_110955_.getShade(Direction.WEST, true);
+                        float f26 = 1.0F * f25 * f1;
+                        float f27 = 1.0F * f25 * f2;
+                        float f28 = 1.0F * f25 * f3;
+                        this.vertexVanilla(p_110957_, d3, d1 + (double)f34, d4, f26, f27, f28, f, f55, f22, j2);
+                        this.vertexVanilla(p_110957_, d5, d1 + (double)f37, d6, f26, f27, f28, f, f56, f23, j2);
+                        this.vertexVanilla(p_110957_, d5, d1 + (double)f30, d6, f26, f27, f28, f, f56, f54, j2);
+                        this.vertexVanilla(p_110957_, d3, d1 + (double)f30, d4, f26, f27, f28, f, f55, f53, j2);
 
-                            if (textureatlassprite2 != this.waterOverlay)
-                            {
-                                this.vertexVanilla(p_110957_, d3, d1 + (double)f30, d4, f25, f26, f27, f, f55, f53, k2);
-                                this.vertexVanilla(p_110957_, d5, d1 + (double)f30, d6, f25, f26, f27, f, f56, f54, k2);
-                                this.vertexVanilla(p_110957_, d5, d1 + (double)f37, d6, f25, f26, f27, f, f56, f22, k2);
-                                this.vertexVanilla(p_110957_, d3, d1 + (double)f34, d4, f25, f26, f27, f, f55, f21, k2);
-                            }
+                        if (textureatlassprite2 != this.waterOverlay)
+                        {
+                            this.vertexVanilla(p_110957_, d3, d1 + (double)f30, d4, f26, f27, f28, f, f55, f53, j2);
+                            this.vertexVanilla(p_110957_, d5, d1 + (double)f30, d6, f26, f27, f28, f, f56, f54, j2);
+                            this.vertexVanilla(p_110957_, d5, d1 + (double)f37, d6, f26, f27, f28, f, f56, f23, j2);
+                            this.vertexVanilla(p_110957_, d3, d1 + (double)f34, d4, f26, f27, f28, f, f55, f22, j2);
                         }
                     }
                 }
-
-                p_110957_.setSprite((TextureAtlasSprite)null);
-                return flag7;
             }
 
-            f = false;
+            p_110957_.setSprite((TextureAtlasSprite)null);
+            l2 = flag;
         }
         finally
         {
@@ -438,7 +439,7 @@
             }
         }
 
-        return f;
+        return (boolean)l2;
     }
 
     private void vertex(VertexConsumer p_110985_, double p_110986_, double p_110987_, double p_110988_, float p_110989_, float p_110990_, float p_110991_, float p_110992_, float p_110993_, int p_110994_)
@@ -446,9 +447,9 @@
         p_110985_.vertex(p_110986_, p_110987_, p_110988_).color(p_110989_, p_110990_, p_110991_, 1.0F).uv(p_110992_, p_110993_).uv2(p_110994_).normal(0.0F, 1.0F, 0.0F).endVertex();
     }
 
-    private void vertexVanilla(VertexConsumer buffer, double x, double y, double z, float red, float green, float blue, float alpha, float u, float v, int combinedLight)
+    private void vertexVanilla(VertexConsumer p_vertexVanilla_1_, double p_vertexVanilla_2_, double p_vertexVanilla_4_, double p_vertexVanilla_6_, float p_vertexVanilla_8_, float p_vertexVanilla_9_, float p_vertexVanilla_10_, float p_vertexVanilla_11_, float p_vertexVanilla_12_, float p_vertexVanilla_13_, int p_vertexVanilla_14_)
     {
-        buffer.vertex(x, y, z).color(red, green, blue, alpha).uv(u, v).uv2(combinedLight).normal(0.0F, 1.0F, 0.0F).endVertex();
+        p_vertexVanilla_1_.vertex(p_vertexVanilla_2_, p_vertexVanilla_4_, p_vertexVanilla_6_).color(p_vertexVanilla_8_, p_vertexVanilla_9_, p_vertexVanilla_10_, p_vertexVanilla_11_).uv(p_vertexVanilla_12_, p_vertexVanilla_13_).uv2(p_vertexVanilla_14_).normal(0.0F, 1.0F, 0.0F).endVertex();
     }
 
     private int getLightColor(BlockAndTintGetter p_110946_, BlockPos p_110947_)
