--- a/net/minecraft/client/renderer/WorldRenderer.java
+++ b/net/minecraft/client/renderer/WorldRenderer.java
@@ -56,6 +56,7 @@
 import net.minecraft.client.renderer.entity.EntityRendererManager;
 import net.minecraft.client.renderer.entity.ItemFrameRenderer;
 import net.minecraft.client.renderer.model.ModelBakery;
+import net.minecraft.client.renderer.model.ModelResourceLocation;
 import net.minecraft.client.renderer.texture.AtlasTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.tileentity.SignTileEntityRenderer;
@@ -67,6 +68,7 @@
 import net.minecraft.client.settings.GraphicsFanciness;
 import net.minecraft.client.settings.ParticleStatus;
 import net.minecraft.client.shader.Framebuffer;
+import net.minecraft.client.shader.FramebufferConstants;
 import net.minecraft.client.shader.ShaderGroup;
 import net.minecraft.client.world.ClientWorld;
 import net.minecraft.client.world.DimensionRenderInfo;
@@ -143,6 +145,9 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.opengl.GL11;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.settings.VRSettings;
 
 public class WorldRenderer implements IResourceManagerReloadListener, AutoCloseable
 {
@@ -305,9 +310,16 @@
 
             lightmapIn.enableLightmap();
             World world = this.mc.world;
-            int i = MathHelper.floor(xIn);
-            int j = MathHelper.floor(yIn);
-            int k = MathHelper.floor(zIn);
+            
+            //Vivecraft - fix which block column doesnt get rain.
+            Vec3d me = mc.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition();
+            if(mc.currentPass == RenderPass.THIRD)
+                 me = mc.vrPlayer.vrdata_world_render.getEye(RenderPass.THIRD).getPosition();           
+            int i = MathHelper.floor(me.x);
+            int j = MathHelper.floor(me.y);
+            int k = MathHelper.floor(me.z);
+            //
+            
             Tessellator tessellator = Tessellator.getInstance();
             BufferBuilder bufferbuilder = tessellator.getBuffer();
             RenderSystem.enableAlphaTest();
@@ -527,7 +539,8 @@
         RenderSystem.texParameter(3553, 10242, 10497);
         RenderSystem.texParameter(3553, 10243, 10497);
         RenderSystem.bindTexture(0);
-        this.makeEntityOutlineShader();
+        mc.stereoProvider.reinitFrameBuffers("Resource Reload");
+       // this.makeEntityOutlineShader();
 
         if (Minecraft.func_238218_y_())
         {
@@ -545,7 +558,7 @@
         ResourceLocation resourcelocation = new ResourceLocation("shaders/post/entity_outline.json");
 
         try
-        {
+        {     	
             this.entityOutlineShader = new ShaderGroup(this.mc.getTextureManager(), this.mc.getResourceManager(), this.mc.getFramebuffer(), resourcelocation);
             this.entityOutlineShader.createBindFramebuffers(this.mc.getMainWindow().getFramebufferWidth(), this.mc.getMainWindow().getFramebufferHeight());
             this.entityOutlineFramebuffer = this.entityOutlineShader.getFramebufferRaw("final");
@@ -970,7 +983,8 @@
         BlockPos blockpos1 = new BlockPos(MathHelper.floor(vec3d.x / 16.0D) * 16, MathHelper.floor(vec3d.y / 16.0D) * 16, MathHelper.floor(vec3d.z / 16.0D) * 16);
         float f = activeRenderInfoIn.getPitch();
         float f1 = activeRenderInfoIn.getYaw();
-        this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || vec3d.x != this.lastViewEntityX || vec3d.y != this.lastViewEntityY || vec3d.z != this.lastViewEntityZ || (double)f != this.lastViewEntityPitch || (double)f1 != this.lastViewEntityYaw;
+        // VIVECRAFT: Always update culling because different camera positions
+        this.displayListEntitiesDirty = true; //this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || vec3d.x != this.lastViewEntityX || vec3d.y != this.lastViewEntityY || vec3d.z != this.lastViewEntityZ || (double)f != this.lastViewEntityPitch || (double)f1 != this.lastViewEntityYaw;
         this.lastViewEntityX = vec3d.x;
         this.lastViewEntityY = vec3d.y;
         this.lastViewEntityZ = vec3d.z;
@@ -1264,8 +1278,14 @@
         TileEntityRendererDispatcher.instance.prepare(this.world, this.mc.getTextureManager(), this.mc.fontRenderer, activeRenderInfoIn, this.mc.objectMouseOver);
         this.renderManager.cacheActiveRenderInfo(this.world, activeRenderInfoIn, this.mc.pointedEntity);
         IProfiler iprofiler = this.world.getProfiler();
-        iprofiler.endStartSection("light_updates");
-        this.mc.world.getChunkProvider().getLightManager().tick(Integer.MAX_VALUE, true, true);
+
+    	//Vivecraft once per frame
+    	if(mc.currentPass == RenderPass.LEFT) {
+	        iprofiler.endStartSection("light_updates");
+	        this.mc.world.getChunkProvider().getLightManager().tick(Integer.MAX_VALUE, true, true);
+    	}
+    	//
+    	   	
         Vec3d vec3d = activeRenderInfoIn.getProjectedView();
         double d0 = vec3d.getX();
         double d1 = vec3d.getY();
@@ -1313,7 +1333,12 @@
         {
             Shaders.clearRenderBuffer();
         }
-
+        
+        //Vivecraft - VR Stencil
+        this.mc.getProfiler().endStartSection("stencil");
+    		gameRendererIn.drawEyeStencil(flag1);
+		//    
+       
         if (flag1)
         {
             Shaders.setCamera(matrixStackIn, activeRenderInfoIn, partialTicks);
@@ -1344,7 +1369,6 @@
         {
             GlStateManager.disableBlend();
         }
-
         iprofiler.endStartSection("fog");
         FogRenderer.setupFog(activeRenderInfoIn, FogRenderer.FogType.FOG_TERRAIN, Math.max(f - 16.0F, 32.0F), flag2, partialTicks);
         iprofiler.endStartSection("terrain_setup");
@@ -1375,12 +1399,13 @@
         iprofiler.endStartSection("terrain");
         Lagometer.timerTerrain.start();
 
-        if (this.mc.gameSettings.ofSmoothFps)
+        // VIVECRAFT: Nope!
+        /*if (this.mc.gameSettings.ofSmoothFps)
         {
             this.mc.getProfiler().endStartSection("finish");
             GL11.glFinish();
             this.mc.getProfiler().endStartSection("terrain");
-        }
+        }*/
 
         if (Config.isFogOff() && FogRenderer.fogStandard)
         {
@@ -1399,14 +1424,15 @@
         }
 
         Lagometer.timerTerrain.end();
-
+        Matrix4f light = new Matrix4f();
+        light.setIdentity();
         if (this.world.func_239132_a_().func_239217_c_())
         {
-            RenderHelper.func_237533_a_(matrixStackIn.getLast().getMatrix());
+            RenderHelper.func_237533_a_(light);
         }
         else
         {
-            RenderHelper.setupLevelDiffuseLighting(matrixStackIn.getLast().getMatrix());
+            RenderHelper.setupLevelDiffuseLighting(light);
         }
 
         if (flag1)
@@ -1444,12 +1470,23 @@
         boolean flag3 = false;
         IRenderTypeBuffer.Impl irendertypebuffer$impl = this.renderTypeTextures.getBufferSource();
 
+        //Vivecraft
+    	boolean selfRender = mc.currentPass == RenderPass.THIRD && mc.vrSettings.displayMirrorMode == VRSettings.MIRROR_THIRD_PERSON;
+    	selfRender |= mc.vrSettings.shouldRenderSelf || mc.vrSettings.tmpRenderSelf;
+    	//	
         for (Entity entity : this.world.getAllEntities())
         {
-            if ((this.renderManager.shouldRender(entity, clippinghelper, d0, d1, d2) || entity.isRidingOrBeingRiddenBy(this.mc.player)) && (entity != activeRenderInfoIn.getRenderViewEntity() || activeRenderInfoIn.isThirdPerson() || activeRenderInfoIn.getRenderViewEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfoIn.getRenderViewEntity()).isSleeping()) && (!(entity instanceof ClientPlayerEntity) || activeRenderInfoIn.getRenderViewEntity() == entity))
+        	//Vivecraft insert selfRender
+            if ((this.renderManager.shouldRender(entity, clippinghelper, d0, d1, d2) || entity.isRidingOrBeingRiddenBy(this.mc.player)) && (selfRender || entity != activeRenderInfoIn.getRenderViewEntity() || activeRenderInfoIn.isThirdPerson() || activeRenderInfoIn.getRenderViewEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfoIn.getRenderViewEntity()).isSleeping()) && (!(entity instanceof ClientPlayerEntity) || activeRenderInfoIn.getRenderViewEntity() == entity))
             {
                 ++this.countEntitiesRendered;
 
+                //Vivecraft put back location.
+                if(entity == activeRenderInfoIn.getRenderViewEntity()) { 
+                	gameRendererIn.restoreRVEPos((LivingEntity) entity);
+                }
+                //
+                
                 if (entity.ticksExisted == 0)
                 {
                     entity.lastTickPosX = entity.getPosX();
@@ -1485,9 +1522,16 @@
 
                 this.renderEntity(entity, d0, d1, d2, partialTicks, matrixStackIn, irendertypebuffer);
                 this.renderedEntity = null;
+                
+                //Vivecraft
+                if(entity == activeRenderInfoIn.getRenderViewEntity()) {
+                	gameRendererIn.cacheRVEPos((LivingEntity) entity);
+                	gameRendererIn.setupRVE();
+                }
+                //
+                
             }
         }
-
         this.checkMatrixStack(matrixStackIn);
         irendertypebuffer$impl.finish(RenderType.getEntitySolid(AtlasTexture.LOCATION_BLOCKS_TEXTURE));
         irendertypebuffer$impl.finish(RenderType.getEntityCutout(AtlasTexture.LOCATION_BLOCKS_TEXTURE));
@@ -1666,11 +1710,25 @@
         --renderEntitiesCounter;
         this.checkMatrixStack(matrixStackIn);
         iprofiler.endSection();
+        iprofiler.endStartSection("outline");
+
+        //Vivecraft interact highlight
+        	selR = selG = selB = 1f;
+        	for (int c=0;c<2;c++) {
+        		if(mc.interactTracker.isInteractActive(c) && mc.interactTracker.inBlockHit[c] != null) {
+                    BlockPos blockpos = mc.interactTracker.inBlockHit[c].getPos();
+                    BlockState blockstate = this.world.getBlockState(blockpos);
+                    this.drawSelectionBox(matrixStackIn, irendertypebuffer$impl.getBuffer(RenderType.getLines()), activeRenderInfoIn.getRenderViewEntity(), d0, d1, d2, blockpos, blockstate);
+                    if (c==0) drawBlockOutline = false; //don't draw both
+        		}
+        	}
+        //
+    	   	
         RayTraceResult raytraceresult = this.mc.objectMouseOver;
 
         if (drawBlockOutline && raytraceresult != null && raytraceresult.getType() == RayTraceResult.Type.BLOCK)
         {
-            iprofiler.endStartSection("outline");
+        	selR = selG = selB = 0f;
             BlockPos blockpos = ((BlockRayTraceResult)raytraceresult).getPos();
             BlockState blockstate = this.world.getBlockState(blockpos);
             boolean flag6;
@@ -1695,6 +1753,8 @@
                 irendertypebuffer$impl.finish(RenderType.getLines());
             }
         }
+   
+        this.mc.getProfiler().endStartSection("border");
 
         RenderSystem.pushMatrix();
         RenderSystem.multMatrix(matrixStackIn.getLast().getMatrix());
@@ -1703,6 +1763,7 @@
         this.mc.debugRenderer.render(matrixStackIn, irendertypebuffer$impl, d0, d1, d2);
         GlStateManager.setFogEnabled(flag5);
         RenderSystem.popMatrix();
+       this.mc.getProfiler().endStartSection("render bukkake");
         irendertypebuffer$impl.finish(Atlases.getTranslucentCullBlockType());
         irendertypebuffer$impl.finish(Atlases.getBannerType());
         irendertypebuffer$impl.finish(Atlases.getShieldType());
@@ -1715,10 +1776,22 @@
         irendertypebuffer$impl.finish(RenderType.getLines());
         irendertypebuffer$impl.finish();
 
+        this.mc.getProfiler().endStartSection("VR");
+        gameRendererIn.renderVRLit(flag1, false, partialTicks);  	
+
+        irendertypebuffer$impl.finish();
+
+      //  put back any unexpected states
+        RenderSystem.enableTexture();
+        RenderSystem.defaultBlendFunc();
+        RenderSystem.defaultAlphaFunc();
+        RenderSystem.color4f(1, 1, 1, 1);
+        RenderHelper.enableStandardItemLighting();
+        RenderHelper.disableStandardItemLighting();
         if (flag1)
         {
-            Shaders.preRenderHand();
-            ShadersRender.renderHand0(gameRendererIn, matrixStackIn, activeRenderInfoIn, partialTicks);
+       //     Shaders.preRenderHand();
+       //     ShadersRender.renderHand0(gameRendererIn, matrixStackIn, activeRenderInfoIn, partialTicks);
             Shaders.preWater();
         }
 
@@ -2957,10 +3030,11 @@
     {
         bufferIn.pos(xIn - camX, (double)yIn - camY, zIn - camZ).tex(texU, texV).endVertex();
     }
-
+    //Vivecraft support colored blockoutline
+    public float selR, selG, selB;
     private void drawSelectionBox(MatrixStack matrixStackIn, IVertexBuilder bufferIn, Entity entityIn, double xIn, double yIn, double zIn, BlockPos blockPosIn, BlockState blockStateIn)
     {
-        drawShape(matrixStackIn, bufferIn, blockStateIn.getShape(this.world, blockPosIn, ISelectionContext.forEntity(entityIn)), (double)blockPosIn.getX() - xIn, (double)blockPosIn.getY() - yIn, (double)blockPosIn.getZ() - zIn, 0.0F, 0.0F, 0.0F, 0.4F);
+        drawShape(matrixStackIn, bufferIn, blockStateIn.getShape(this.world, blockPosIn, ISelectionContext.forEntity(entityIn)), (double)blockPosIn.getX() - xIn, (double)blockPosIn.getY() - yIn, (double)blockPosIn.getZ() - zIn, selR, selG, selB, 0.4F);
     }
 
     public static void drawVoxelShapeParts(MatrixStack matrixStackIn, IVertexBuilder bufferIn, VoxelShape shapeIn, double xIn, double yIn, double zIn, float red, float green, float blue, float alpha)
@@ -3424,6 +3498,8 @@
     {
         Random random = this.world.rand;
 
+        boolean playernear =  mc.player !=null && mc.player.isAlive() && (mc.player.getBlockPos().distanceSq(blockPosIn) < 25); ///hmm sure why not.
+        
         switch (type)
         {
             case 1000:
@@ -3486,18 +3562,26 @@
                 break;
 
             case 1011:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1012:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1013:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1014:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_FENCE_GATE_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3518,14 +3602,26 @@
                 break;
 
             case 1019:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1020:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_IRON_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1021:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
@@ -3554,10 +3650,17 @@
                 break;
 
             case 1030:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,500); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_USE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1031:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,1250); 
+                	MCOpenVR.triggerHapticPulse(1,1250); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_LAND, SoundCategory.BLOCKS, 0.3F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3578,6 +3681,9 @@
                 break;
 
             case 1036:
+
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
