--- a/net/minecraft/client/renderer/ItemInHandRenderer.java
+++ b/net/minecraft/client/renderer/ItemInHandRenderer.java
@@ -6,8 +6,15 @@
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.math.Matrix4f;
+import com.mojang.math.Quaternion;
 import com.mojang.math.Vector3f;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
+import java.util.stream.Stream;
+import javax.annotation.Nullable;
+import net.minecraft.Util;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.player.AbstractClientPlayer;
 import net.minecraft.client.player.LocalPlayer;
@@ -16,21 +23,50 @@
 import net.minecraft.client.renderer.entity.ItemRenderer;
 import net.minecraft.client.renderer.entity.player.PlayerRenderer;
 import net.minecraft.client.renderer.texture.OverlayTexture;
+import net.minecraft.client.resources.model.BakedModel;
+import net.minecraft.core.BlockPos;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.item.ArrowItem;
+import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.CompassItem;
 import net.minecraft.world.item.CrossbowItem;
+import net.minecraft.world.item.FishingRodItem;
+import net.minecraft.world.item.FoodOnAStickItem;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.MapItem;
+import net.minecraft.world.item.ProjectileWeaponItem;
+import net.minecraft.world.item.ShieldItem;
+import net.minecraft.world.item.SwordItem;
+import net.minecraft.world.item.TridentItem;
+import net.minecraft.world.item.UseAnim;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.TorchBlock;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
 import net.optifine.Config;
 import net.optifine.CustomItems;
 import net.optifine.reflect.Reflector;
 import net.optifine.shaders.Shaders;
-
+import org.apache.commons.lang3.tuple.Triple;
+import org.vivecraft.gameplay.trackers.BowTracker;
+import org.vivecraft.gameplay.trackers.SwingTracker;
+import org.vivecraft.gameplay.trackers.TelescopeTracker;
+import org.vivecraft.provider.ControllerType;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.VRArmRenderer;
+import org.vivecraft.render.VRFirstPersonArmSwing;
+import org.vivecraft.render.VRRenderType;
+import org.vivecraft.render.VivecraftItemRendering;
+//TODO: this needs a lot of work
 public class ItemInHandRenderer
 {
     private static final RenderType MAP_BACKGROUND = RenderType.text(new ResourceLocation("textures/map/map_background.png"));
@@ -115,6 +151,8 @@
     private final EntityRenderDispatcher entityRenderDispatcher;
     private final ItemRenderer itemRenderer;
     private static boolean renderItemHand = false;
+    public VRFirstPersonArmSwing swingType = VRFirstPersonArmSwing.Attack;
+    public float xdist = 0.0F;
 
     public ItemInHandRenderer(Minecraft p_109310_)
     {
@@ -123,6 +161,7 @@
         this.itemRenderer = p_109310_.getItemRenderer();
     }
 
+    
     public void renderItem(LivingEntity p_109323_, ItemStack pLivingEntity, ItemTransforms.TransformType pItemStack, boolean pTransformType, PoseStack pLeftHand, MultiBufferSource pMatrixStack, int pBuffer)
     {
         CustomItems.setRenderOffHand(pTransformType);
@@ -245,33 +284,48 @@
     {
         boolean flag = pSwingProgress != HumanoidArm.LEFT;
         float f = flag ? 1.0F : -1.0F;
-        float f1 = Mth.sqrt(pEquippedProgress);
-        float f2 = -0.3F * Mth.sin(f1 * (float)Math.PI);
-        float f3 = 0.4F * Mth.sin(f1 * ((float)Math.PI * 2F));
-        float f4 = -0.4F * Mth.sin(pEquippedProgress * (float)Math.PI);
-        p_109347_.translate((double)(f * (f2 + 0.64000005F)), (double)(f3 + -0.6F + pCombinedLight * -0.6F), (double)(f4 + -0.71999997F));
-        p_109347_.mulPose(Vector3f.YP.rotationDegrees(f * 45.0F));
-        float f5 = Mth.sin(pEquippedProgress * pEquippedProgress * (float)Math.PI);
-        float f6 = Mth.sin(f1 * (float)Math.PI);
-        p_109347_.mulPose(Vector3f.YP.rotationDegrees(f * f6 * 70.0F));
-        p_109347_.mulPose(Vector3f.ZP.rotationDegrees(f * f5 * -20.0F));
+//        float f1 = Mth.sqrt(pEquippedProgress);
+//        float f2 = -0.3F * Mth.sin(f1 * (float)Math.PI);
+//        float f3 = 0.4F * Mth.sin(f1 * ((float)Math.PI * 2F));
+//        float f4 = -0.4F * Mth.sin(pEquippedProgress * (float)Math.PI);
+//        p_109347_.translate((double)(f * (f2 + 0.64000005F)), (double)(f3 + -0.6F + pCombinedLight * -0.6F), (double)(f4 + -0.71999997F));
+//        p_109347_.mulPose(Vector3f.YP.rotationDegrees(f * 45.0F));
+//        float f5 = Mth.sin(pEquippedProgress * pEquippedProgress * (float)Math.PI);
+//        float f6 = Mth.sin(f1 * (float)Math.PI);
+//        p_109347_.mulPose(Vector3f.YP.rotationDegrees(f * f6 * 70.0F));
+//        p_109347_.mulPose(Vector3f.ZP.rotationDegrees(f * f5 * -20.0F));
         AbstractClientPlayer abstractclientplayer = this.minecraft.player;
         RenderSystem.setShaderTexture(0, abstractclientplayer.getSkinTextureLocation());
-        p_109347_.translate((double)(f * -1.0F), (double)3.6F, 3.5D);
-        p_109347_.mulPose(Vector3f.ZP.rotationDegrees(f * 120.0F));
-        p_109347_.mulPose(Vector3f.XP.rotationDegrees(200.0F));
-        p_109347_.mulPose(Vector3f.YP.rotationDegrees(f * -135.0F));
-        p_109347_.translate((double)(f * 5.6F), 0.0D, 0.0D);
-        PlayerRenderer playerrenderer = (PlayerRenderer)this.entityRenderDispatcher.<AbstractClientPlayer>getRenderer(abstractclientplayer);
-
-        if (flag)
-        {
-            playerrenderer.renderRightHand(p_109347_, pMatrixStack, pBuffer, abstractclientplayer);
-        }
-        else
-        {
-            playerrenderer.renderLeftHand(p_109347_, pMatrixStack, pBuffer, abstractclientplayer);
-        }
+        VRArmRenderer vrarmrenderer = entityRenderDispatcher.armSkinMap.get(abstractclientplayer.getModelName());
+        p_109347_.pushPose();
+	        if (abstractclientplayer.swingingArm == InteractionHand.MAIN_HAND && flag)
+	        {
+	            this.transformFirstPersonVR(p_109347_, pSwingProgress, pEquippedProgress);
+	        }
+	
+	        if (abstractclientplayer.swingingArm == InteractionHand.OFF_HAND && !flag)
+	        {
+	            this.transformFirstPersonVR(p_109347_, pSwingProgress, pEquippedProgress);
+	        }
+//	        p_109347_.translate((double)(f * -1.0F), (double)3.6F, 3.5D);
+//	        p_109347_.mulPose(Vector3f.ZP.rotationDegrees(f * 120.0F));
+//	        p_109347_.mulPose(Vector3f.XP.rotationDegrees(200.0F));
+//	        p_109347_.mulPose(Vector3f.YP.rotationDegrees(f * -135.0F));
+//	        p_109347_.translate((double)(f * 5.6F), 0.0D, 0.0D);	
+	        p_109347_.scale(0.4f, 0.4F, 0.4F);
+	    	boolean slim = abstractclientplayer.getSkinTextureLocation().getPath().equals("slim");
+	    	p_109347_.translate(slim ? 0.345F * -f : 0.375F * -f, 0, slim ? 0.785F : 0.75F);
+	    	p_109347_.mulPose(Vector3f.XP.rotationDegrees(-90));
+	    	p_109347_.mulPose(Vector3f.YP.rotationDegrees(180));	
+	        if (flag)
+	        {
+	            vrarmrenderer.renderRightHand(p_109347_, pMatrixStack, pBuffer, abstractclientplayer);
+	        }
+	        else
+	        {
+	            vrarmrenderer.renderLeftHand(p_109347_, pMatrixStack, pBuffer, abstractclientplayer);
+	        }
+       p_109347_.popPose();
     }
 
     private void applyEatTransform(PoseStack p_109331_, float pMatrixStack, HumanoidArm pPartialTicks, ItemStack pHand)
@@ -304,6 +358,49 @@
         p_109336_.mulPose(Vector3f.YP.rotationDegrees((float)i * -45.0F));
     }
 
+    private void transformFirstPersonVR(PoseStack matrixStackIn, HumanoidArm hand, float swingProgress)
+    {
+        if (swingProgress != 0.0F)
+        {
+            switch (this.swingType)
+            {
+                case Attack:
+                    float f2 = Mth.sin((float)((double)(swingProgress * 3.0F) * Math.PI));
+
+                    if ((double)swingProgress > 0.5D)
+                    {
+                        f2 = Mth.sin((float)((double)swingProgress * Math.PI + Math.PI));
+                    }
+
+                    matrixStackIn.translate(0.0D, 0.0D, (double)0.2F);
+                    matrixStackIn.mulPose(Vector3f.XP.rotationDegrees(f2 * 30.0F));
+                    matrixStackIn.translate(0.0D, 0.0D, (double) - 0.2F);
+                    break;
+
+                case Interact:
+                    float f1 = Mth.sin((float)((double)(swingProgress * 3.0F) * Math.PI));
+
+                    if ((double)swingProgress > 0.5D)
+                    {
+                        f1 = Mth.sin((float)((double)swingProgress * Math.PI + Math.PI));
+                    }
+
+                    matrixStackIn.mulPose(Vector3f.ZP.rotationDegrees((float)(hand == HumanoidArm.RIGHT ? -1 : 1) * f1 * 45.0F));
+                    break;
+
+                case Use:
+                    float f = Mth.sin((float)((double)(swingProgress * 2.0F) * Math.PI));
+
+                    if ((double)swingProgress > 0.25D)
+                    {
+                        f = Mth.sin((float)((double)(swingProgress / 2.0F) * Math.PI + Math.PI));
+                    }
+
+                    matrixStackIn.translate(0.0D, 0.0D, (double)(-(1.0F + f) * 0.1F));
+            }
+        }
+    }
+
     private void applyItemArmTransform(PoseStack p_109383_, HumanoidArm pMatrixStack, float pHand)
     {
         int i = pMatrixStack == HumanoidArm.RIGHT ? 1 : -1;
@@ -380,188 +477,481 @@
         return p_172913_.is(Items.CROSSBOW) && CrossbowItem.isCharged(p_172913_);
     }
 
-    private void renderArmWithItem(AbstractClientPlayer p_109372_, float pPlayer, float pPartialTicks, InteractionHand pPitch, float pHand, ItemStack pSwingProgress, float pStack, PoseStack pEquippedProgress, MultiBufferSource pMatrixStack, int pBuffer)
+    void renderArmWithItem(AbstractClientPlayer p_109372_, float pPlayer, float pPartialTicks, InteractionHand pPitch, float pHand, ItemStack pSwingProgress, float pStack, PoseStack pEquippedProgress, MultiBufferSource pMatrixStack, int pBuffer)
     {
         if (!Config.isShaders() || !Shaders.isSkipRenderHand(pPitch))
         {
-            if (!p_109372_.isScoping())
+            boolean flag = pPitch == InteractionHand.MAIN_HAND;
+            HumanoidArm humanoidarm = flag ? p_109372_.getMainArm() : p_109372_.getMainArm().getOpposite();
+            pStack = this.getEquipProgress(pPitch, pPlayer);
+            pEquippedProgress.pushPose();
+            boolean flag1 = true;
+
+            if (this.minecraft.currentPass == RenderPass.THIRD && !this.minecraft.vrSettings.mixedRealityRenderHands)
             {
-                boolean flag = pPitch == InteractionHand.MAIN_HAND;
-                HumanoidArm humanoidarm = flag ? p_109372_.getMainArm() : p_109372_.getMainArm().getOpposite();
-                pEquippedProgress.pushPose();
+                flag1 = false;
+            }
+
+            if (this.minecraft.currentPass == RenderPass.CAMERA)
+            {
+                flag1 = false;
+            }
 
-                if (pSwingProgress.isEmpty())
+            if (BowTracker.isBow(pSwingProgress) && this.minecraft.bowTracker.isActive((LocalPlayer)p_109372_))
+            {
+                flag1 = false;
+            }
+
+            if (TelescopeTracker.isTelescope(pSwingProgress) && (pPitch == InteractionHand.OFF_HAND && this.minecraft.currentPass == RenderPass.SCOPEL || pPitch == InteractionHand.MAIN_HAND && this.minecraft.currentPass == RenderPass.SCOPER))
+            {
+                flag1 = false;
+            }
+
+            if (flag1 && !p_109372_.isInvisible())
+            {
+                this.renderPlayerArm(pEquippedProgress, pMatrixStack, pBuffer, pStack, pHand, humanoidarm);
+            }
+
+            if (!pSwingProgress.isEmpty())
+            {
+                Item item = pSwingProgress.getItem();
+                boolean flag2 = false;
+                VivecraftItemRendering vivecraftitemrendering = VivecraftItemRendering.Item;
+
+                if (pSwingProgress.getUseAnimation() != UseAnim.EAT && pSwingProgress.getUseAnimation() != UseAnim.DRINK)
                 {
-                    if (flag && !p_109372_.isInvisible())
+                    if (item instanceof BlockItem)
                     {
-                        this.renderPlayerArm(pEquippedProgress, pMatrixStack, pBuffer, pStack, pHand, humanoidarm);
+                        Block block = ((BlockItem)item).getBlock();
+
+                        if (block instanceof TorchBlock)
+                        {
+                            vivecraftitemrendering = VivecraftItemRendering.Block_Stick;
+                        }
+                        else
+                        {
+                            BakedModel bakedmodel = this.itemRenderer.getModel(pSwingProgress, this.minecraft.level, this.minecraft.player, 0);
+
+                            if (bakedmodel.isGui3d())
+                            {
+                                vivecraftitemrendering = VivecraftItemRendering.Block_3D;
+                            }
+                            else
+                            {
+                                vivecraftitemrendering = VivecraftItemRendering.Block_Item;
+                            }
+                        }
                     }
-                }
-                else if (pSwingProgress.getItem() instanceof MapItem)
-                {
-                    if (flag && this.offHandItem.isEmpty())
+                    else if (item instanceof MapItem)
                     {
-                        this.renderTwoHandedMap(pEquippedProgress, pMatrixStack, pBuffer, pPartialTicks, pStack, pHand);
+                        vivecraftitemrendering = VivecraftItemRendering.Map;
+                    }
+                    else if (pSwingProgress.getUseAnimation() == UseAnim.BOW)
+                    {
+                        vivecraftitemrendering = VivecraftItemRendering.Bow_Seated;
+
+                        if (this.minecraft.bowTracker.isActive((LocalPlayer)p_109372_))
+                        {
+                            if (this.minecraft.bowTracker.isDrawing)
+                            {
+                                vivecraftitemrendering = VivecraftItemRendering.Bow_Roomscale_Drawing;
+                            }
+                            else
+                            {
+                                vivecraftitemrendering = VivecraftItemRendering.Bow_Roomscale;
+                            }
+                        }
+                    }
+                    else if (item instanceof SwordItem)
+                    {
+                        vivecraftitemrendering = VivecraftItemRendering.Sword;
+                    }
+                    else if (item instanceof ShieldItem)
+                    {
+                        vivecraftitemrendering = VivecraftItemRendering.Shield;
+                    }
+                    else if (item instanceof TridentItem)
+                    {
+                        vivecraftitemrendering = VivecraftItemRendering.Spear;
+                    }
+                    else if (item instanceof CrossbowItem)
+                    {
+                        vivecraftitemrendering = VivecraftItemRendering.Crossbow;
+                    }
+                    else if (!(item instanceof CompassItem) && item != Items.CLOCK)
+                    {
+                        if (SwingTracker.isTool(item))
+                        {
+                            vivecraftitemrendering = VivecraftItemRendering.Tool;
+
+                            if (item instanceof FoodOnAStickItem || item instanceof FishingRodItem)
+                            {
+                                vivecraftitemrendering = VivecraftItemRendering.Tool_Rod;
+                            }
+                        }
+                        else if (TelescopeTracker.isTelescope(pSwingProgress))
+                        {
+                            vivecraftitemrendering = VivecraftItemRendering.Telescope;
+                        }
                     }
                     else
                     {
-                        this.renderOneHandedMap(pEquippedProgress, pMatrixStack, pBuffer, pStack, humanoidarm, pHand, pSwingProgress);
+                        vivecraftitemrendering = VivecraftItemRendering.Compass;
                     }
                 }
-                else if (pSwingProgress.is(Items.CROSSBOW))
+                else
                 {
-                    boolean flag2 = CrossbowItem.isCharged(pSwingProgress);
-                    boolean flag3 = humanoidarm == HumanoidArm.RIGHT;
-                    int l = flag3 ? 1 : -1;
+                    vivecraftitemrendering = VivecraftItemRendering.Noms;
+                }
+
+                int k = flag ? 1 : -1;
+                double d8 = 0.7D;
+                double d0 = -0.05D;
+                double d1 = 0.005D;
+                double d2 = 0.0D;
+                double d3 = this.minecraft.vr.getGunAngle();
+                Quaternion quaternion = Vector3f.YP.rotationDegrees(0.0F);
+                Quaternion quaternion1 = Vector3f.YP.rotationDegrees(0.0F);
+                quaternion.mul(Vector3f.XP.rotationDegrees((float)(-110.0D + d3)));
+                pEquippedProgress.pushPose();
+                boolean flag3 = false;
 
-                    if (p_109372_.isUsingItem() && p_109372_.getUseItemRemainingTicks() > 0 && p_109372_.getUsedItemHand() == pPitch)
+                if (vivecraftitemrendering == VivecraftItemRendering.Bow_Seated)
+                {
+                    d1 += -0.1D;
+                    d2 += 0.1D;
+                    quaternion.mul(Vector3f.XP.rotationDegrees((float)(90.0D - d3)));
+                    d8 = (double)0.7F;
+                }
+                else if (vivecraftitemrendering == VivecraftItemRendering.Bow_Roomscale)
+                {
+                    quaternion = Vector3f.XP.rotationDegrees(0.0F);
+                    pEquippedProgress.mulPose(Vector3f.XP.rotationDegrees((float)(-110.0D + d3)));
+                    d1 -= 0.25D;
+                    d2 += (double)0.025F + 0.03D * d3 / 40.0D;
+                    d0 += -0.0225D;
+                    d8 = 1.0D;
+                }
+                else if (vivecraftitemrendering == VivecraftItemRendering.Bow_Roomscale_Drawing)
+                {
+                    quaternion = Vector3f.YP.rotationDegrees(0.0F);
+                    d8 = 1.0D;
+                    int i = 0;
+
+                    if (this.minecraft.vrSettings.vrReverseShootingEye)
                     {
-                        this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                        pEquippedProgress.translate((double)((float)l * -0.4785682F), (double) - 0.094387F, (double)0.05731531F);
-                        pEquippedProgress.mulPose(Vector3f.XP.rotationDegrees(-11.935F));
-                        pEquippedProgress.mulPose(Vector3f.YP.rotationDegrees((float)l * 65.3F));
-                        pEquippedProgress.mulPose(Vector3f.ZP.rotationDegrees((float)l * -9.785F));
-                        float f10 = (float)pSwingProgress.getUseDuration() - ((float)this.minecraft.player.getUseItemRemainingTicks() - pPlayer + 1.0F);
-                        float f14 = f10 / (float)CrossbowItem.getChargeDuration(pSwingProgress);
+                        i = 1;
+                    }
 
-                        if (f14 > 1.0F)
-                        {
-                            f14 = 1.0F;
-                        }
+                    Vec3 vec3 = this.minecraft.bowTracker.getAimVector();
+                    Vec3 vec31 = new Vec3(vec3.x, vec3.y, vec3.z);
+                    Vec3 vec32 = this.minecraft.vrPlayer.vrdata_world_render.getHand(1).getCustomVector(new Vec3(0.0D, -1.0D, 0.0D));
+                    Vec3 vec33 = this.minecraft.vrPlayer.vrdata_world_render.getHand(1).getCustomVector(new Vec3(0.0D, 0.0D, -1.0D));
+                    vec31.cross(vec32);
+                    double d4 = (180D / Math.PI) * Math.acos(vec31.dot(vec32));
+                    float f = (float)Math.toDegrees(Math.asin(vec31.y / vec31.length()));
+                    float f1 = (float)Math.toDegrees(Math.atan2(vec31.x, vec31.z));
+                    Vec3 vec34 = new Vec3(0.0D, 1.0D, 0.0D);
+                    Vec3 vec35 = new Vec3(vec31.x, 0.0D, vec31.z);
+                    Vec3 vec36 = Vec3.ZERO;
+                    double d5 = vec33.dot(vec35);
 
-                        if (f14 > 0.1F)
-                        {
-                            float f17 = Mth.sin((f10 - 0.1F) * 1.3F);
-                            float f19 = f14 - 0.1F;
-                            float f20 = f17 * f19;
-                            pEquippedProgress.translate((double)(f20 * 0.0F), (double)(f20 * 0.004F), (double)(f20 * 0.0F));
-                        }
+                    if (d5 != 0.0D)
+                    {
+                        vec36 = vec35.scale(d5);
+                    }
+
+                    double d6 = 0.0D;
+                    Vec3 vec37 = vec33.subtract(vec36).normalize();
+                    d6 = vec37.dot(vec34);
+                    double d7 = vec35.dot(vec37.cross(vec34));
+                    float f2;
 
-                        pEquippedProgress.translate((double)(f14 * 0.0F), (double)(f14 * 0.0F), (double)(f14 * 0.04F));
-                        pEquippedProgress.scale(1.0F, 1.0F, 1.0F + f14 * 0.2F);
-                        pEquippedProgress.mulPose(Vector3f.YN.rotationDegrees((float)l * 45.0F));
+                    if (d7 < 0.0D)
+                    {
+                        f2 = -((float)Math.acos(d6));
                     }
                     else
                     {
-                        float f9 = -0.4F * Mth.sin(Mth.sqrt(pHand) * (float)Math.PI);
-                        float f13 = 0.2F * Mth.sin(Mth.sqrt(pHand) * ((float)Math.PI * 2F));
-                        float f16 = -0.2F * Mth.sin(pHand * (float)Math.PI);
-                        pEquippedProgress.translate((double)((float)l * f9), (double)f13, (double)f16);
-                        this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                        this.applyItemArmAttackTransform(pEquippedProgress, humanoidarm, pHand);
+                        f2 = (float)Math.acos(d6);
+                    }
 
-                        if (flag2 && pHand < 0.001F && flag)
-                        {
-                            pEquippedProgress.translate((double)((float)l * -0.641864F), 0.0D, 0.0D);
-                            pEquippedProgress.mulPose(Vector3f.YP.rotationDegrees((float)l * 10.0F));
-                        }
+                    float f3 = (float)((180D / Math.PI) * (double)f2);
+
+                    if (this.minecraft.bowTracker.isCharged())
+                    {
+                        long j = Util.getMillis() - this.minecraft.bowTracker.startDrawTime;
+                        d0 += 0.003D * Math.sin((double)j);
                     }
 
-                    this.renderItem(p_109372_, pSwingProgress, flag3 ? ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag3, pEquippedProgress, pMatrixStack, pBuffer);
+                    pEquippedProgress.translate(0.0D, 0.0D, 0.1D);
+                    pEquippedProgress.last().pose().multiply(this.minecraft.vrPlayer.vrdata_world_render.getController(1).getMatrix().transposed().toMCMatrix());
+                    quaternion.mul(Vector3f.YP.rotationDegrees(f1));
+                    quaternion.mul(Vector3f.XP.rotationDegrees(-f));
+                    quaternion.mul(Vector3f.ZP.rotationDegrees(-f3));
+                    quaternion.mul(Vector3f.ZP.rotationDegrees(180.0F));
+                    pEquippedProgress.last().pose().multiply(quaternion);
+                    quaternion = Vector3f.YP.rotationDegrees(0.0F);
+                    quaternion.mul(Vector3f.YP.rotationDegrees(180.0F));
+                    quaternion.mul(Vector3f.XP.rotationDegrees(160.0F));
+                    d1 += 0.1225D;
+                    d0 += 0.125D;
+                    d2 += 0.16D;
                 }
-                else
+                else if (vivecraftitemrendering == VivecraftItemRendering.Crossbow)
+                {
+                    d0 += (double)0.01F;
+                    d2 += (double) - 0.02F;
+                    d1 += (double) - 0.02F;
+                    d8 = 0.5D;
+                    quaternion = Vector3f.XP.rotationDegrees(0.0F);
+                    quaternion.mul(Vector3f.YP.rotationDegrees(10.0F));
+                }
+                else if (vivecraftitemrendering == VivecraftItemRendering.Map)
+                {
+                    flag2 = true;
+                    quaternion = Vector3f.XP.rotationDegrees(-45.0F);
+                    d0 = 0.0D;
+                    d1 = 0.16D;
+                    d2 = -0.075D;
+                    d8 = 0.75D;
+                }
+                else if (vivecraftitemrendering == VivecraftItemRendering.Noms)
                 {
-                    boolean flag1 = humanoidarm == HumanoidArm.RIGHT;
+                    long l = (long)this.minecraft.player.getUseItemRemainingTicks();
+                    quaternion = Vector3f.ZP.rotationDegrees(180.0F);
+                    quaternion.mul(Vector3f.XP.rotationDegrees(-135.0F));
+                    d2 = d2 + 0.006D * Math.sin((double)l);
+                    d2 = d2 + (double)0.02F;
+                    d0 += (double)0.08F;
+                    d8 = (double)0.4F;
+                }
+                else if (vivecraftitemrendering != VivecraftItemRendering.Item && vivecraftitemrendering != VivecraftItemRendering.Block_Item)
+                {
+                    if (vivecraftitemrendering == VivecraftItemRendering.Compass)
+                    {
+                        quaternion = Vector3f.YP.rotationDegrees(90.0F);
+                        quaternion.mul(Vector3f.XP.rotationDegrees(25.0F));
+                        d8 = (double)0.4F;
+                    }
+                    else if (vivecraftitemrendering == VivecraftItemRendering.Block_3D)
+                    {
+                        d8 = (double)0.3F;
+                        d2 += (double) - 0.1F;
+                        d0 += (double)0.05F;
+                    }
+                    else if (vivecraftitemrendering == VivecraftItemRendering.Block_Stick)
+                    {
+                        quaternion = Vector3f.XP.rotationDegrees(0.0F);
+                        d1 += -0.105D + 0.06D * d3 / 40.0D;
+                        d2 += (double) - 0.1F;
+                        quaternion.mul(Vector3f.XP.rotationDegrees(-45.0F));
+                        quaternion.mul(Vector3f.XP.rotationDegrees((float)d3));
+                    }
+                    else if (vivecraftitemrendering == VivecraftItemRendering.Shield)
+                    {
+                        flag3 = !flag;
+                        d8 = (double)0.4F;
+                        d1 += (double)0.21F;
+
+                        if (flag)
+                        {
+                            d0 += (double)0.11F;
+                        }
+                        else
+                        {
+                            d0 += -0.015D;
+                        }
 
-                    if (p_109372_.isUsingItem() && p_109372_.getUseItemRemainingTicks() > 0 && p_109372_.getUsedItemHand() == pPitch)
+                        d2 += (double) - 0.01F;
+                        quaternion.mul(Vector3f.XP.rotationDegrees((float)(105.0D - d3)));
+
+                        if (p_109372_.isUsingItem() && p_109372_.getUseItemRemainingTicks() > 0 && p_109372_.getUsedItemHand() == pPitch)
+                        {
+                            quaternion.mul(Vector3f.ZP.rotationDegrees((float)(k * -5)));
+                            d1 += (double) - 0.13F;
+                            d0 += (double)((float)k * 0.05F);
+                            d2 += (double) - 0.1F;
+
+                            if (p_109372_.isBlocking())
+                            {
+                                quaternion.mul(Vector3f.YP.rotationDegrees((float)k * 90.0F));
+                            }
+                            else
+                            {
+                                quaternion.mul(Vector3f.YP.rotationDegrees((1.0F - pStack) * (float)k * 90.0F));
+                            }
+                        }
+
+                        quaternion.mul(Vector3f.YP.rotationDegrees((float)k * -90.0F));
+                    }
+                    else if (vivecraftitemrendering == VivecraftItemRendering.Spear)
                     {
-                        int k = flag1 ? 1 : -1;
+                        quaternion = Vector3f.XP.rotationDegrees(0.0F);
+                        d0 += (double) - 0.135F;
+                        d2 = d2 + (double)0.575F;
+                        d8 = (double)0.6F;
+                        float f4 = 0.0F;
+                        boolean flag5 = false;
+                        int i1 = 0;
 
-                        switch (pSwingProgress.getUseAnimation())
+                        if (p_109372_.isUsingItem() && p_109372_.getUseItemRemainingTicks() > 0 && p_109372_.getUsedItemHand() == pPitch)
                         {
-                            case NONE:
-                                this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                                break;
-
-                            case EAT:
-                            case DRINK:
-                                this.applyEatTransform(pEquippedProgress, pPlayer, humanoidarm, pSwingProgress);
-                                this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                                break;
-
-                            case BLOCK:
-                                this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                                break;
-
-                            case BOW:
-                                this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                                pEquippedProgress.translate((double)((float)k * -0.2785682F), (double)0.18344387F, (double)0.15731531F);
-                                pEquippedProgress.mulPose(Vector3f.XP.rotationDegrees(-13.935F));
-                                pEquippedProgress.mulPose(Vector3f.YP.rotationDegrees((float)k * 35.3F));
-                                pEquippedProgress.mulPose(Vector3f.ZP.rotationDegrees((float)k * -9.785F));
-                                float f7 = (float)pSwingProgress.getUseDuration() - ((float)this.minecraft.player.getUseItemRemainingTicks() - pPlayer + 1.0F);
-                                float f8 = f7 / 20.0F;
-                                f8 = (f8 * f8 + f8 * 2.0F) / 3.0F;
+                            flag5 = true;
+                            i1 = EnchantmentHelper.getRiptide(pSwingProgress);
 
-                                if (f8 > 1.0F)
-                                {
-                                    f8 = 1.0F;
-                                }
+                            if (i1 <= 0 || i1 > 0 && p_109372_.isInWaterOrRain())
+                            {
+                                f4 = (float)pSwingProgress.getUseDuration() - ((float)this.minecraft.player.getUseItemRemainingTicks() - pPlayer + 1.0F);
 
-                                if (f8 > 0.1F)
+                                if (f4 > 10.0F)
                                 {
-                                    float f12 = Mth.sin((f7 - 0.1F) * 1.3F);
-                                    float f15 = f8 - 0.1F;
-                                    float f18 = f12 * f15;
-                                    pEquippedProgress.translate((double)(f18 * 0.0F), (double)(f18 * 0.004F), (double)(f18 * 0.0F));
-                                }
+                                    f4 = 10.0F;
 
-                                pEquippedProgress.translate((double)(f8 * 0.0F), (double)(f8 * 0.0F), (double)(f8 * 0.04F));
-                                pEquippedProgress.scale(1.0F, 1.0F, 1.0F + f8 * 0.2F);
-                                pEquippedProgress.mulPose(Vector3f.YN.rotationDegrees((float)k * 45.0F));
-                                break;
-
-                            case SPEAR:
-                                this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                                pEquippedProgress.translate((double)((float)k * -0.5F), (double)0.7F, (double)0.1F);
-                                pEquippedProgress.mulPose(Vector3f.XP.rotationDegrees(-55.0F));
-                                pEquippedProgress.mulPose(Vector3f.YP.rotationDegrees((float)k * 35.3F));
-                                pEquippedProgress.mulPose(Vector3f.ZP.rotationDegrees((float)k * -9.785F));
-                                float f11 = (float)pSwingProgress.getUseDuration() - ((float)this.minecraft.player.getUseItemRemainingTicks() - pPlayer + 1.0F);
-                                float f2 = f11 / 10.0F;
+                                    if (i1 > 0 && p_109372_.isInWaterOrRain())
+                                    {
+                                        pEquippedProgress.mulPose(Vector3f.ZP.rotationDegrees((float)(-this.minecraft.tickCounter * 10 * i1 % 360) - pPlayer * 10.0F * (float)i1));
+                                    }
+
+                                    if (this.minecraft.frameIndex % 4L == 0L)
+                                    {
+                                        this.minecraft.vr.triggerHapticPulse(flag ? 0 : 1, 200);
+                                    }
 
-                                if (f2 > 1.0F)
-                                {
-                                    f2 = 1.0F;
+                                    long j1 = Util.getMillis() - this.minecraft.bowTracker.startDrawTime;
+                                    d0 += 0.003D * Math.sin((double)j1);
                                 }
+                            }
+                        }
+
+                        if (p_109372_.isAutoSpinAttack())
+                        {
+                            i1 = 5;
+                            d2 += (double) - 0.15F;
+                            pEquippedProgress.mulPose(Vector3f.ZP.rotationDegrees((float)(-this.minecraft.tickCounter * 10 * i1 % 360) - pPlayer * 10.0F * (float)i1));
+                            flag5 = true;
+                        }
+
+                        if (!flag5)
+                        {
+                            d1 += 0.0D + 0.2D * d3 / 40.0D;
+                            quaternion.mul(Vector3f.XP.rotationDegrees((float)d3));
+                        }
+
+                        quaternion.mul(Vector3f.XP.rotationDegrees(-65.0F));
+                        d2 = d2 + (double)(-0.75F + f4 / 10.0F * 0.25F);
+                    }
+                    else if (vivecraftitemrendering != VivecraftItemRendering.Sword)
+                    {
+                        if (vivecraftitemrendering == VivecraftItemRendering.Tool_Rod)
+                        {
+                            d2 += (double) - 0.15F;
+                            d1 += -0.02D + d3 / 40.0D * 0.1D;
+                            d0 += (double)0.05F;
+                            quaternion.mul(Vector3f.XP.rotationDegrees(40.0F));
+                            d8 = (double)0.8F;
+                        }
+                        else if (vivecraftitemrendering == VivecraftItemRendering.Tool)
+                        {
+                            boolean flag4 = this.minecraft.climbTracker.isClaws(pSwingProgress) && this.minecraft.climbTracker.isClimbeyClimb();
+
+                            if (flag4)
+                            {
+                                quaternion.mul(Vector3f.XP.rotationDegrees((float)(-d3)));
+                                d8 = (double)0.3F;
+                                d2 += (double)0.075F;
+                                d1 += (double)0.02F;
+                                d0 += (double)0.03F;
 
-                                if (f2 > 0.1F)
+                                if (this.minecraft.vr.keyClimbeyGrab.isKeyDown(ControllerType.RIGHT) && flag || this.minecraft.vr.keyClimbeyGrab.isKeyDown(ControllerType.LEFT) && !flag)
                                 {
-                                    float f3 = Mth.sin((f11 - 0.1F) * 1.3F);
-                                    float f4 = f2 - 0.1F;
-                                    float f5 = f3 * f4;
-                                    pEquippedProgress.translate((double)(f5 * 0.0F), (double)(f5 * 0.004F), (double)(f5 * 0.0F));
+                                    d2 += (double) - 0.2F;
                                 }
+                            }
 
-                                pEquippedProgress.translate(0.0D, 0.0D, (double)(f2 * 0.2F));
-                                pEquippedProgress.scale(1.0F, 1.0F, 1.0F + f2 * 0.2F);
-                                pEquippedProgress.mulPose(Vector3f.YN.rotationDegrees((float)k * 45.0F));
+                            if (item instanceof ArrowItem)
+                            {
+                                quaternion1 = Vector3f.ZP.rotationDegrees(-180.0F);
+                                quaternion.mul(Vector3f.XP.rotationDegrees((float)(-d3)));
+                            }
+                        }
+                        else if (vivecraftitemrendering == VivecraftItemRendering.Telescope)
+                        {
+                            quaternion1 = Vector3f.XP.rotationDegrees(0.0F);
+                            quaternion = Vector3f.XP.rotationDegrees(0.0F);
+                            d2 = 0.0D;
+                            d1 = 0.0D;
+                            d0 = 0.0D;
                         }
                     }
-                    else if (p_109372_.isAutoSpinAttack())
-                    {
-                        this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                        int i = flag1 ? 1 : -1;
-                        pEquippedProgress.translate((double)((float)i * -0.4F), (double)0.8F, (double)0.3F);
-                        pEquippedProgress.mulPose(Vector3f.YP.rotationDegrees((float)i * 65.0F));
-                        pEquippedProgress.mulPose(Vector3f.ZP.rotationDegrees((float)i * -85.0F));
-                    }
-                    else
+                }
+                else
+                {
+                    quaternion = Vector3f.ZP.rotationDegrees(180.0F);
+                    quaternion.mul(Vector3f.XP.rotationDegrees(-135.0F));
+                    d8 = (double)0.4F;
+                    d0 += (double)0.08F;
+                    d2 += (double) - 0.08F;
+                }
+
+                if (p_109372_.swingingArm == pPitch)
+                {
+                    this.transformFirstPersonVR(pEquippedProgress, humanoidarm, pHand);
+                }
+
+                ItemRenderer itemrenderer = this.itemRenderer;
+                ItemRenderer.isfphand = true;
+                ItemTransforms.TransformType itemtransforms$transformtype = flag ? ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : (flag3 ? ItemTransforms.TransformType.FIRST_PERSON_LEFT_HAND : ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND);
+
+                if (pSwingProgress.hasTag() && pSwingProgress.getTag().getInt("CustomModelData") > 0)
+                {
+                    itemtransforms$transformtype = ItemTransforms.TransformType.THIRD_PERSON_RIGHT_HAND;
+                    pEquippedProgress.scale(0.7F, 0.7F, 0.7F);
+                }
+                else
+                {
+                    pEquippedProgress.mulPose(quaternion1);
+                    pEquippedProgress.translate(d0, d1, d2);
+                    pEquippedProgress.mulPose(quaternion);
+                    pEquippedProgress.scale((float)d8, (float)d8, (float)d8);
+                }
+
+                if (flag2)
+                {
+                    RenderSystem.disableCull();
+                    this.renderMap(pEquippedProgress, pMatrixStack, pBuffer, pSwingProgress);
+                }
+                else if (vivecraftitemrendering == VivecraftItemRendering.Telescope)
+                {
+                    if (this.minecraft.currentPass != RenderPass.SCOPEL && this.minecraft.currentPass != RenderPass.SCOPER)
                     {
-                        float f6 = -0.4F * Mth.sin(Mth.sqrt(pHand) * (float)Math.PI);
-                        float f = 0.2F * Mth.sin(Mth.sqrt(pHand) * ((float)Math.PI * 2F));
-                        float f1 = -0.2F * Mth.sin(pHand * (float)Math.PI);
-                        int j = flag1 ? 1 : -1;
-                        pEquippedProgress.translate((double)((float)j * f6), (double)f, (double)f1);
-                        this.applyItemArmTransform(pEquippedProgress, humanoidarm, pStack);
-                        this.applyItemArmAttackTransform(pEquippedProgress, humanoidarm, pHand);
+                        pEquippedProgress.pushPose();
+                        pEquippedProgress.translate((double) - 0.1325F, 0.25D, (double)0.08F);
+                        pEquippedProgress.mulPose(Vector3f.XP.rotationDegrees(180.0F));
+                        pEquippedProgress.scale(0.25F, 1.5F, 0.25F);
+                        this.minecraft.getBlockRenderer().getModelRenderer().renderModel(pEquippedProgress.last(), pMatrixStack.getBuffer(Sheets.solidBlockSheet()), (BlockState)null, this.minecraft.getModelManager().getModel(TelescopeTracker.scopeModel), 0.5F, 0.5F, 1.0F, pBuffer, OverlayTexture.NO_OVERLAY);
+                        pEquippedProgress.popPose();
                     }
 
-                    this.renderItem(p_109372_, pSwingProgress, flag1 ? ItemTransforms.TransformType.FIRST_PERSON_RIGHT_HAND : ItemTransforms.TransformType.FIRST_PERSON_LEFT_HAND, !flag1, pEquippedProgress, pMatrixStack, pBuffer);
+                    pEquippedProgress.pushPose();
+                    pEquippedProgress.translate(0.0D, (double)0.2501F, (double) - 0.053F);
+                    pEquippedProgress.mulPose(Vector3f.XP.rotationDegrees(90.0F));
+                    pEquippedProgress.mulPose(Vector3f.YP.rotationDegrees(180.0F));
+                    pEquippedProgress.mulPose(Vector3f.ZP.rotationDegrees(180.0F));
+                    this.minecraft.gameRenderer.DrawScopeFB(pEquippedProgress, pPitch == InteractionHand.MAIN_HAND ? 0 : 1);
+                    pEquippedProgress.popPose();
+                }
+                else
+                {
+                    this.renderItem(p_109372_, pSwingProgress, itemtransforms$transformtype, flag3, pEquippedProgress, pMatrixStack, pBuffer);
                 }
 
+                itemrenderer = this.itemRenderer;
+                ItemRenderer.isfphand = false;
                 pEquippedProgress.popPose();
             }
+
+            pEquippedProgress.popPose();
         }
     }
 
@@ -671,4 +1061,41 @@
             return p_172932_ == InteractionHand.MAIN_HAND ? RENDER_MAIN_HAND_ONLY : RENDER_OFF_HAND_ONLY;
         }
     }
+
+    public float getEquipProgress(InteractionHand hand, float partialTicks)
+    {
+        return hand == InteractionHand.MAIN_HAND ? 1.0F - (this.oMainHandHeight + (this.mainHandHeight - this.oMainHandHeight) * partialTicks) : 1.0F - (this.oOffHandHeight + (this.offHandHeight - this.oOffHandHeight) * partialTicks);
+    }
+
+    public boolean isInsideOpaqueBlock(Vec3 in)
+    {
+        if (this.minecraft.level == null)
+        {
+            return false;
+        }
+        else
+        {
+            BlockPos blockpos = new BlockPos(in);
+            return this.minecraft.level.getBlockState(blockpos).isSolidRender(this.minecraft.level, blockpos);
+        }
+    }
+
+    @Nullable
+    public Triple<Float, BlockState, BlockPos> getNearOpaqueBlock(Vec3 in, double dist)
+    {
+        if (this.minecraft.level == null)
+        {
+            return null;
+        }
+        else
+        {
+            AABB aabb = new AABB(in.subtract(dist, dist, dist), in.add(dist, dist, dist));
+            Stream<BlockPos> stream = BlockPos.betweenClosedStream(aabb).filter((bp) ->
+            {
+                return this.minecraft.level.getBlockState(bp).isViewBlocking(this.minecraft.level, bp);
+            });
+            Optional<BlockPos> optional = stream.findFirst();
+            return optional.isPresent() ? Triple.of(1.0F, this.minecraft.level.getBlockState(optional.get()), optional.get()) : null;
+        }
+    }
 }
