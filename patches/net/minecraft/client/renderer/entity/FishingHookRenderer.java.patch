--- a/net/minecraft/client/renderer/entity/FishingHookRenderer.java
+++ b/net/minecraft/client/renderer/entity/FishingHookRenderer.java
@@ -14,8 +14,8 @@
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.FishingHook;
+import net.minecraft.world.item.FishingRodItem;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
 import net.minecraft.world.phys.Vec3;
 
 public class FishingHookRenderer extends EntityRenderer<FishingHook>
@@ -51,7 +51,7 @@
             int i = player.getMainArm() == HumanoidArm.RIGHT ? 1 : -1;
             ItemStack itemstack = player.getMainHandItem();
 
-            if (itemstack.getItem() != Items.FISHING_ROD)
+            if (!(itemstack.getItem() instanceof FishingRodItem))
             {
                 i = -i;
             }
@@ -81,6 +81,19 @@
                 d5 = Mth.lerp((double)p_114707_, player.yo, player.getY()) + vec3.y;
                 d6 = Mth.lerp((double)p_114707_, player.zo, player.getZ()) + vec3.z;
                 f3 = player.getEyeHeight();
+                int j = 1;
+
+                if (player.getMainHandItem().getItem() instanceof FishingRodItem)
+                {
+                    j = 0;
+                }
+
+                Vec3 vec31 = Minecraft.getInstance().gameRenderer.getControllerRenderPos(j);
+                Vec3 vec32 = Minecraft.getInstance().vrPlayer.vrdata_world_render.getHand(j).getDirection();
+                d4 = vec31.x + vec32.x * (double)0.47F;
+                d5 = vec31.y + vec32.y * (double)0.47F;
+                d6 = vec31.z + vec32.z * (double)0.47F;
+                f3 = 0.0F;
             }
             else
             {
@@ -90,20 +103,20 @@
                 f3 = player.isCrouching() ? -0.1875F : 0.0F;
             }
 
-            double d9 = Mth.lerp((double)p_114707_, p_114705_.xo, p_114705_.getX());
-            double d10 = Mth.lerp((double)p_114707_, p_114705_.yo, p_114705_.getY()) + 0.25D;
-            double d8 = Mth.lerp((double)p_114707_, p_114705_.zo, p_114705_.getZ());
-            float f4 = (float)(d4 - d9);
-            float f5 = (float)(d5 - d10) + f3;
-            float f6 = (float)(d6 - d8);
+            double d8 = Mth.lerp((double)p_114707_, p_114705_.xo, p_114705_.getX());
+            double d9 = Mth.lerp((double)p_114707_, p_114705_.yo, p_114705_.getY()) + 0.25D;
+            double d10 = Mth.lerp((double)p_114707_, p_114705_.zo, p_114705_.getZ());
+            float f4 = (float)(d4 - d8);
+            float f5 = (float)(d5 - d9) + f3;
+            float f6 = (float)(d6 - d10);
             VertexConsumer vertexconsumer1 = p_114709_.getBuffer(RenderType.lines());
             Matrix4f matrix4f1 = p_114708_.last().pose();
-            int j = 16;
+            int k = 16;
 
-            for (int k = 0; k < 16; ++k)
+            for (int l = 0; l < 16; ++l)
             {
-                stringVertex(f4, f5, f6, vertexconsumer1, matrix4f1, fraction(k, 16));
-                stringVertex(f4, f5, f6, vertexconsumer1, matrix4f1, fraction(k + 1, 16));
+                stringVertex(f4, f5, f6, vertexconsumer1, matrix4f1, fraction(l, 16));
+                stringVertex(f4, f5, f6, vertexconsumer1, matrix4f1, fraction(l + 1, 16));
             }
 
             p_114708_.popPose();
