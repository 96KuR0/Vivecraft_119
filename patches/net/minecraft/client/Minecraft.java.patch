--- a/net/minecraft/client/Minecraft.java
+++ b/net/minecraft/client/Minecraft.java
@@ -14,7 +14,10 @@
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.blaze3d.pipeline.RenderTarget;
 import com.mojang.blaze3d.platform.DisplayData;
+import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.platform.GlUtil;
+import com.mojang.blaze3d.platform.Lighting;
+import com.mojang.blaze3d.platform.MemoryTracker;
 import com.mojang.blaze3d.platform.Window;
 import com.mojang.blaze3d.platform.WindowEventHandler;
 import com.mojang.blaze3d.systems.RenderSystem;
@@ -30,17 +33,29 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.net.Proxy;
 import java.net.SocketAddress;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.nio.Buffer;
 import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.text.SimpleDateFormat;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
+import java.util.Deque;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Queue;
+import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
@@ -132,6 +147,7 @@
 import net.minecraft.client.searchtree.SearchRegistry;
 import net.minecraft.client.server.IntegratedServer;
 import net.minecraft.client.sounds.MusicManager;
+import net.minecraft.client.sounds.SoundEngine;
 import net.minecraft.client.sounds.SoundManager;
 import net.minecraft.client.tutorial.Tutorial;
 import net.minecraft.commands.Commands;
@@ -217,6 +233,7 @@
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.RenderShape;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
@@ -229,12 +246,115 @@
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
+import net.minecraft.world.phys.Vec3;
+import net.optifine.Config;
+import net.optifine.reflect.Reflector;
+import net.optifine.shaders.Shaders;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.lwjgl.opengl.ARBShaderObjects;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+import org.vivecraft.api.ErrorHelper;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.gameplay.VRPlayer;
+import org.vivecraft.gameplay.screenhandlers.GuiHandler;
+import org.vivecraft.gameplay.screenhandlers.RadialHandler;
+import org.vivecraft.gameplay.trackers.BackpackTracker;
+import org.vivecraft.gameplay.trackers.BowTracker;
+import org.vivecraft.gameplay.trackers.CameraTracker;
+import org.vivecraft.gameplay.trackers.ClimbTracker;
+import org.vivecraft.gameplay.trackers.CrawlTracker;
+import org.vivecraft.gameplay.trackers.EatingTracker;
+import org.vivecraft.gameplay.trackers.HorseTracker;
+import org.vivecraft.gameplay.trackers.InteractTracker;
+import org.vivecraft.gameplay.trackers.JumpTracker;
+import org.vivecraft.gameplay.trackers.RowTracker;
+import org.vivecraft.gameplay.trackers.RunTracker;
+import org.vivecraft.gameplay.trackers.SneakTracker;
+import org.vivecraft.gameplay.trackers.SwimTracker;
+import org.vivecraft.gameplay.trackers.SwingTracker;
+import org.vivecraft.gameplay.trackers.TeleportTracker;
+import org.vivecraft.gameplay.trackers.TelescopeTracker;
+import org.vivecraft.gameplay.trackers.VehicleTracker;
+import org.vivecraft.gui.physical.PhysicalGuiManager;
+import org.vivecraft.menuworlds.MenuWorldRenderer;
+import org.vivecraft.provider.MCVR;
+import org.vivecraft.provider.VRRenderer;
+import org.vivecraft.provider.openvr_jna.MCOpenVR;
+import org.vivecraft.provider.openvr_jna.OpenVRStereoRenderer;
+import org.vivecraft.provider.openvr_jna.VRInputAction;
+import org.vivecraft.provider.ovr_lwjgl.MC_OVR;
+import org.vivecraft.provider.ovr_lwjgl.OVR_StereoRenderer;
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.render.RenderConfigException;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.VRFirstPersonArmSwing;
+import org.vivecraft.render.VRShaders;
+import org.vivecraft.settings.VRHotkeys;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.LangHelper;
+import org.vivecraft.utils.Utils;
+import org.vivecraft.utils.lwjgl.Matrix4f;
+import org.vivecraft.utils.math.Vector3;
 
 public class Minecraft extends ReentrantBlockableEventLoop<Runnable> implements SnooperPopulator, WindowEventHandler
 {
     private static Minecraft instance;
+    public VRPlayer vrPlayer;
+    public MCVR vr;
+    public VRRenderer vrRenderer;
+    public BackpackTracker backpackTracker = new BackpackTracker(this);
+    public BowTracker bowTracker = new BowTracker(this);
+    public SwimTracker swimTracker = new SwimTracker(this);
+    public EatingTracker autoFood = new EatingTracker(this);
+    public JumpTracker jumpTracker = new JumpTracker(this);
+    public SneakTracker sneakTracker = new SneakTracker(this);
+    public ClimbTracker climbTracker = new ClimbTracker(this);
+    public RunTracker runTracker = new RunTracker(this);
+    public RowTracker rowTracker = new RowTracker(this);
+    public TeleportTracker teleportTracker = new TeleportTracker(this);
+    public SwingTracker swingTracker = new SwingTracker(this);
+    public HorseTracker horseTracker = new HorseTracker(this);
+    public VehicleTracker vehicleTracker = new VehicleTracker(this);
+    public PhysicalGuiManager physicalGuiManager = new PhysicalGuiManager(this);
+    public InteractTracker interactTracker = new InteractTracker(this);
+    public CrawlTracker crawlTracker = new CrawlTracker(this);
+    public CameraTracker cameraTracker = new CameraTracker(this);
+    public ThreadGroup backgroundThreadGroup = new ThreadGroup("background");
+    public final float PIOVER180 = ((float)Math.PI / 180F);
+    private boolean oculus = false;
+    public int lastShaderIndex = -1;
+    public Field fieldHwnd = null;
+    public Field fieldDisplay = null;
+    public Field fieldWindow = null;
+    public Field fieldResized = null;
+    public Method fieldResizedMethod = null;
+    public VRSettings vrSettings;
+    public long lastIntegratedServerLaunchCheck = 0L;
+    public boolean integratedServerLaunchInProgress = false;
+    public boolean grabScreenShot = false;
+    public boolean lastShowMouseNative = true;
+    public boolean enableWorldExport = false;
+    public SoundEngine sndManager = null;
+    public MenuWorldRenderer menuWorldRenderer;
+    private FloatBuffer matrixBuffer = MemoryTracker.createFloatBuffer(16);
+    private FloatBuffer matrixBuffer2 = MemoryTracker.createFloatBuffer(16);
+    private boolean firstInit = true;
+    public boolean showSplashScreen = true;
+    public long splashTimer1 = 0L;
+    public long splashTimer2 = 0L;
+    private RenderTarget splash;
+    private float splashFadeAlpha = 0.0F;
+    public Deque<Long> runTickTimeNanos = new ArrayDeque<>();
+    public long medianRunTickTimeNanos = 0L;
+    public long frameIndex = 0L;
+    public ErrorHelper errorHelper;
+    public RenderPass currentPass;
+    private boolean lastClick;
+    public boolean resourcePacksChanged;
+    public int tickCounter;
+    public final String minecriftVerString = "Vivecraft 1.16.5 jrbudda-7-5";
     private static final Logger LOGGER = LogManager.getLogger();
     public static final boolean ON_OSX = Util.getPlatform() == Util.OS.OSX;
     public static final ResourceLocation DEFAULT_FONT = new ResourceLocation("default");
@@ -263,7 +383,7 @@
     public final DebugRenderer debugRenderer;
     private final AtomicReference<StoringChunkProgressListener> progressListener = new AtomicReference<>();
     public final Gui gui;
-    public final Options options;
+    public Options options;
     private final HotbarManager hotbarManager;
     public final MouseHandler mouseHandler;
     public final KeyboardHandler keyboardHandler;
@@ -283,7 +403,7 @@
     private final LanguageManager languageManager;
     private final BlockColors blockColors;
     private final ItemColors itemColors;
-    private final RenderTarget mainRenderTarget;
+    public RenderTarget mainRenderTarget;
     private final SoundManager soundManager;
     private final MusicManager musicManager;
     private final FontManager fontManager;
@@ -357,11 +477,20 @@
     @Nullable
     private ProfileResults fpsPieResults;
     private String debugPath = "root";
+    private float fov = 1.0F;
+    public float watereffect;
+    public float portaleffect;
+    public float pumpkineffect;
+    long mirroNotifyStart;
+    String mirrorNotifyText;
+    boolean mirrorNotifyClear;
+    long mirroNotifyLen;
 
     public Minecraft(GameConfig p_91084_)
     {
         super("Client");
         instance = this;
+        Reflector.call(Reflector.ForgeHooksClient_invalidateLog4jThreadCache);
         this.gameDirectory = p_91084_.location.gameDirectory;
         File file1 = p_91084_.location.assetDirectory;
         this.resourcePackDirectory = p_91084_.location.resourcePackDirectory;
@@ -375,8 +504,6 @@
         this.minecraftSessionService = yggdrasilauthenticationservice.createMinecraftSessionService();
         this.socialInteractionsService = this.createSocialInteractions(yggdrasilauthenticationservice, p_91084_);
         this.user = p_91084_.user.user;
-        LOGGER.info("Setting user: {}", (Object)this.user.getName());
-        LOGGER.debug("(Session ID is {})", (Object)this.user.getSessionId());
         this.demo = p_91084_.game.demo;
         this.allowsMultiplayer = !p_91084_.game.disableMultiplayer;
         this.allowsChat = !p_91084_.game.disableChat;
@@ -400,6 +527,25 @@
         this.fixerUpper = DataFixers.getDataFixer();
         this.toast = new ToastComponent(this);
         this.tutorial = new Tutorial(this);
+
+        if (!this.oculus)
+        {
+            this.vr = new MCOpenVR(this);
+        }
+        else
+        {
+            this.vr = new MC_OVR(this);
+        }
+
+        VRSettings.initSettings(this, this.gameDirectory);
+
+        if (!this.vrSettings.badStereoProviderPluginID.isEmpty())
+        {
+            this.vrSettings.stereoProviderPluginID = this.vrSettings.badStereoProviderPluginID;
+            this.vrSettings.badStereoProviderPluginID = "";
+            this.vrSettings.saveOptions();
+        }
+
         this.gameThread = Thread.currentThread();
         this.options = new Options(this, this.gameDirectory);
         this.hotbarManager = new HotbarManager(this.gameDirectory, this.fixerUpper);
@@ -433,13 +579,13 @@
 
         this.window.setFramerateLimit(this.options.framerateLimit);
         this.mouseHandler = new MouseHandler(this);
-        this.mouseHandler.setup(this.window.getWindow());
         this.keyboardHandler = new KeyboardHandler(this);
         this.keyboardHandler.setup(this.window.getWindow());
         RenderSystem.initRenderer(this.options.glDebugVerbosity, false);
-        this.mainRenderTarget = new RenderTarget(this.window.getWidth(), this.window.getHeight(), true, ON_OSX);
+        this.mainRenderTarget = new RenderTarget(this.window.getScreenWidth(), this.window.getScreenHeight(), true, ON_OSX);
         this.mainRenderTarget.setClearColor(0.0F, 0.0F, 0.0F, 0.0F);
         this.resourceManager = new SimpleReloadableResourceManager(PackType.CLIENT_RESOURCES);
+        Reflector.call(Reflector.ClientModLoader_begin, this, this.resourcePackRepository, this.resourceManager, this.clientPackSource);
         this.resourcePackRepository.reload();
         this.options.loadSelectedResourcePacks(this.resourcePackRepository);
         this.languageManager = new LanguageManager(this.options.languageCode);
@@ -457,6 +603,16 @@
         this.font = this.fontManager.createFont();
         this.resourceManager.registerReloadListener(this.fontManager.getReloadListener());
         this.selectMainFont(this.isEnforceUnicode());
+
+        try
+        {
+            this.initMinecrift();
+        }
+        catch (Exception exception)
+        {
+            exception.printStackTrace();
+        }
+
         this.resourceManager.registerReloadListener(new GrassColorReloadListener());
         this.resourceManager.registerReloadListener(new FoliageColorReloadListener());
         this.window.setErrorSection("Startup");
@@ -481,6 +637,7 @@
         this.createSearchTrees();
         this.resourceManager.registerReloadListener(this.searchRegistry);
         this.particleEngine = new ParticleEngine(this.level, this.textureManager);
+        Reflector.call(Reflector.call(Reflector.fml_ModLoader_get), Reflector.fml_ModLoader_postEvent, Reflector.newInstance(Reflector.ParticleFactoryRegisterEvent_Constructor));
         this.resourceManager.registerReloadListener(this.particleEngine);
         this.paintingTextures = new PaintingTextureManager(this.textureManager);
         this.resourceManager.registerReloadListener(this.paintingTextures);
@@ -488,7 +645,17 @@
         this.resourceManager.registerReloadListener(this.mobEffectTextures);
         this.gpuWarnlistManager = new GpuWarnlistManager();
         this.resourceManager.registerReloadListener(this.gpuWarnlistManager);
-        this.gui = new Gui(this);
+
+        if (Reflector.ForgeIngameGui_Constructor.exists())
+        {
+            this.gui = (Gui)Reflector.newInstance(Reflector.ForgeIngameGui_Constructor, this);
+        }
+        else
+        {
+            this.gui = new Gui(this);
+        }
+
+        this.mouseHandler.setup(this.window.getWindow());
         this.debugRenderer = new DebugRenderer(this);
         RenderSystem.setErrorCallback(this::onFullscreenError);
 
@@ -502,25 +669,36 @@
         this.window.updateRawMouseInput(this.options.rawMouseInput);
         this.window.setDefaultErrorCallback();
         this.resizeDisplay();
-
-        if (s != null)
-        {
-            this.setScreen(new ConnectScreen(new TitleScreen(), this, s, i));
-        }
-        else
-        {
-            this.setScreen(new TitleScreen(true));
-        }
-
+        this.menuWorldRenderer = new MenuWorldRenderer();
+        this.vrSettings.firstRun = false;
+        this.vrSettings.saveOptions();
         LoadingOverlay.registerTextures(this);
         List<PackResources> list = this.resourcePackRepository.openAllSelected();
-        this.setOverlay(new LoadingOverlay(this, this.resourceManager.createFullReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list), (p_91245_) ->
+        this.setOverlay(new LoadingOverlay(this, this.resourceManager.createFullReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list), (throwable) ->
         {
-            Util.ifElse(p_91245_, this::rollbackResourcePacks, () -> {
+            if (this.vrRenderer.isInitialized())
+            {
+                this.menuWorldRenderer.init();
+            }
+
+            this.vr.postinit();
+            Util.ifElse(throwable, this::rollbackResourcePacks, () -> {
                 if (SharedConstants.IS_RUNNING_IN_IDE)
                 {
                     this.selfTest();
                 }
+
+                if (!Reflector.callBoolean(Reflector.ClientModLoader_completeModLoading))
+                {
+                    if (s != null)
+                    {
+                        this.setScreen(new ConnectScreen(new TitleScreen(), this, s, i));
+                    }
+                    else
+                    {
+                        this.setScreen(new TitleScreen(true));
+                    }
+                }
             });
         }, false));
     }
@@ -532,13 +710,7 @@
 
     private String createTitle()
     {
-        StringBuilder stringbuilder = new StringBuilder("Minecraft");
-
-        if (this.isProbablyModded())
-        {
-            stringbuilder.append("*");
-        }
-
+        StringBuilder stringbuilder = new StringBuilder("Vivecraft 1.16.5 jrbudda-7-5");
         stringbuilder.append(" ");
         stringbuilder.append(SharedConstants.getCurrentVersion().getName());
         ClientPacketListener clientpacketlistener = this.getConnection();
@@ -555,13 +727,13 @@
             {
                 stringbuilder.append(I18n.m_118938_("title.multiplayer.realms"));
             }
-            else if (this.singleplayerServer == null && (this.currentServer == null || !this.currentServer.isLan()))
+            else if (this.singleplayerServer != null || this.currentServer != null && this.currentServer.isLan())
             {
-                stringbuilder.append(I18n.m_118938_("title.multiplayer.other"));
+                stringbuilder.append(I18n.m_118938_("title.multiplayer.lan"));
             }
             else
             {
-                stringbuilder.append(I18n.m_118938_("title.multiplayer.lan"));
+                stringbuilder.append(I18n.m_118938_("title.multiplayer.other"));
             }
         }
 
@@ -588,7 +760,10 @@
 
     private void rollbackResourcePacks(Throwable p_91240_)
     {
-        if (this.resourcePackRepository.getSelectedIds().size() > 1)
+        if (this.resourcePackRepository.getSelectedPacks().stream().anyMatch((e) ->
+    {
+        return !e.isRequired();
+        }))
         {
             Component component;
 
@@ -671,10 +846,10 @@
             LOGGER.fatal("Reported exception thrown!", (Throwable)reportedexception);
             crash(reportedexception.getReport());
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            CrashReport crashreport = this.fillReport(new CrashReport("Unexpected error", throwable));
-            LOGGER.fatal("Unreported exception thrown!", throwable);
+            CrashReport crashreport = this.fillReport(new CrashReport("Unexpected error", throwable1));
+            LOGGER.fatal("Unreported exception thrown!", throwable1);
             this.emergencySave();
             crash(crashreport);
         }
@@ -687,20 +862,20 @@
 
     private void createSearchTrees()
     {
-        ReloadableSearchTree<ItemStack> reloadablesearchtree = new ReloadableSearchTree<>((p_91345_) ->
+        ReloadableSearchTree<ItemStack> reloadablesearchtree = new ReloadableSearchTree<>((stack) ->
         {
-            return p_91345_.getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream().map((p_91371_) -> {
-                return ChatFormatting.stripFormatting(p_91371_.getString()).trim();
-            }).filter((p_91378_) -> {
-                return !p_91378_.isEmpty();
+            return stack.getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream().map((textComponent) -> {
+                return ChatFormatting.stripFormatting(textComponent.getString()).trim();
+            }).filter((name) -> {
+                return !name.isEmpty();
             });
-        }, (p_91317_) ->
+        }, (stack) ->
         {
-            return Stream.of(Registry.ITEM.getKey(p_91317_.getItem()));
+            return Stream.of(Registry.ITEM.getKey(stack.getItem()));
         });
-        ReloadableIdSearchTree<ItemStack> reloadableidsearchtree = new ReloadableIdSearchTree<>((p_91121_) ->
+        ReloadableIdSearchTree<ItemStack> reloadableidsearchtree = new ReloadableIdSearchTree<>((stack) ->
         {
-            return ItemTags.getAllTags().getMatchingTags(p_91121_.getItem()).stream();
+            return Reflector.ForgeItem_getTags.exists() ? ((Set)Reflector.call(stack.getItem(), Reflector.ForgeItem_getTags)).stream() : ItemTags.getAllTags().getMatchingTags(stack.getItem()).stream();
         });
         NonNullList<ItemStack> nonnulllist = NonNullList.create();
 
@@ -709,24 +884,24 @@
             item.fillItemCategory(CreativeModeTab.TAB_SEARCH, nonnulllist);
         }
 
-        nonnulllist.forEach((p_91170_) ->
+        nonnulllist.forEach((stack) ->
         {
-            reloadablesearchtree.add(p_91170_);
-            reloadableidsearchtree.add(p_91170_);
+            reloadablesearchtree.add(stack);
+            reloadableidsearchtree.add(stack);
         });
-        ReloadableSearchTree<RecipeCollection> reloadablesearchtree1 = new ReloadableSearchTree<>((p_91323_) ->
+        ReloadableSearchTree<RecipeCollection> reloadablesearchtree1 = new ReloadableSearchTree<>((recipeList) ->
         {
-            return p_91323_.getRecipes().stream().flatMap((p_91319_) -> {
-                return p_91319_.getResultItem().getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream();
-            }).map((p_91357_) -> {
-                return ChatFormatting.stripFormatting(p_91357_.getString()).trim();
-            }).filter((p_91367_) -> {
-                return !p_91367_.isEmpty();
+            return recipeList.getRecipes().stream().flatMap((recipe) -> {
+                return recipe.getResultItem().getTooltipLines((Player)null, TooltipFlag.Default.NORMAL).stream();
+            }).map((textComponent) -> {
+                return ChatFormatting.stripFormatting(textComponent.getString()).trim();
+            }).filter((name) -> {
+                return !name.isEmpty();
             });
-        }, (p_91155_) ->
+        }, (recipeList) ->
         {
-            return p_91155_.getRecipes().stream().map((p_91126_) -> {
-                return Registry.ITEM.getKey(p_91126_.getResultItem().getItem());
+            return recipeList.getRecipes().stream().map((recipe) -> {
+                return Registry.ITEM.getKey(recipe.getResultItem().getItem());
             });
         });
         this.searchRegistry.register(SearchRegistry.CREATIVE_NAMES, reloadablesearchtree);
@@ -786,17 +961,41 @@
         if (p_91333_.getSaveFile() != null)
         {
             Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + p_91333_.getSaveFile());
-            System.exit(-1);
+
+            if (Reflector.ServerLifecycleHooks_handleExit.exists())
+            {
+                Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+            }
+            else
+            {
+                System.exit(-1);
+            }
         }
         else if (p_91333_.saveToFile(file2))
         {
             Bootstrap.realStdoutPrintln("#@!@# Game crashed! Crash report saved to: #@!@# " + file2.getAbsolutePath());
-            System.exit(-1);
+
+            if (Reflector.ServerLifecycleHooks_handleExit.exists())
+            {
+                Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -1);
+            }
+            else
+            {
+                System.exit(-1);
+            }
         }
         else
         {
             Bootstrap.realStdoutPrintln("#@?@# Game crashed! Crash report could not be saved. #@?@#");
-            System.exit(-2);
+
+            if (Reflector.ServerLifecycleHooks_handleExit.exists())
+            {
+                Reflector.call(Reflector.ServerLifecycleHooks_handleExit, -2);
+            }
+            else
+            {
+                System.exit(-2);
+            }
         }
     }
 
@@ -824,9 +1023,23 @@
             {
                 this.resourcePackRepository.reload();
                 List<PackResources> list = this.resourcePackRepository.openAllSelected();
-                this.setOverlay(new LoadingOverlay(this, this.resourceManager.createFullReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list), (p_91252_) ->
+                this.setOverlay(new LoadingOverlay(this, this.resourceManager.createFullReload(Util.backgroundExecutor(), this, RESOURCE_RELOAD_INITIAL_TASK, list), (throwable) ->
                 {
-                    Util.ifElse(p_91252_, this::rollbackResourcePacks, () -> {
+                    if (this.menuWorldRenderer.isReady() && this.resourcePacksChanged)
+                    {
+                        try
+                        {
+                            this.menuWorldRenderer.destroy();
+                            this.menuWorldRenderer.prepare();
+                        }
+                        catch (Exception exception)
+                        {
+                            exception.printStackTrace();
+                        }
+                    }
+
+                    this.resourcePacksChanged = false;
+                    Util.ifElse(throwable, this::rollbackResourcePacks, () -> {
                         this.levelRenderer.allChanged();
                         completablefuture.complete((Void)null);
                     });
@@ -924,11 +1137,6 @@
 
     public void setScreen(@Nullable Screen p_91153_)
     {
-        if (this.screen != null)
-        {
-            this.screen.removed();
-        }
-
         if (p_91153_ == null && this.level == null)
         {
             p_91153_ = new TitleScreen();
@@ -945,12 +1153,31 @@
             }
         }
 
+        Screen screen = this.screen;
+        Object object = Reflector.newInstance(Reflector.GuiOpenEvent_Constructor, p_91153_);
+
+        if (object != null)
+        {
+            if (Reflector.postForgeBusEvent(object))
+            {
+                return;
+            }
+
+            p_91153_ = (Screen)Reflector.call(object, Reflector.GuiOpenEvent_getGui);
+        }
+
+        if (screen != null && p_91153_ != screen)
+        {
+            screen.removed();
+        }
+
         if (p_91153_ instanceof TitleScreen || p_91153_ instanceof JoinMultiplayerScreen)
         {
             this.options.renderDebug = false;
             this.gui.getChat().clearMessages(true);
         }
 
+        GuiHandler.onScreenChanged(this.screen, p_91153_, true);
         this.screen = p_91153_;
 
         if (p_91153_ != null)
@@ -1013,6 +1240,14 @@
         {
             Util.timeSource = System::nanoTime;
 
+            try
+            {
+                this.vr.destroy();
+            }
+            catch (Exception exception)
+            {
+            }
+
             if (this.delayedCrash == null)
             {
                 System.exit(0);
@@ -1052,7 +1287,6 @@
     private void runTick(boolean p_91384_)
     {
         this.window.setErrorSection("Pre render");
-        long i = Util.getNanos();
 
         if (this.window.shouldClose())
         {
@@ -1078,75 +1312,253 @@
 
         if (p_91384_)
         {
-            int j = this.timer.advanceTime(Util.getMillis());
+            this.options.ofFastRender = false;
+            ++this.frameIndex;
+            int i = this.timer.advanceTime(Util.getMillis());
             this.profiler.push("scheduledExecutables");
             this.runAllTasks();
             this.profiler.pop();
+
+            try
+            {
+                this.vrRenderer.setupRenderConfiguration();
+            }
+            catch (RenderConfigException renderconfigexception)
+            {
+                this.screen = null;
+                GlStateManager._viewport(0, 0, this.window.getScreenWidth(), this.window.getScreenHeight());
+
+                if (this.overlay != null)
+                {
+                    RenderSystem.clear(256, ON_OSX);
+                    RenderSystem.matrixMode(5889);
+                    RenderSystem.loadIdentity();
+                    RenderSystem.ortho(0.0D, (double)this.window.getScreenWidth() / this.window.getGuiScale(), (double)this.window.getScreenHeight() / this.window.getGuiScale(), 0.0D, 1000.0D, 3000.0D);
+                    RenderSystem.matrixMode(5888);
+                    RenderSystem.loadIdentity();
+                    RenderSystem.translatef(0.0F, 0.0F, -2000.0F);
+                    Lighting.setupFor3DItems();
+                    this.overlay.render(new PoseStack(), 0, 0, 0.0F);
+                }
+                else
+                {
+                    this.notifyMirror(LangHelper.get("vivecraft.messages.rendersetupfailed", renderconfigexception.error), true, 10000);
+                    this.drawNotifyMirror();
+
+                    if (this.frameIndex % 300L == 0L)
+                    {
+                        System.out.println(renderconfigexception.title + " " + renderconfigexception.error);
+                    }
+
+                    try
+                    {
+                        Thread.sleep(10L);
+                    }
+                    catch (InterruptedException interruptedexception)
+                    {
+                    }
+                }
+
+                this.window.updateDisplay();
+                return;
+            }
+            catch (Exception exception2)
+            {
+                exception2.printStackTrace();
+            }
+
+            this.profiler.push("VR Poll/VSync");
+            this.vr.poll(this.frameIndex);
+            this.profiler.pop();
+            this.vrPlayer.postPoll();
             this.profiler.push("tick");
 
-            for (int k = 0; k < Math.min(10, j); ++k)
+            for (int j = 0; j < Math.min(10, i); ++j)
             {
                 this.profiler.incrementCounter("clientTick");
+                this.vrPlayer.preTick();
                 this.tick();
+                this.vrPlayer.postTick();
+                this.profiler.pop();
             }
-
-            this.profiler.pop();
         }
 
+        this.options.ofFastRender = false;
+        this.profiler.popPush("setupRenderConfiguration");
         this.mouseHandler.turnPlayer();
         this.window.setErrorSection("Render");
-        this.profiler.push("sound");
-        this.soundManager.updateSource(this.gameRenderer.getMainCamera());
-        this.profiler.pop();
-        this.profiler.push("render");
-        RenderSystem.pushMatrix();
-        RenderSystem.clear(16640, ON_OSX);
-        this.mainRenderTarget.bindWrite(true);
+
+        try
+        {
+            this.checkGLError("pre render setup ");
+            this.vrRenderer.setupRenderConfiguration();
+            this.checkGLError("post render setup ");
+        }
+        catch (Exception exception1)
+        {
+            exception1.printStackTrace();
+        }
+
+        float f = this.pause ? this.pausePartialTick : this.timer.partialTick;
+        this.profiler.popPush("preRender");
+        this.vrPlayer.preRender(f);
         FogRenderer.setupNoFog();
-        this.profiler.push("display");
         RenderSystem.enableTexture();
-        RenderSystem.enableCull();
         this.profiler.pop();
+        this.profiler.push("Gui");
+        this.currentPass = RenderPass.GUI;
+        this.gameRenderer.getMainCamera().setup(this.level, this.getCameraEntity(), false, false, f);
 
         if (!this.noRender)
         {
-            this.profiler.popPush("gameRenderer");
-            this.gameRenderer.render(this.pause ? this.pausePartialTick : this.timer.partialTick, i, p_91384_);
-            this.profiler.popPush("toasts");
-            this.toast.render(new PoseStack());
-            this.profiler.pop();
+            Reflector.call(Reflector.BasicEventHooks_onRenderTickStart, f);
         }
 
-        if (this.fpsPieResults != null)
+        GlStateManager._depthMask(true);
+        GlStateManager._colorMask(true, true, true, true);
+        this.mainRenderTarget = GuiHandler.guiFramebuffer;
+        this.mainRenderTarget.bindWrite(true);
+        this.gameRenderer.drawFramebufferNEW(f, p_91384_, new PoseStack());
+
+        if (org.vivecraft.gameplay.screenhandlers.KeyboardHandler.Showing && !this.vrSettings.physicalKeyboard)
         {
-            this.profiler.push("fpsPie");
-            this.renderFpsMeter(new PoseStack(), this.fpsPieResults);
-            this.profiler.pop();
+            this.mainRenderTarget = org.vivecraft.gameplay.screenhandlers.KeyboardHandler.Framebuffer;
+            this.mainRenderTarget.bindWrite(true);
+            this.gameRenderer.drawScreen(f, org.vivecraft.gameplay.screenhandlers.KeyboardHandler.UI, new PoseStack());
         }
 
-        this.profiler.push("blit");
-        this.mainRenderTarget.unbindWrite();
-        RenderSystem.popMatrix();
-        RenderSystem.pushMatrix();
-        this.mainRenderTarget.blitToScreen(this.window.getWidth(), this.window.getHeight());
-        RenderSystem.popMatrix();
-        this.profiler.popPush("updateDisplay");
-        this.window.updateDisplay();
-        int i1 = this.getFramerateLimit();
+        if (RadialHandler.isShowing())
+        {
+            this.mainRenderTarget = RadialHandler.Framebuffer;
+            this.mainRenderTarget.bindWrite(true);
+            this.gameRenderer.drawScreen(f, RadialHandler.UI, new PoseStack());
+        }
 
-        if ((double)i1 < Option.FRAMERATE_LIMIT.getMaxValue())
+        this.checkGLError("post 2d ");
+        VRHotkeys.updateMovingThirdPersonCam();
+        this.profiler.popPush("sound");
+        this.currentPass = RenderPass.CENTER;
+        this.soundManager.updateSource(this.gameRenderer.getMainCamera());
+        this.profiler.pop();
+        this.profiler.push("render");
+
+        if (!this.noRender)
         {
-            RenderSystem.limitDisplayFPS(i1);
+            List<RenderPass> list = this.vrRenderer.getRenderPasses();
+
+            for (RenderPass renderpass : list)
+            {
+                this.currentPass = renderpass;
+
+                switch (renderpass)
+                {
+                    case LEFT:
+                    case RIGHT:
+                        this.mainRenderTarget = this.vrRenderer.framebufferVrRender;
+                        break;
+
+                    case CENTER:
+                        this.mainRenderTarget = this.vrRenderer.framebufferUndistorted;
+                        break;
+
+                    case THIRD:
+                        this.mainRenderTarget = this.vrRenderer.framebufferMR;
+                        break;
+
+                    case SCOPEL:
+                        this.mainRenderTarget = this.vrRenderer.telescopeFramebufferL;
+                        break;
+
+                    case SCOPER:
+                        this.mainRenderTarget = this.vrRenderer.telescopeFramebufferR;
+                        break;
+
+                    case CAMERA:
+                        this.mainRenderTarget = this.vrRenderer.cameraRenderFramebuffer;
+                }
+
+                this.profiler.push("Eye:" + this.currentPass.ordinal());
+                this.profiler.push("setup");
+                this.mainRenderTarget.bindWrite(true);
+                this.profiler.pop();
+                RenderSystem.loadIdentity();
+                this.renderSingleView(renderpass.ordinal(), f, p_91384_);
+                this.profiler.pop();
+
+                if (this.grabScreenShot)
+                {
+                    boolean flag;
+
+                    if (list.contains(RenderPass.CAMERA))
+                    {
+                        flag = renderpass == RenderPass.CAMERA;
+                    }
+                    else if (list.contains(RenderPass.CENTER))
+                    {
+                        flag = renderpass == RenderPass.CENTER;
+                    }
+                    else
+                    {
+                        flag = this.vrSettings.displayMirrorLeftEye ? renderpass == RenderPass.LEFT : renderpass == RenderPass.RIGHT;
+                    }
+
+                    if (flag)
+                    {
+                        RenderTarget rendertarget = this.mainRenderTarget;
+
+                        if (renderpass == RenderPass.CAMERA)
+                        {
+                            rendertarget = this.vrRenderer.cameraFramebuffer;
+                        }
+
+                        this.mainRenderTarget.unbindWrite();
+                        Utils.takeScreenshot(rendertarget);
+                        this.window.updateDisplay();
+                        this.grabScreenShot = false;
+                    }
+                }
+            }
+
+            if (p_91384_)
+            {
+                this.vrPlayer.postRender(f);
+                this.profiler.push("Display/Reproject");
+
+                try
+                {
+                    this.vrRenderer.endFrame();
+                }
+                catch (Exception exception)
+                {
+                    LOGGER.error(exception.toString());
+                }
+
+                this.profiler.pop();
+                this.checkGLError("post submit ");
+            }
+
+            if (!this.noRender)
+            {
+                Reflector.call(Reflector.BasicEventHooks_onRenderTickEnd, f);
+            }
+
+            this.profiler.push("mirror");
+            this.mainRenderTarget.unbindWrite();
+            GL30.glDrawBuffer(1029);
+            this.copyToMirror();
+            this.drawNotifyMirror();
+            this.checkGLError("post-mirror ");
+            this.profiler.pop();
         }
 
-        this.profiler.popPush("yield");
-        Thread.yield();
+        this.getProfiler().pop();
         this.profiler.pop();
         this.window.setErrorSection("Post render");
+        this.window.updateDisplay();
         ++this.frames;
-        boolean flag = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished();
+        boolean flag1 = this.hasSingleplayerServer() && (this.screen != null && this.screen.isPauseScreen() || this.overlay != null && this.overlay.isPauseScreen()) && !this.singleplayerServer.isPublished();
 
-        if (this.pause != flag)
+        if (this.pause != flag1)
         {
             if (this.pause)
             {
@@ -1157,12 +1569,12 @@
                 this.timer.partialTick = this.pausePartialTick;
             }
 
-            this.pause = flag;
+            this.pause = flag1;
         }
 
-        long l = Util.getNanos();
-        this.frameTimer.logFrameDuration(l - this.lastNanoTime);
-        this.lastNanoTime = l;
+        long k = Util.getNanos();
+        this.frameTimer.logFrameDuration(k - this.lastNanoTime);
+        this.lastNanoTime = k;
         this.profiler.push("fpsUpdate");
 
         while (Util.getMillis() >= this.lastTime + 1000L)
@@ -1231,14 +1643,16 @@
         int i = this.window.calculateScale(this.options.guiScale, this.isEnforceUnicode());
         this.window.setGuiScale((double)i);
 
+        if (this.vrRenderer != null)
+        {
+            this.vrRenderer.reinitFrameBuffers("Main Window Changed");
+        }
+
         if (this.screen != null)
         {
             this.screen.resize(this, this.window.getGuiScaledWidth(), this.window.getGuiScaledHeight());
         }
 
-        RenderTarget rendertarget = this.getMainRenderTarget();
-        rendertarget.resize(this.window.getWidth(), this.window.getHeight(), ON_OSX);
-        this.gameRenderer.resize(this.window.getWidth(), this.window.getHeight());
         this.mouseHandler.setIgnoreFirstMove();
     }
 
@@ -1249,7 +1663,7 @@
 
     private int getFramerateLimit()
     {
-        return this.level != null || this.screen == null && this.overlay == null ? this.window.getFramerateLimit() : 60;
+        return this.level == null && (this.screen != null || this.overlay != null) ? 60 : this.window.getFramerateLimit();
     }
 
     public void emergencySave()
@@ -1321,6 +1735,16 @@
         }
     }
 
+    public void drawProfiler()
+    {
+        if (this.fpsPieResults != null)
+        {
+            this.profiler.push("fpsPie");
+            this.renderFpsMeter(new PoseStack(), this.fpsPieResults);
+            this.profiler.pop();
+        }
+    }
+
     private void renderFpsMeter(PoseStack p_91141_, ProfileResults p_91142_)
     {
         List<ResultField> list = p_91142_.getTimes(this.debugPath);
@@ -1337,14 +1761,15 @@
         Tesselator tesselator = Tesselator.getInstance();
         BufferBuilder bufferbuilder = tesselator.getBuilder();
         int i = 160;
-        int j = this.window.getWidth() - 160 - 10;
-        int k = this.window.getHeight() - 320;
+        int j = this.window.getWidth() / 3;
+        int k = this.window.getHeight() / 9;
         RenderSystem.enableBlend();
+        RenderSystem.scaled(2.2D, 2.7D, 1.0D);
         bufferbuilder.begin(7, DefaultVertexFormat.POSITION_COLOR);
         bufferbuilder.vertex((double)((float)j - 176.0F), (double)((float)k - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
         bufferbuilder.vertex((double)((float)j - 176.0F), (double)(k + 320), 0.0D).color(200, 0, 0, 0).endVertex();
         bufferbuilder.vertex((double)((float)j + 176.0F), (double)(k + 320), 0.0D).color(200, 0, 0, 0).endVertex();
-        bufferbuilder.vertex((double)((float)j + 176.0F), (double)((float)k - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
+        bufferbuilder.vertex((double)((float)j + 704.0F), (double)((float)k - 96.0F - 16.0F), 0.0D).color(200, 0, 0, 0).endVertex();
         tesselator.end();
         RenderSystem.disableBlend();
         double d0 = 0.0D;
@@ -1407,14 +1832,14 @@
             s1 = s1 + s + ' ';
         }
 
-        int k2 = 16777215;
+        int j2 = 16777215;
         this.font.drawShadow(p_91141_, s1, (float)(j - 160), (float)(k - 80 - 16), 16777215);
         s1 = decimalformat.format(resultfield.globalPercentage) + "%";
         this.font.drawShadow(p_91141_, s1, (float)(j + 160 - this.font.width(s1)), (float)(k - 80 - 16), 16777215);
 
-        for (int j2 = 0; j2 < list.size(); ++j2)
+        for (int k2 = 0; k2 < list.size(); ++k2)
         {
-            ResultField resultfield2 = list.get(j2);
+            ResultField resultfield2 = list.get(k2);
             StringBuilder stringbuilder = new StringBuilder();
 
             if ("unspecified".equals(resultfield2.name))
@@ -1423,15 +1848,15 @@
             }
             else
             {
-                stringbuilder.append("[").append(j2 + 1).append("] ");
+                stringbuilder.append("[").append(k2 + 1).append("] ");
             }
 
             String s2 = stringbuilder.append(resultfield2.name).toString();
-            this.font.drawShadow(p_91141_, s2, (float)(j - 160), (float)(k + 80 + j2 * 8 + 20), resultfield2.getColor());
+            this.font.drawShadow(p_91141_, s2, (float)(j - 160), (float)(k + 80 + k2 * 8 + 20), resultfield2.getColor());
             s2 = decimalformat.format(resultfield2.percentage) + "%";
-            this.font.drawShadow(p_91141_, s2, (float)(j + 160 - 50 - this.font.width(s2)), (float)(k + 80 + j2 * 8 + 20), resultfield2.getColor());
+            this.font.drawShadow(p_91141_, s2, (float)(j + 160 - 50 - this.font.width(s2)), (float)(k + 80 + k2 * 8 + 20), resultfield2.getColor());
             s2 = decimalformat.format(resultfield2.globalPercentage) + "%";
-            this.font.drawShadow(p_91141_, s2, (float)(j + 160 - this.font.width(s2)), (float)(k + 80 + j2 * 8 + 20), resultfield2.getColor());
+            this.font.drawShadow(p_91141_, s2, (float)(j + 160 - this.font.width(s2)), (float)(k + 80 + k2 * 8 + 20), resultfield2.getColor());
         }
     }
 
@@ -1476,19 +1901,44 @@
             {
                 BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
                 BlockPos blockpos = blockhitresult.getBlockPos();
+                Object object = null;
 
-                if (!this.level.getBlockState(blockpos).isAir())
+                if (!this.level.isEmptyBlock(blockpos))
                 {
+                    object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+
+                    if (object != null && Reflector.callBoolean(object, Reflector.Event_isCanceled))
+                    {
+                        if (Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                        {
+                            this.particleEngine.addBlockHitEffects(blockpos, blockhitresult);
+                            this.player.swingArm(InteractionHand.MAIN_HAND, VRFirstPersonArmSwing.Attack);
+                        }
+
+                        return;
+                    }
+
                     Direction direction = blockhitresult.getDirection();
 
                     if (this.gameMode.continueDestroyBlock(blockpos, direction))
                     {
-                        this.particleEngine.crack(blockpos, direction);
-                        this.player.swing(InteractionHand.MAIN_HAND);
+                        if (object != null)
+                        {
+                            if (Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                            {
+                                this.particleEngine.addBlockHitEffects(blockpos, blockhitresult);
+                                this.player.swingArm(InteractionHand.MAIN_HAND, VRFirstPersonArmSwing.Attack);
+                            }
+                        }
+                        else
+                        {
+                            this.particleEngine.crack(blockpos, direction);
+                            this.player.swingArm(InteractionHand.MAIN_HAND, VRFirstPersonArmSwing.Attack);
+                        }
                     }
                 }
             }
-            else
+            else if (this.vrSettings.seated)
             {
                 this.gameMode.stopDestroyBlock();
             }
@@ -1510,39 +1960,48 @@
             }
             else if (!this.player.isHandsBusy())
             {
-                switch (this.hitResult.getType())
+                Object object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 0, this.options.keyAttack, InteractionHand.MAIN_HAND);
+
+                if (object == null || !Reflector.callBoolean(object, Reflector.Event_isCanceled))
                 {
-                    case ENTITY:
-                        this.gameMode.attack(this.player, ((EntityHitResult)this.hitResult).getEntity());
-                        break;
+                    switch (this.hitResult.getType())
+                    {
+                        case ENTITY:
+                            this.gameMode.attack(this.player, ((EntityHitResult)this.hitResult).getEntity());
+                            break;
 
-                    case BLOCK:
-                        BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
-                        BlockPos blockpos = blockhitresult.getBlockPos();
+                        case BLOCK:
+                            BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
+                            BlockPos blockpos = blockhitresult.getBlockPos();
 
-                        if (!this.level.getBlockState(blockpos).isAir())
-                        {
-                            this.gameMode.startDestroyBlock(blockpos, blockhitresult.getDirection());
-                            break;
-                        }
+                            if (!this.level.isEmptyBlock(blockpos))
+                            {
+                                this.gameMode.startDestroyBlock(blockpos, blockhitresult.getDirection());
+                                break;
+                            }
 
-                    case MISS:
-                        if (this.gameMode.hasMissTime())
-                        {
-                            this.missTime = 10;
-                        }
+                        case MISS:
+                            if (this.gameMode.hasMissTime())
+                            {
+                                this.missTime = 10;
+                            }
 
-                        this.player.resetAttackStrengthTicker();
+                            this.player.resetAttackStrengthTicker();
+                            Reflector.call(Reflector.ForgeHooks_onEmptyLeftClick, this.player);
+                    }
                 }
 
-                this.player.swing(InteractionHand.MAIN_HAND);
+                if (object == null || Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                {
+                    this.player.swing(InteractionHand.MAIN_HAND);
+                }
             }
         }
     }
 
-    private void startUseItem()
+    public void startUseItem()
     {
-        if (!this.gameMode.isDestroying())
+        if (!this.gameMode.isDestroying() || !this.vrSettings.seated)
         {
             this.rightClickDelay = 4;
 
@@ -1555,74 +2014,102 @@
 
                 for (InteractionHand interactionhand : InteractionHand.values())
                 {
-                    ItemStack itemstack = this.player.getItemInHand(interactionhand);
+                    Object object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 1, this.options.keyUse, interactionhand);
 
-                    if (this.hitResult != null)
+                    if (object != null && Reflector.callBoolean(object, Reflector.Event_isCanceled))
                     {
-                        switch (this.hitResult.getType())
+                        if (Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
                         {
-                            case ENTITY:
-                                EntityHitResult entityhitresult = (EntityHitResult)this.hitResult;
-                                Entity entity = entityhitresult.getEntity();
-                                InteractionResult interactionresult = this.gameMode.interactAt(this.player, entity, entityhitresult, interactionhand);
+                            this.player.swing(interactionhand);
+                        }
 
-                                if (!interactionresult.consumesAction())
-                                {
-                                    interactionresult = this.gameMode.interact(this.player, entity, interactionhand);
-                                }
+                        return;
+                    }
 
-                                if (interactionresult.consumesAction())
-                                {
-                                    if (interactionresult.shouldSwing())
+                    ItemStack itemstack = this.player.getItemInHand(interactionhand);
+
+                    if (!TelescopeTracker.isTelescope(itemstack))
+                    {
+                        NetworkHelper.sendActiveHand((byte)interactionhand.ordinal());
+
+                        if (this.hitResult != null)
+                        {
+                            switch (this.hitResult.getType())
+                            {
+                                case ENTITY:
+                                    this.physicalGuiManager.preClickAction();
+                                    EntityHitResult entityhitresult = (EntityHitResult)this.hitResult;
+                                    Entity entity = entityhitresult.getEntity();
+                                    InteractionResult interactionresult = this.gameMode.interactAt(this.player, entity, entityhitresult, interactionhand);
+
+                                    if (!interactionresult.consumesAction())
                                     {
-                                        this.player.swing(interactionhand);
+                                        interactionresult = this.gameMode.interact(this.player, entity, interactionhand);
                                     }
 
-                                    return;
-                                }
+                                    if (interactionresult.consumesAction())
+                                    {
+                                        if (interactionresult.shouldSwing() && (object == null || Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand)))
+                                        {
+                                            this.player.swingArm(interactionhand, VRFirstPersonArmSwing.Use);
+                                        }
 
-                                break;
+                                        return;
+                                    }
 
-                            case BLOCK:
-                                BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
-                                int i = itemstack.getCount();
-                                InteractionResult interactionresult1 = this.gameMode.useItemOn(this.player, this.level, interactionhand, blockhitresult);
+                                    break;
 
-                                if (interactionresult1.consumesAction())
-                                {
-                                    if (interactionresult1.shouldSwing())
-                                    {
-                                        this.player.swing(interactionhand);
+                                case BLOCK:
+                                    BlockHitResult blockhitresult = (BlockHitResult)this.hitResult;
+                                    int i = itemstack.getCount();
+                                    InteractionResult interactionresult1 = this.gameMode.useItemOn(this.player, this.level, interactionhand, blockhitresult);
 
-                                        if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.gameMode.hasInfiniteItems()))
+                                    if (interactionresult1.consumesAction())
+                                    {
+                                        if (interactionresult1.shouldSwing())
                                         {
-                                            this.gameRenderer.itemInHandRenderer.itemUsed(interactionhand);
+                                            if (object == null || Reflector.callBoolean(object, Reflector.ClickInputEvent_shouldSwingHand))
+                                            {
+                                                this.player.swingArm(interactionhand, VRFirstPersonArmSwing.Use);
+                                            }
+
+                                            if (!itemstack.isEmpty() && (itemstack.getCount() != i || this.gameMode.hasInfiniteItems()))
+                                            {
+                                                this.gameRenderer.itemInHandRenderer.itemUsed(interactionhand);
+                                            }
                                         }
-                                    }
 
-                                    return;
-                                }
+                                        return;
+                                    }
 
-                                if (interactionresult1 == InteractionResult.FAIL)
-                                {
-                                    return;
-                                }
+                                    if (interactionresult1 == InteractionResult.FAIL)
+                                    {
+                                        return;
+                                    }
+                            }
                         }
-                    }
 
-                    if (!itemstack.isEmpty())
-                    {
-                        InteractionResult interactionresult2 = this.gameMode.useItem(this.player, this.level, interactionhand);
+                        this.physicalGuiManager.preClickAction();
+
+                        if (itemstack.isEmpty() && (this.hitResult == null || this.hitResult.getType() == HitResult.Type.MISS))
+                        {
+                            Reflector.call(Reflector.ForgeHooks_onEmptyClick, this.player, interactionhand);
+                        }
 
-                        if (interactionresult2.consumesAction())
+                        if (!itemstack.isEmpty())
                         {
-                            if (interactionresult2.shouldSwing())
+                            InteractionResult interactionresult2 = this.gameMode.useItem(this.player, this.level, interactionhand);
+
+                            if (interactionresult2.consumesAction())
                             {
-                                this.player.swing(interactionhand);
-                            }
+                                if (interactionresult2.shouldSwing())
+                                {
+                                    this.player.swingArm(interactionhand, VRFirstPersonArmSwing.Use);
+                                }
 
-                            this.gameRenderer.itemInHandRenderer.itemUsed(interactionhand);
-                            return;
+                                this.gameRenderer.itemInHandRenderer.itemUsed(interactionhand);
+                                return;
+                            }
                         }
                     }
                 }
@@ -1637,12 +2124,15 @@
 
     public void tick()
     {
+        ++this.tickCounter;
+
         if (this.rightClickDelay > 0)
         {
             --this.rightClickDelay;
         }
 
-        this.profiler.push("gui");
+        Reflector.call(Reflector.BasicEventHooks_onPreClientTick);
+        this.profiler.push("guitick");
 
         if (!this.pause)
         {
@@ -1650,7 +2140,6 @@
         }
 
         this.profiler.pop();
-        this.gameRenderer.pick(1.0F);
         this.tutorial.onLookAt(this.level, this.hitResult);
         this.profiler.push("gameMode");
 
@@ -1660,11 +2149,7 @@
         }
 
         this.profiler.popPush("textures");
-
-        if (this.level != null)
-        {
-            this.textureManager.tick();
-        }
+        this.textureManager.tick();
 
         if (this.screen == null && this.player != null)
         {
@@ -1700,6 +2185,10 @@
             this.gui.clearCache();
         }
 
+        this.profiler.popPush("vrProcessInputs");
+        this.vr.processInputs();
+        this.vr.processBindings();
+
         if (this.overlay == null && (this.screen == null || this.screen.passEvents))
         {
             this.profiler.popPush("Keybindings");
@@ -1711,8 +2200,30 @@
             }
         }
 
+        this.profiler.popPush("vrInputActionsTick");
+
+        for (VRInputAction vrinputaction : this.vr.getInputActions())
+        {
+            vrinputaction.tick();
+        }
+
+        if (this.vrSettings.displayMirrorMode == 15 || this.vrSettings.displayMirrorMode == 14)
+        {
+            VRHotkeys.handleMRKeys();
+        }
+
         if (this.level != null)
         {
+            if (this.player != null)
+            {
+                this.vrPlayer.updateFreeMove();
+
+                if (this.vrPlayer.teleportWarningTimer >= 0 && --this.vrPlayer.teleportWarningTimer == 0)
+                {
+                    this.gui.getChat().addMessage(new TranslatableComponent("vivecraft.messages.noserverplugin"));
+                }
+            }
+
             this.profiler.popPush("gameRenderer");
 
             if (!this.pause)
@@ -1744,6 +2255,13 @@
             this.gameRenderer.shutdownEffect();
         }
 
+        if (this.menuWorldRenderer != null)
+        {
+            this.menuWorldRenderer.tick();
+        }
+
+        PlayerModelController.getInstance().tick();
+
         if (!this.pause)
         {
             this.musicManager.tick();
@@ -1815,24 +2333,21 @@
         this.profiler.popPush("keyboard");
         this.keyboardHandler.tick();
         this.profiler.pop();
+        Reflector.call(Reflector.BasicEventHooks_onPostClientTick);
     }
 
-    private boolean isMultiplayerServer()
+    public boolean isMultiplayerServer()
     {
         return !this.isLocalServer || this.singleplayerServer != null && this.singleplayerServer.isPublished();
     }
 
     private void handleKeybinds()
     {
-        for (; this.options.keyTogglePerspective.consumeClick(); this.levelRenderer.needsUpdate())
+        while (this.options.keyTogglePerspective.consumeClick())
         {
-            CameraType cameratype = this.options.getCameraType();
-            this.options.setCameraType(this.options.getCameraType().cycle());
-
-            if (cameratype.isFirstPerson() != this.options.getCameraType().isFirstPerson())
-            {
-                this.gameRenderer.checkEntityPostEffect(this.options.getCameraType().isFirstPerson() ? this.getCameraEntity() : null);
-            }
+            this.vrSettings.setOptionValue(VRSettings.VrOptions.MIRROR_DISPLAY);
+            this.notifyMirror(this.vrSettings.getButtonDisplayString(VRSettings.VrOptions.MIRROR_DISPLAY), false, 3000);
+            this.levelRenderer.needsUpdate();
         }
 
         while (this.options.keySmoothCamera.consumeClick())
@@ -1851,13 +2366,13 @@
                 {
                     this.gui.getSpectatorGui().onHotbarSelected(i);
                 }
-                else if (!this.player.isCreative() || this.screen != null || !flag1 && !flag)
+                else if (this.player.isCreative() && this.screen == null && (flag1 || flag))
                 {
-                    this.player.inventory.selected = i;
+                    CreativeModeInventoryScreen.handleHotbarLoadOrSave(this, i, flag1, flag);
                 }
                 else
                 {
-                    CreativeModeInventoryScreen.handleHotbarLoadOrSave(this, i, flag1, flag);
+                    this.player.inventory.selected = i;
                 }
             }
         }
@@ -1911,7 +2426,7 @@
         {
             if (!this.player.isSpectator() && this.player.drop(Screen.hasControlDown()))
             {
-                this.player.swing(InteractionHand.MAIN_HAND);
+                this.player.swingArm(InteractionHand.MAIN_HAND, VRFirstPersonArmSwing.Attack);
             }
         }
 
@@ -1919,7 +2434,7 @@
 
         if (flag2)
         {
-            while (this.options.keyChat.consumeClick())
+            if (this.screen == null && this.options.keyChat.consumeClick())
             {
                 this.openChatScreen("");
             }
@@ -1932,8 +2447,9 @@
 
         if (this.player.isUsingItem())
         {
-            if (!this.options.keyUse.isDown())
+            if (!this.options.keyUse.isDown() && (!this.bowTracker.isActive(this.player) || this.vrSettings.seated) && !this.autoFood.isEating())
             {
+                NetworkHelper.sendActiveHand((byte)this.player.getUsedItemHand().ordinal());
                 this.gameMode.releaseUsingItem(this.player);
             }
 
@@ -1951,9 +2467,21 @@
         }
         else
         {
-            while (this.options.keyAttack.consumeClick())
+            if (this.options.keyAttack.consumeClick() && this.screen == null)
             {
                 this.startAttack();
+                this.lastClick = true;
+            }
+            else if (!this.options.keyAttack.isDown())
+            {
+                this.missTime = 0;
+
+                if (this.lastClick)
+                {
+                    this.gameMode.stopDestroyBlock();
+                }
+
+                this.lastClick = false;
             }
 
             while (this.options.keyUse.consumeClick())
@@ -1972,7 +2500,7 @@
             this.startUseItem();
         }
 
-        this.continueAttack(this.screen == null && this.options.keyAttack.isDown() && this.mouseHandler.isMouseGrabbed());
+        this.continueAttack(this.screen == null && this.options.keyAttack.isDown());
     }
 
     public static DataPackConfig loadDataPacks(LevelStorageSource.LevelStorageAccess p_91134_)
@@ -2007,54 +2535,57 @@
 
     public void loadLevel(String p_91201_)
     {
-        this.doLoadLevel(p_91201_, RegistryAccess.builtin(), Minecraft::loadDataPacks, Minecraft::loadWorldData, false, Minecraft.ExperimentalDialogType.BACKUP);
+        this.loadWorld(p_91201_, RegistryAccess.builtin(), Minecraft::loadDataPacks, Minecraft::loadWorldData, false, Minecraft.ExperimentalDialogType.BACKUP, false);
     }
 
     public void createLevel(String p_91203_, LevelSettings p_91204_, RegistryAccess.RegistryHolder p_91205_, WorldGenSettings p_91206_)
     {
-        this.doLoadLevel(p_91203_, p_91205_, (p_91129_) ->
+        this.loadWorld(p_91203_, p_91205_, (worldStorage) ->
         {
             return p_91204_.getDataPackConfig();
-        }, (p_91177_, p_91178_, p_91179_, p_91180_) ->
+        }, (worldStorage, dynamicRegistries, resourceManager, datapackCodec) ->
         {
             RegistryWriteOps<JsonElement> registrywriteops = RegistryWriteOps.create(JsonOps.INSTANCE, p_91205_);
-            RegistryReadOps<JsonElement> registryreadops = RegistryReadOps.create(JsonOps.INSTANCE, p_91179_, p_91205_);
-            DataResult<WorldGenSettings> dataresult = WorldGenSettings.CODEC.encodeStart(registrywriteops, p_91206_).setLifecycle(Lifecycle.stable()).flatMap((p_91257_) -> {
-                return WorldGenSettings.CODEC.parse(registryreadops, p_91257_);
+            RegistryReadOps<JsonElement> registryreadops = RegistryReadOps.create(JsonOps.INSTANCE, resourceManager, p_91205_);
+            DataResult<WorldGenSettings> dataresult = WorldGenSettings.CODEC.encodeStart(registrywriteops, p_91206_).setLifecycle(Lifecycle.stable()).flatMap((p_243209_1_) -> {
+                return WorldGenSettings.CODEC.parse(registryreadops, p_243209_1_);
             });
             WorldGenSettings worldgensettings = dataresult.resultOrPartial(Util.prefix("Error reading worldgen settings after loading data packs: ", LOGGER::error)).orElse(p_91206_);
             return new PrimaryLevelData(p_91204_, worldgensettings, dataresult.lifecycle());
-        }, false, Minecraft.ExperimentalDialogType.CREATE);
+        }, false, Minecraft.ExperimentalDialogType.CREATE, true);
     }
 
-    private void doLoadLevel(String p_91220_, RegistryAccess.RegistryHolder p_91221_, Function<LevelStorageSource.LevelStorageAccess, DataPackConfig> p_91222_, Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData> p_91223_, boolean p_91224_, Minecraft.ExperimentalDialogType p_91225_)
+    private void loadWorld(String worldName, RegistryAccess.RegistryHolder dynamicRegistries, Function<LevelStorageSource.LevelStorageAccess, DataPackConfig> levelSaveToDatapackFunction, Function4<LevelStorageSource.LevelStorageAccess, RegistryAccess.RegistryHolder, ResourceManager, DataPackConfig, WorldData> quadFunction, boolean vanillaOnly, Minecraft.ExperimentalDialogType selectionType, boolean creating)
     {
         LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess;
 
         try
         {
-            levelstoragesource$levelstorageaccess = this.levelSource.createAccess(p_91220_);
+            levelstoragesource$levelstorageaccess = this.levelSource.createAccess(worldName);
         }
         catch (IOException ioexception2)
         {
-            LOGGER.warn("Failed to read level {} data", p_91220_, ioexception2);
-            SystemToast.onWorldAccessFailure(this, p_91220_);
+            LOGGER.warn("Failed to read level {} data", worldName, ioexception2);
+            SystemToast.onWorldAccessFailure(this, worldName);
             this.setScreen((Screen)null);
             return;
         }
 
         Minecraft.ServerStem minecraft$serverstem;
+        RegistryAccess.RegistryHolder registryaccess$registryholder;
 
         try
         {
-            minecraft$serverstem = this.makeServerStem(p_91221_, p_91222_, p_91223_, p_91224_, levelstoragesource$levelstorageaccess);
+            Minecraft.ServerStem minecraft$serverstem1 = this.makeServerStem(dynamicRegistries, levelSaveToDatapackFunction, quadFunction, vanillaOnly, levelstoragesource$levelstorageaccess);
+            registryaccess$registryholder = creating ? dynamicRegistries : RegistryAccess.builtin();
+            minecraft$serverstem = creating ? minecraft$serverstem1 : this.makeServerStem(registryaccess$registryholder, levelSaveToDatapackFunction, quadFunction, vanillaOnly, levelstoragesource$levelstorageaccess);
         }
         catch (Exception exception)
         {
             LOGGER.warn("Failed to load datapacks, can't proceed with server load", (Throwable)exception);
             this.setScreen(new DatapackLoadFailureScreen(() ->
             {
-                this.doLoadLevel(p_91220_, p_91221_, p_91222_, p_91223_, true, p_91225_);
+                this.loadWorld(worldName, dynamicRegistries, levelSaveToDatapackFunction, quadFunction, true, selectionType, creating);
             }));
 
             try
@@ -2063,7 +2594,7 @@
             }
             catch (IOException ioexception)
             {
-                LOGGER.warn("Failed to unlock access to level {}", p_91220_, ioexception);
+                LOGGER.warn("Failed to unlock access to level {}", worldName, ioexception);
             }
 
             return;
@@ -2073,14 +2604,14 @@
         boolean flag = worlddata.worldGenSettings().isOldCustomizedWorld();
         boolean flag1 = worlddata.worldGenSettingsLifecycle() != Lifecycle.stable();
 
-        if (p_91225_ == Minecraft.ExperimentalDialogType.NONE || !flag && !flag1)
+        if (selectionType == Minecraft.ExperimentalDialogType.NONE || !flag && !flag1)
         {
             this.clearLevel();
             this.progressListener.set((StoringChunkProgressListener)null);
 
             try
             {
-                levelstoragesource$levelstorageaccess.saveDataTag(p_91221_, worlddata);
+                levelstoragesource$levelstorageaccess.saveDataTag(registryaccess$registryholder, worlddata);
                 minecraft$serverstem.serverResources().updateGlobals();
                 YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(this.proxy);
                 MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
@@ -2089,10 +2620,10 @@
                 SkullBlockEntity.setProfileCache(gameprofilecache);
                 SkullBlockEntity.setSessionService(minecraftsessionservice);
                 GameProfileCache.setUsesAuthentication(false);
-                this.singleplayerServer = MinecraftServer.spin((p_91189_) ->
+                this.singleplayerServer = MinecraftServer.spin((thread) ->
                 {
-                    return new IntegratedServer(p_91189_, this, p_91221_, levelstoragesource$levelstorageaccess, minecraft$serverstem.packRepository(), minecraft$serverstem.serverResources(), worlddata, minecraftsessionservice, gameprofilerepository, gameprofilecache, (p_91343_) -> {
-                        StoringChunkProgressListener storingchunkprogresslistener = new StoringChunkProgressListener(p_91343_ + 0);
+                    return new IntegratedServer(thread, this, registryaccess$registryholder, levelstoragesource$levelstorageaccess, minecraft$serverstem.packRepository(), minecraft$serverstem.serverResources(), worlddata, minecraftsessionservice, gameprofilerepository, gameprofilecache, (radius) -> {
+                        StoringChunkProgressListener storingchunkprogresslistener = new StoringChunkProgressListener(radius + 0);
                         storingchunkprogresslistener.start();
                         this.progressListener.set(storingchunkprogresslistener);
                         return new ProcessorChunkProgressListener(storingchunkprogresslistener, this.progressTasks::add);
@@ -2104,7 +2635,7 @@
             {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Starting integrated server");
                 CrashReportCategory crashreportcategory = crashreport.addCategory("Starting integrated server");
-                crashreportcategory.setDetail("Level ID", p_91220_);
+                crashreportcategory.setDetail("Level ID", worldName);
                 crashreportcategory.setDetail("Level Name", worlddata.getLevelName());
                 throw new ReportedException(crashreport);
             }
@@ -2141,18 +2672,26 @@
             this.profiler.pop();
             SocketAddress socketaddress = this.singleplayerServer.getConnection().startMemoryChannel();
             Connection connection = Connection.connectToLocalServer(socketaddress);
-            connection.setListener(new ClientHandshakePacketListenerImpl(connection, this, (Screen)null, (p_91335_) ->
+            connection.setListener(new ClientHandshakePacketListenerImpl(connection, this, (Screen)null, (statusMessage) ->
             {
             }));
             connection.send(new ClientIntentionPacket(socketaddress.toString(), 0, ConnectionProtocol.LOGIN));
+            GameProfile gameprofile = this.getUser().getGameProfile();
+
+            if (Reflector.ForgeSession_hasCachedProperties.exists() && !Reflector.callBoolean(this.getUser(), Reflector.ForgeSession_hasCachedProperties))
+            {
+                gameprofile = this.minecraftSessionService.fillProfileProperties(gameprofile, true);
+                Reflector.call(this.getUser(), Reflector.ForgeSession_setProperties, gameprofile.getProperties());
+            }
+
             connection.send(new ServerboundHelloPacket(this.getUser().getGameProfile()));
             this.pendingConnection = connection;
         }
         else
         {
-            this.displayExperimentalConfirmationDialog(p_91225_, p_91220_, flag, () ->
+            this.displayExperimentalConfirmationDialog(selectionType, worldName, flag, () ->
             {
-                this.doLoadLevel(p_91220_, p_91221_, p_91222_, p_91223_, p_91224_, Minecraft.ExperimentalDialogType.NONE);
+                this.loadWorld(worldName, dynamicRegistries, levelSaveToDatapackFunction, quadFunction, vanillaOnly, Minecraft.ExperimentalDialogType.NONE, creating);
             });
             minecraft$serverstem.close();
 
@@ -2160,9 +2699,9 @@
             {
                 levelstoragesource$levelstorageaccess.close();
             }
-            catch (IOException ioexception1)
+            catch (IOException ioexception11)
             {
-                LOGGER.warn("Failed to unlock access to level {}", p_91220_, ioexception1);
+                LOGGER.warn("Failed to unlock access to level {}", worldName, ioexception11);
             }
         }
     }
@@ -2185,9 +2724,9 @@
                 component1 = new TranslatableComponent("selectWorld.backupWarning.experimental");
             }
 
-            this.setScreen(new BackupConfirmScreen((Screen)null, (p_91229_, p_91230_) ->
+            this.setScreen(new BackupConfirmScreen((Screen)null, (editMode, checkedBox) ->
             {
-                if (p_91229_)
+                if (editMode)
                 {
                     EditWorldScreen.makeBackupAndShowToast(this.levelSource, p_91145_);
                 }
@@ -2197,9 +2736,9 @@
         }
         else
         {
-            this.setScreen(new ConfirmScreen((p_91199_) ->
+            this.setScreen(new ConfirmScreen((confirm) ->
             {
-                if (p_91199_)
+                if (confirm)
                 {
                     p_91147_.run();
                 }
@@ -2210,10 +2749,10 @@
                     {
                         levelstoragesource$levelstorageaccess.deleteLevel();
                     }
-                    catch (IOException ioexception)
+                    catch (IOException ioexception1)
                     {
                         SystemToast.onWorldDeleteFailure(this, p_91145_);
-                        LOGGER.error("Failed to delete world {}", p_91145_, ioexception);
+                        LOGGER.error("Failed to delete world {}", p_91145_, ioexception1);
                     }
                 }
             }, new TranslatableComponent("selectWorld.backupQuestion.experimental"), new TranslatableComponent("selectWorld.backupWarning.experimental"), CommonComponents.GUI_PROCEED, CommonComponents.GUI_CANCEL));
@@ -2234,15 +2773,22 @@
             WorldData worlddata = p_91193_.apply(p_91195_, p_91191_, serverresources.getResourceManager(), datapackconfig1);
             return new Minecraft.ServerStem(packrepository, serverresources, worlddata);
         }
-        catch (ExecutionException | InterruptedException interruptedexception)
+        catch (InterruptedException | ExecutionException executionexception)
         {
             packrepository.close();
-            throw interruptedexception;
+            throw executionexception;
         }
     }
 
     public void setLevel(ClientLevel p_91157_)
     {
+        this.vrPlayer.setRoomOrigin(0.0D, 0.0D, 0.0D, true);
+
+        if (this.level != null)
+        {
+            Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, this.level));
+        }
+
         ProgressScreen progressscreen = new ProgressScreen();
         progressscreen.progressStartNoAbort(new TranslatableComponent("connect.joining"));
         this.updateScreenAndTick(progressscreen);
@@ -2279,12 +2825,15 @@
         IntegratedServer integratedserver = this.singleplayerServer;
         this.singleplayerServer = null;
         this.gameRenderer.resetData();
+        Reflector.call(Reflector.ClientHooks_firePlayerLogout, this.gameMode, this.player);
         this.gameMode = null;
         NarratorChatListener.INSTANCE.clear();
         this.updateScreenAndTick(p_91321_);
 
         if (this.level != null)
         {
+            Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.WorldEvent_Unload_Constructor, this.level));
+
             if (integratedserver != null)
             {
                 this.profiler.push("waitForServer");
@@ -2301,6 +2850,7 @@
             this.gui.onDisconnected();
             this.currentServer = null;
             this.isLocalServer = false;
+            Reflector.call(Reflector.ClientHooks_handleClientWorldClosing, this.level);
             this.game.onLeaveGameSession();
         }
 
@@ -2334,6 +2884,7 @@
         this.particleEngine.setLevel(p_91325_);
         BlockEntityRenderDispatcher.instance.setLevel(p_91325_);
         this.updateTitle();
+        Reflector.call(Reflector.MinecraftForgeClient_clearRenderCache);
     }
 
     public boolean allowsMultiplayer()
@@ -2393,6 +2944,18 @@
     {
         if (this.hitResult != null && this.hitResult.getType() != HitResult.Type.MISS)
         {
+            Object object = Reflector.call(Reflector.ForgeHooksClient_OnClickInput, 2, this.options.keyPickItem, InteractionHand.MAIN_HAND);
+
+            if (object != null && !Reflector.callBoolean(object, Reflector.Event_isCanceled))
+            {
+                Reflector.call(Reflector.ForgeHooks_onPickBlock, this.hitResult, this.player, this.level);
+            }
+
+            if (object != null)
+            {
+                return;
+            }
+
             boolean flag = this.player.abilities.instabuild;
             BlockEntity blockentity = null;
             HitResult.Type hitresult$type = this.hitResult.getType();
@@ -2554,6 +3117,8 @@
                 }
             }
         }
+
+        this.physicalGuiManager.init(this.player);
     }
 
     private ItemStack addCustomNbtData(ItemStack p_91123_, BlockEntity p_91124_)
@@ -2672,9 +3237,9 @@
 
     public CompletableFuture<Void> delayTextureReload()
     {
-        return this.submit(this::reloadResourcePacks).thenCompose((p_91249_) ->
+        return this.submit(this::reloadResourcePacks).thenCompose((voidIn) ->
         {
-            return p_91249_;
+            return voidIn;
         });
     }
 
@@ -3068,7 +3633,7 @@
             supplier = adaptV4(supplier);
         }
 
-        return new Pack(p_91232_, p_91233_, supplier, p_91235_, p_91236_, p_91237_, p_91238_);
+        return Reflector.IForgeIResourcePack_isHidden.exists() ? (Pack)Reflector.newInstance(Reflector.ClientResourcePackInfo_Constructor, p_91232_, p_91233_, supplier, p_91235_, p_91236_, p_91237_, p_91238_, Reflector.callBoolean(p_91235_, Reflector.IForgeIResourcePack_isHidden)) : new Pack(p_91232_, p_91233_, supplier, p_91235_, p_91236_, p_91237_, p_91238_);
     }
 
     private static Supplier<PackResources> adaptV3(Supplier<PackResources> p_91331_)
@@ -3092,6 +3657,575 @@
         this.modelManager.updateMaxMipLevel(p_91313_);
     }
 
+    public void printChatMessage(String msg)
+    {
+        if (this.level != null)
+        {
+            Component component = new TextComponent(msg);
+            this.gui.getChat().addMessage(component);
+        }
+    }
+
+    public void printGLMatrix(String derp)
+    {
+        GL11.glGetFloatv(2982, this.matrixBuffer);
+        ((Buffer)this.matrixBuffer).rewind();
+        Matrix4f matrix4f = new Matrix4f();
+        matrix4f.load(this.matrixBuffer);
+        System.out.println(derp + "\r\n" + matrix4f.toString());
+        ((Buffer)this.matrixBuffer).rewind();
+    }
+
+    public void clearGLError()
+    {
+        int i = GL11.glGetError();
+    }
+
+    private void copyToMirror()
+    {
+        if (this.vrSettings.displayMirrorMode < 10)
+        {
+            this.vrSettings.displayMirrorMode = 16;
+        }
+
+        if (this.vrSettings.displayMirrorMode > 16)
+        {
+            this.vrSettings.displayMirrorMode = 16;
+        }
+
+        if (this.vrSettings.displayMirrorMode == 10 && this.vr.isHMDTracking())
+        {
+            this.notifyMirror("Mirror is OFF", true, 1000);
+        }
+        else if (this.vrSettings.displayMirrorMode == 15)
+        {
+            if (VRShaders._DepthMask_shaderProgramId != 0)
+            {
+                this.doMixedRealityMirror();
+            }
+            else
+            {
+                this.notifyMirror("Shader compile failed, see log", true, 10000);
+            }
+        }
+        else if (this.vrSettings.displayMirrorMode == 11)
+        {
+            RenderTarget rendertarget = this.vrRenderer.framebufferEye0;
+            RenderTarget rendertarget1 = this.vrRenderer.framebufferEye1;
+
+            if (rendertarget != null)
+            {
+                rendertarget.framebufferRenderExt(0, this.window.getScreenWidth() / 2, this.window.getScreenHeight(), 0, true, 0.0F, 0.0F, false);
+            }
+
+            if (rendertarget1 != null)
+            {
+                rendertarget1.framebufferRenderExt(this.window.getScreenWidth() / 2, this.window.getScreenWidth() / 2, this.window.getScreenHeight(), 0, true, 0.0F, 0.0F, false);
+            }
+        }
+        else
+        {
+            float f = 0.0F;
+            float f1 = 0.0F;
+            boolean flag = false;
+            RenderTarget rendertarget2 = this.vrRenderer.framebufferEye0;
+
+            if (this.vrSettings.displayMirrorMode == 13)
+            {
+                rendertarget2 = this.vrRenderer.framebufferUndistorted;
+            }
+            else if (this.vrSettings.displayMirrorMode == 14)
+            {
+                rendertarget2 = this.vrRenderer.framebufferMR;
+            }
+            else if (this.vrSettings.displayMirrorMode != 12 && this.vrSettings.displayMirrorMode != 10)
+            {
+                if (this.vrSettings.displayMirrorMode == 16)
+                {
+                    if (!this.vrSettings.displayMirrorLeftEye)
+                    {
+                        rendertarget2 = this.vrRenderer.framebufferEye1;
+                    }
+
+                    f = 0.15F;
+                    f1 = 0.15F;
+                    flag = true;
+                }
+            }
+            else if (!this.vrSettings.displayMirrorLeftEye)
+            {
+                rendertarget2 = this.vrRenderer.framebufferEye1;
+            }
+
+            if (rendertarget2 != null)
+            {
+                rendertarget2.framebufferRenderExt(0, this.window.getScreenWidth(), this.window.getScreenHeight(), 0, true, f, f1, flag);
+            }
+        }
+    }
+
+    private void doMixedRealityMirror()
+    {
+        boolean flag = Config.isShaders();
+        boolean flag1 = this.vrSettings.mixedRealityUnityLike && this.vrSettings.mixedRealityAlphaMask;
+
+        if (!flag1)
+        {
+            GlStateManager._clearColor((float)this.vrSettings.mixedRealityKeyColor.getRed() / 255.0F, (float)this.vrSettings.mixedRealityKeyColor.getGreen() / 255.0F, (float)this.vrSettings.mixedRealityKeyColor.getBlue() / 255.0F, 1.0F);
+        }
+        else
+        {
+            GlStateManager._clearColor(0.0F, 0.0F, 0.0F, 1.0F);
+        }
+
+        GlStateManager.clear(16640);
+        Vec3 vec3 = this.vrPlayer.vrdata_room_pre.getHeadPivot().subtract(this.vrPlayer.vrdata_room_pre.getEye(RenderPass.THIRD).getPosition());
+        com.mojang.math.Matrix4f matrix4f = this.vrPlayer.vrdata_room_pre.getEye(RenderPass.THIRD).getMatrix().transposed().toMCMatrix();
+        Vector3 vector3 = this.vrPlayer.vrdata_room_pre.getEye(RenderPass.THIRD).getMatrix().transform(Vector3.forward());
+        GlStateManager._glUseProgram(VRShaders._DepthMask_shaderProgramId);
+        this.gameRenderer.thirdPassProjectionMatrix.store(this.matrixBuffer);
+        ((Buffer)this.matrixBuffer).rewind();
+        ARBShaderObjects.glUniformMatrix4fvARB(VRShaders._DepthMask_projectionMatrix, false, this.matrixBuffer);
+        matrix4f.store(this.matrixBuffer);
+        ((Buffer)this.matrixBuffer).rewind();
+        ARBShaderObjects.glUniformMatrix4fvARB(VRShaders._DepthMask_viewMatrix, false, this.matrixBuffer);
+        ARBShaderObjects.glUniform1iARB(VRShaders._DepthMask_colorTexUniform, 1);
+        ARBShaderObjects.glUniform1iARB(VRShaders._DepthMask_depthTexUniform, 2);
+        ARBShaderObjects.glUniform3fARB(VRShaders._DepthMask_hmdViewPosition, (float)vec3.x, (float)vec3.y, (float)vec3.z);
+        ARBShaderObjects.glUniform3fARB(VRShaders._DepthMask_hmdPlaneNormal, -vector3.getX(), 0.0F, -vector3.getZ());
+        ARBShaderObjects.glUniform3fARB(VRShaders._DepthMask_keyColorUniform, (float)this.vrSettings.mixedRealityKeyColor.getRed() / 255.0F, (float)this.vrSettings.mixedRealityKeyColor.getGreen() / 255.0F, (float)this.vrSettings.mixedRealityKeyColor.getBlue() / 255.0F);
+        ARBShaderObjects.glUniform1iARB(VRShaders._DepthMask_alphaModeUniform, flag1 ? 1 : 0);
+        GlStateManager._activeTexture(33985);
+        this.vrRenderer.framebufferMR.bindRead();
+        GlStateManager._activeTexture(33986);
+
+        if (flag && Shaders.dfb != null)
+        {
+            GlStateManager._bindTexture(Shaders.dfb.depthTextures.get(0));
+        }
+        else
+        {
+            GlStateManager._bindTexture(this.vrRenderer.framebufferMR.depthBufferId);
+        }
+
+        GlStateManager._activeTexture(33984);
+
+        for (int i = 0; i < (flag1 ? 3 : 2); ++i)
+        {
+            int j = this.window.getScreenWidth() / 2;
+            int k = this.window.getScreenHeight();
+            int l = this.window.getScreenWidth() / 2 * i;
+            int i1 = 0;
+
+            if (this.vrSettings.mixedRealityUnityLike)
+            {
+                j = this.window.getScreenWidth() / 2;
+                k = this.window.getScreenHeight() / 2;
+
+                if (this.vrSettings.mixedRealityAlphaMask && i == 2)
+                {
+                    l = this.window.getScreenWidth() / 2;
+                    i1 = this.window.getScreenHeight() / 2;
+                }
+                else
+                {
+                    l = 0;
+                    i1 = this.window.getScreenHeight() / 2 * (1 - i);
+                }
+            }
+
+            ARBShaderObjects.glUniform2fARB(VRShaders._DepthMask_resolutionUniform, (float)j, (float)k);
+            ARBShaderObjects.glUniform2fARB(VRShaders._DepthMask_positionUniform, (float)l, (float)i1);
+            ARBShaderObjects.glUniform1iARB(VRShaders._DepthMask_passUniform, i);
+            this.vrRenderer.framebufferMR.framebufferRenderExt(l, j, k, i1, true, 0.0F, 0.0F, false);
+        }
+
+        GlStateManager._glUseProgram(0);
+
+        if (this.vrSettings.mixedRealityUnityLike)
+        {
+            if (this.vrSettings.mixedRealityMRPlusUndistorted)
+            {
+                this.vrRenderer.framebufferUndistorted.framebufferRenderExt(this.window.getScreenWidth() / 2, this.window.getScreenWidth() / 2, this.window.getScreenHeight() / 2, 0, true, 0.0F, 0.0F, false);
+            }
+            else
+            {
+                this.vrRenderer.framebufferEye0.framebufferRenderExt(this.window.getScreenWidth() / 2, this.window.getScreenWidth() / 2, this.window.getScreenHeight() / 2, 0, true, 0.0F, 0.0F, false);
+            }
+        }
+    }
+
+    private void checkGLError(String message)
+    {
+        Config.checkGlError(message);
+    }
+
+    public void initMinecrift() throws Exception
+    {
+        this.vr.init();
+
+        if (!this.oculus)
+        {
+            this.vrRenderer = new OpenVRStereoRenderer(this.vr);
+        }
+        else
+        {
+            this.vrRenderer = new OVR_StereoRenderer(this.vr);
+        }
+
+        this.vrPlayer = new VRPlayer();
+        this.vrRenderer.lastGuiScale = this.options.guiScale;
+        this.vrPlayer.registerTracker(this.backpackTracker);
+        this.vrPlayer.registerTracker(this.bowTracker);
+        this.vrPlayer.registerTracker(this.climbTracker);
+        this.vrPlayer.registerTracker(this.autoFood);
+        this.vrPlayer.registerTracker(this.jumpTracker);
+        this.vrPlayer.registerTracker(this.rowTracker);
+        this.vrPlayer.registerTracker(this.runTracker);
+        this.vrPlayer.registerTracker(this.sneakTracker);
+        this.vrPlayer.registerTracker(this.swimTracker);
+        this.vrPlayer.registerTracker(this.swingTracker);
+        this.vrPlayer.registerTracker(this.interactTracker);
+        this.vrPlayer.registerTracker(this.teleportTracker);
+        this.vrPlayer.registerTracker(this.horseTracker);
+        this.vrPlayer.registerTracker(this.vehicleTracker);
+        this.vrPlayer.registerTracker(this.physicalGuiManager);
+        this.vrPlayer.registerTracker(this.crawlTracker);
+        this.vrPlayer.registerTracker(this.cameraTracker);
+    }
+
+    private static void sleepNanos(long nanoDelay)
+    {
+        long i = System.nanoTime() + nanoDelay;
+
+        do
+        {
+            Thread.yield();
+        }
+        while (System.nanoTime() < i);
+    }
+
+    private void addRunTickTimeNanos(long runTickTime)
+    {
+        int i = 0;
+        this.medianRunTickTimeNanos = runTickTime;
+
+        if (this.vrSettings.smoothRunTickCount < 1)
+        {
+            this.vrSettings.smoothRunTickCount = 1;
+        }
+
+        if (this.vrSettings.smoothRunTickCount % 2 == 0)
+        {
+            ++this.vrSettings.smoothRunTickCount;
+        }
+
+        this.runTickTimeNanos.addFirst(runTickTime);
+
+        while (this.runTickTimeNanos.size() > this.vrSettings.smoothRunTickCount)
+        {
+            this.runTickTimeNanos.removeLast();
+        }
+
+        if (this.runTickTimeNanos.size() == this.vrSettings.smoothRunTickCount)
+        {
+            Long[] along = new Long[this.runTickTimeNanos.size()];
+
+            for (Iterator iterator = this.runTickTimeNanos.iterator(); iterator.hasNext(); ++i)
+            {
+                along[i] = (Long)iterator.next();
+            }
+
+            Arrays.sort((Object[])along);
+            this.medianRunTickTimeNanos = along[along.length / 2];
+        }
+    }
+
+    private long getMedianRunTickTimeNanos()
+    {
+        return this.medianRunTickTimeNanos;
+    }
+
+    public void triggerYawTransition(boolean isPositive)
+    {
+    }
+
+    public void print(String s)
+    {
+        s = s.replace("\n", "\n[Minecrift] ");
+        System.out.println("[Minecrift] " + s);
+    }
+
+    private void renderSingleView(int eye, float nano, boolean renderworld)
+    {
+        GlStateManager._clearColor(0.0F, 0.0F, 0.0F, 1.0F);
+        GlStateManager.clear(16640);
+        GlStateManager._enableTexture();
+        GlStateManager._enableDepthTest();
+        this.profiler.push("updateCameraAndRender");
+        this.gameRenderer.render(nano, System.nanoTime(), renderworld);
+        this.profiler.pop();
+        this.checkGLError("post game render " + eye);
+
+        if (this.currentPass == RenderPass.LEFT || this.currentPass == RenderPass.RIGHT)
+        {
+            this.profiler.push("postprocesseye");
+            RenderTarget rendertarget = this.mainRenderTarget;
+
+            if (this.vrSettings.useFsaa)
+            {
+                this.profiler.push("fsaa");
+                this.vrRenderer.doFSAA(Config.isShaders());
+                rendertarget = this.vrRenderer.fsaaLastPassResultFBO;
+                this.checkGLError("fsaa " + eye);
+                this.profiler.pop();
+            }
+
+            if (this.currentPass == RenderPass.LEFT)
+            {
+                this.vrRenderer.framebufferEye0.bindWrite(true);
+            }
+            else
+            {
+                this.vrRenderer.framebufferEye1.bindWrite(true);
+            }
+
+            if (this.vrSettings.useFOVReduction && this.vrPlayer.getFreeMove())
+            {
+                if (this.player != null && (Math.abs(this.player.zza) > 0.0F || Math.abs(this.player.xxa) > 0.0F))
+                {
+                    this.fov = (float)((double)this.fov - 0.05D);
+
+                    if (this.fov < this.vrSettings.fovReductionMin)
+                    {
+                        this.fov = this.vrSettings.fovReductionMin;
+                    }
+                }
+                else
+                {
+                    this.fov = (float)((double)this.fov + 0.01D);
+
+                    if ((double)this.fov > 0.8D)
+                    {
+                        this.fov = 0.8F;
+                    }
+                }
+            }
+            else
+            {
+                this.fov = 1.0F;
+            }
+
+            ARBShaderObjects.glUseProgramObjectARB(VRShaders._FOVReduction_shaderProgramId);
+            ARBShaderObjects.glUniform1iARB(VRShaders._FOVReduction_TextureUniform, 0);
+            ARBShaderObjects.glUniform1fARB(VRShaders._FOVReduction_OffsetUniform, this.vrSettings.fovRedutioncOffset);
+            float f = 0.0F;
+            float f1 = 0.0F;
+            float f2 = (float)Util.getMillis() / 1000.0F;
+
+            if (this.player != null && this.level != null)
+            {
+                if (this.gameRenderer.wasinwater != this.gameRenderer.inwater)
+                {
+                    this.watereffect = 2.3F;
+                }
+                else
+                {
+                    if (this.gameRenderer.inwater)
+                    {
+                        this.watereffect -= 0.008333334F;
+                    }
+                    else
+                    {
+                        this.watereffect -= 0.016666668F;
+                    }
+
+                    if (this.watereffect < 0.0F)
+                    {
+                        this.watereffect = 0.0F;
+                    }
+                }
+
+                this.gameRenderer.wasinwater = this.gameRenderer.inwater;
+
+                if (Config.isShaders())
+                {
+                    this.watereffect = 0.0F;
+                }
+
+                if (this.gameRenderer.inportal)
+                {
+                    this.portaleffect = 1.0F;
+                }
+                else
+                {
+                    this.portaleffect -= 0.016666668F;
+
+                    if (this.portaleffect < 0.0F)
+                    {
+                        this.portaleffect = 0.0F;
+                    }
+                }
+
+                ItemStack itemstack = this.player.inventory.getArmor(3);
+
+                if (itemstack.getItem() == Blocks.CARVED_PUMPKIN.asItem() && (!itemstack.hasTag() || itemstack.getTag().getInt("CustomModelData") == 0))
+                {
+                    this.pumpkineffect = 1.0F;
+                }
+
+                float f3 = (float)this.player.hurtTime - nano;
+                float f4 = 1.0F - this.player.getHealth() / this.player.getMaxHealth();
+                f4 = (f4 - 0.5F) * 0.75F;
+
+                if (f3 > 0.0F)
+                {
+                    f3 = f3 / (float)this.player.hurtDuration;
+                    f3 = f4 + Mth.sin(f3 * f3 * f3 * f3 * (float)Math.PI) * 0.5F;
+                    f = f3;
+                }
+                else
+                {
+                    f = (float)((double)f4 * Math.abs(Math.sin((double)(2.5F * f2) / ((double)(1.0F - f4) + 0.1D))));
+
+                    if (this.player.isCreative())
+                    {
+                        f = 0.0F;
+                    }
+                }
+
+                if (this.player.isSleeping() && (double)f1 < 0.8D)
+                {
+                    f1 = 0.8F;
+                }
+
+                if (this.vr.isWalkingAbout && (double)f1 < 0.8D)
+                {
+                    f1 = 0.5F;
+                }
+            }
+            else
+            {
+                this.watereffect = 0.0F;
+                this.portaleffect = 0.0F;
+                this.pumpkineffect = 0.0F;
+            }
+
+            if (this.pumpkineffect > 0.0F)
+            {
+                ARBShaderObjects.glUniform1fARB(VRShaders._FOVReduction_RadiusUniform, 0.3F);
+                ARBShaderObjects.glUniform1fARB(VRShaders._FOVReduction_BorderUniform, 0.0F);
+            }
+            else
+            {
+                ARBShaderObjects.glUniform1fARB(VRShaders._FOVReduction_RadiusUniform, this.fov);
+                ARBShaderObjects.glUniform1fARB(VRShaders._FOVReduction_BorderUniform, 0.06F);
+            }
+
+            ARBShaderObjects.glUniform1fARB(VRShaders._Overlay_HealthAlpha, f);
+            ARBShaderObjects.glUniform1fARB(VRShaders._Overlay_BlackAlpha, f1);
+            ARBShaderObjects.glUniform1fARB(VRShaders._Overlay_time, f2);
+            ARBShaderObjects.glUniform1fARB(VRShaders._Overlay_waterAmplitude, this.watereffect);
+            ARBShaderObjects.glUniform1fARB(VRShaders._Overlay_portalAmplitutde, this.portaleffect);
+            ARBShaderObjects.glUniform1fARB(VRShaders._Overlay_pumpkinAmplitutde, this.pumpkineffect);
+            RenderPass renderpass = this.currentPass;
+            ARBShaderObjects.glUniform1iARB(VRShaders._Overlay_eye, this.currentPass == RenderPass.LEFT ? 1 : -1);
+            rendertarget.blitToScreen(this.vrRenderer.framebufferEye0.viewWidth, this.vrRenderer.framebufferEye0.viewHeight);
+            ARBShaderObjects.glUseProgramObjectARB(0);
+            this.checkGLError("post overlay" + eye);
+            this.profiler.pop();
+        }
+
+        if (this.currentPass == RenderPass.CAMERA)
+        {
+            this.profiler.push("cameracopy");
+            this.vrRenderer.cameraFramebuffer.bindWrite(true);
+            GlStateManager._clearColor(0.0F, 0.0F, 0.0F, 1.0F);
+            GlStateManager.clear(16640);
+            this.vrRenderer.cameraRenderFramebuffer.framebufferRenderExt(0, this.vrRenderer.cameraFramebuffer.viewWidth, this.vrRenderer.cameraFramebuffer.viewHeight, 0, true, 0.0F, 0.0F, false);
+            this.profiler.pop();
+        }
+    }
+
+    public ItemColors getItemColors()
+    {
+        return this.itemColors;
+    }
+
+    public SearchRegistry getSearchTreeManager()
+    {
+        return this.searchRegistry;
+    }
+
+    public void loadClassPath()
+    {
+        File file1 = new File("../src/resources");
+
+        if (file1.exists() && file1.isDirectory())
+        {
+            Method method = null;
+
+            try
+            {
+                method = URLClassLoader.class.getDeclaredMethod("addURL", URL.class);
+                method.setAccessible(true);
+                method.invoke(ClassLoader.getSystemClassLoader(), file1.toURI().toURL());
+            }
+            catch (Exception exception)
+            {
+                exception.printStackTrace();
+            }
+        }
+    }
+
+    public void notifyMirror(String text, boolean clear, int lengthMs)
+    {
+        this.mirroNotifyStart = System.currentTimeMillis();
+        this.mirroNotifyLen = (long)lengthMs;
+        this.mirrorNotifyText = text;
+        this.mirrorNotifyClear = clear;
+    }
+
+    private void drawNotifyMirror()
+    {
+        if (System.currentTimeMillis() < this.mirroNotifyStart + this.mirroNotifyLen)
+        {
+            RenderSystem.viewport(0, 0, this.window.getScreenWidth(), this.window.getScreenHeight());
+            RenderSystem.matrixMode(5889);
+            RenderSystem.loadIdentity();
+            RenderSystem.ortho(0.0D, (double)this.window.getScreenWidth() / 4.0D, (double)this.window.getScreenHeight() / 4.0D, 0.0D, -10.0D, 10.0D);
+            RenderSystem.matrixMode(5888);
+            RenderSystem.loadIdentity();
+            RenderSystem.clear(256, ON_OSX);
+            RenderSystem.fogMode(GlStateManager.FogMode.EXP2);
+            RenderSystem.fogDensity(0.0F);
+            RenderSystem.disableFog();
+
+            if (this.mirrorNotifyClear)
+            {
+                RenderSystem.clearColor(0.0F, 0.0F, 0.0F, 0.0F);
+                RenderSystem.clear(16384, ON_OSX);
+            }
+
+            int i = this.window.getScreenWidth() / 22;
+            ArrayList<String> arraylist = new ArrayList<>();
+
+            if (this.mirrorNotifyText != null)
+            {
+                Utils.wordWrap(this.mirrorNotifyText, i, arraylist);
+            }
+
+            int j = 1;
+            int k = 12;
+
+            for (String s : arraylist)
+            {
+                this.font.draw(new PoseStack(), s, 1.0F, (float)j, 16777215);
+                j += 12;
+            }
+        }
+    }
+
     static enum ExperimentalDialogType
     {
         NONE,
