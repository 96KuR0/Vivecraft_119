--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -6,6 +6,7 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Random;
@@ -23,6 +24,8 @@
 import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.SectionPos;
+import net.minecraft.core.particles.ItemParticleOption;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.network.chat.ChatType;
@@ -51,6 +54,7 @@
 import net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket;
 import net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket;
 import net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket;
@@ -105,7 +109,10 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ServerItemCooldowns;
+import net.minecraft.world.item.UseAnim;
 import net.minecraft.world.item.WrittenBookItem;
+import net.minecraft.world.item.alchemy.PotionUtils;
+import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.ChunkPos;
@@ -128,8 +135,12 @@
 import net.minecraft.world.scores.Score;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import net.minecraftforge.common.util.ITeleporter;
+import net.optifine.reflect.Reflector;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
 
 public class ServerPlayer extends Player implements ContainerListener
 {
@@ -175,6 +186,9 @@
     public boolean ignoreSlotUpdateHack;
     public int latency;
     public boolean wonGame;
+    private String language = "en_us";
+    private boolean hasTabListName = false;
+    private Component tabListDisplayName = null;
 
     public ServerPlayer(MinecraftServer p_8947_, ServerLevel p_8948_, GameProfile p_8949_, ServerPlayerGameMode p_8950_)
     {
@@ -334,9 +348,9 @@
             p_9197_.putInt("SpawnZ", this.respawnPosition.getZ());
             p_9197_.putBoolean("SpawnForced", this.respawnForced);
             p_9197_.putFloat("SpawnAngle", this.respawnAngle);
-            ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location()).resultOrPartial(LOGGER::error).ifPresent((p_9134_) ->
+            ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location()).resultOrPartial(LOGGER::error).ifPresent((p_241148_1_) ->
             {
-                p_9197_.put("SpawnDimension", p_9134_);
+                p_9197_.put("SpawnDimension", p_241148_1_);
             });
         }
     }
@@ -370,6 +384,28 @@
     public void initMenu()
     {
         this.containerMenu.addSlotListener(this);
+        ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.getUUID());
+
+        if (serverviveplayer != null && serverviveplayer.isVR() && this.random.nextInt(20) == 3)
+        {
+            ItemStack itemstack;
+
+            if (this.random.nextInt(2) == 1)
+            {
+                itemstack = (new ItemStack(Items.PUMPKIN_PIE)).setHoverName(new TextComponent("EAT ME"));
+            }
+            else
+            {
+                itemstack = PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER).setHoverName(new TextComponent("DRINK ME"));
+            }
+
+            itemstack.getTag().putInt("HideFlags", 32);
+
+            if (this.inventory.add(itemstack))
+            {
+                this.inventoryMenu.broadcastChanges();
+            }
+        }
     }
 
     public void onEnterCombat()
@@ -465,6 +501,7 @@
             if (!this.isSpectator() || this.level.hasChunkAt(this.blockPosition()))
             {
                 super.tick();
+                NetworkHelper.overridePose(this);
             }
 
             for (int i = 0; i < this.inventory.getContainerSize(); ++i)
@@ -537,9 +574,9 @@
                 CriteriaTriggers.LOCATION.trigger(this);
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking player");
+            CrashReport crashreport = CrashReport.forThrowable(throwable1, "Ticking player");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Player being ticked");
             this.fillCrashReportCategory(crashreportcategory);
             throw new ReportedException(crashreport);
@@ -548,96 +585,99 @@
 
     private void updateScoreForCriteria(ObjectiveCriteria p_9105_, int p_9106_)
     {
-        this.getScoreboard().forAllObjectives(p_9105_, this.getScoreboardName(), (p_9178_) ->
+        this.getScoreboard().forAllObjectives(p_9105_, this.getScoreboardName(), (p_195397_1_) ->
         {
-            p_9178_.setScore(p_9106_);
+            p_195397_1_.setScore(p_9106_);
         });
     }
 
     public void die(DamageSource p_9035_)
     {
-        boolean flag = this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
-
-        if (flag)
+        if (!Reflector.callBoolean(Reflector.ForgeHooks_onLivingDeath, this, p_9035_))
         {
-            Component component = this.getCombatTracker().getDeathMessage();
-            this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, component), (p_9142_) ->
+            boolean flag = this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
+
+            if (flag)
             {
-                if (!p_9142_.isSuccess())
+                Component component = this.getCombatTracker().getDeathMessage();
+                this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, component), (p_212356_2_) ->
                 {
-                    int i = 256;
-                    String s = component.getString(256);
-                    Component component1 = new TranslatableComponent("death.attack.message_too_long", (new TextComponent(s)).withStyle(ChatFormatting.YELLOW));
-                    Component component2 = (new TranslatableComponent("death.attack.even_more_magic", this.getDisplayName())).withStyle((p_9152_) ->
+                    if (!p_212356_2_.isSuccess())
                     {
-                        return p_9152_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component1));
-                    });
-                    this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, component2));
-                }
-            });
-            Team team = this.getTeam();
+                        int i = 256;
+                        String s = component.getString(256);
+                        Component component1 = new TranslatableComponent("death.attack.message_too_long", (new TextComponent(s)).withStyle(ChatFormatting.YELLOW));
+                        Component component2 = (new TranslatableComponent("death.attack.even_more_magic", this.getDisplayName())).withStyle((p_212357_1_) ->
+                        {
+                            return p_212357_1_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, component1));
+                        });
+                        this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED, component2));
+                    }
+                });
+                Team team = this.getTeam();
 
-            if (team != null && team.getDeathMessageVisibility() != Team.Visibility.ALWAYS)
-            {
-                if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OTHER_TEAMS)
+                if (team != null && team.getDeathMessageVisibility() != Team.Visibility.ALWAYS)
                 {
-                    this.server.getPlayerList().broadcastToTeam(this, component);
+                    if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OTHER_TEAMS)
+                    {
+                        this.server.getPlayerList().broadcastToTeam(this, component);
+                    }
+                    else if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM)
+                    {
+                        this.server.getPlayerList().broadcastToAllExceptTeam(this, component);
+                    }
                 }
-                else if (team.getDeathMessageVisibility() == Team.Visibility.HIDE_FOR_OWN_TEAM)
+                else
                 {
-                    this.server.getPlayerList().broadcastToAllExceptTeam(this, component);
+                    this.server.getPlayerList().broadcastMessage(component, ChatType.SYSTEM, Util.NIL_UUID);
                 }
             }
             else
             {
-                this.server.getPlayerList().broadcastMessage(component, ChatType.SYSTEM, Util.NIL_UUID);
+                this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED));
             }
-        }
-        else
-        {
-            this.connection.send(new ClientboundPlayerCombatPacket(this.getCombatTracker(), ClientboundPlayerCombatPacket.Event.ENTITY_DIED));
-        }
 
-        this.removeEntitiesOnShoulder();
+            this.removeEntitiesOnShoulder();
 
-        if (this.level.getGameRules().getBoolean(GameRules.RULE_FORGIVE_DEAD_PLAYERS))
-        {
-            this.tellNeutralMobsThatIDied();
-        }
+            if (this.level.getGameRules().getBoolean(GameRules.RULE_FORGIVE_DEAD_PLAYERS))
+            {
+                this.tellNeutralMobsThatIDied();
+            }
 
-        if (!this.isSpectator())
-        {
-            this.dropAllDeathLoot(p_9035_);
-        }
+            if (!this.isSpectator())
+            {
+                this.dropAllDeathLoot(p_9035_);
+            }
 
-        this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
-        LivingEntity livingentity = this.getKillCredit();
+            this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this.getScoreboardName(), Score::increment);
+            LivingEntity livingentity = this.getKillCredit();
 
-        if (livingentity != null)
-        {
-            this.awardStat(Stats.ENTITY_KILLED_BY.get(livingentity.getType()));
-            livingentity.awardKillScore(this, this.deathScore, p_9035_);
-            this.createWitherRose(livingentity);
-        }
+            if (livingentity != null)
+            {
+                this.awardStat(Stats.ENTITY_KILLED_BY.get(livingentity.getType()));
+                livingentity.awardKillScore(this, this.deathScore, p_9035_);
+                this.createWitherRose(livingentity);
+            }
 
-        this.level.broadcastEntityEvent(this, (byte)3);
-        this.awardStat(Stats.DEATHS);
-        this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_DEATH));
-        this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
-        this.clearFire();
-        this.setSharedFlag(0, false);
-        this.getCombatTracker().recheckStatus();
+            this.level.broadcastEntityEvent(this, (byte)3);
+            this.awardStat(Stats.DEATHS);
+            this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_DEATH));
+            this.resetStat(Stats.CUSTOM.get(Stats.TIME_SINCE_REST));
+            this.clearFire();
+            this.setSharedFlag(0, false);
+            this.getCombatTracker().recheckStatus();
+        }
     }
 
     private void tellNeutralMobsThatIDied()
     {
         AABB aabb = (new AABB(this.blockPosition())).inflate(32.0D, 10.0D, 32.0D);
-        this.level.getLoadedEntitiesOfClass(Mob.class, aabb).stream().filter((p_9188_) ->
+        this.level.getLoadedEntitiesOfClass(Mob.class, aabb).stream().filter((p_241155_0_) ->
         {
-            return p_9188_ instanceof NeutralMob;
-        }).forEach((p_9057_) ->
+            return p_241155_0_ instanceof NeutralMob;
+        }).forEach((p_241145_1_) ->
         {
-            ((NeutralMob)p_9057_).playerDied(this);
+            ((NeutralMob)p_241145_1_).playerDied(this);
         });
     }
 
@@ -753,73 +793,106 @@
     @Nullable
     public Entity changeDimension(ServerLevel p_9180_)
     {
-        this.isChangingDimension = true;
-        ServerLevel serverlevel = this.getLevel();
-        ResourceKey<Level> resourcekey = serverlevel.dimension();
+        return this.changeDimension(p_9180_, Reflector.ForgeHooks.exists() ? (ITeleporter)p_9180_.getPortalForcer() : null);
+    }
 
-        if (resourcekey == Level.END && p_9180_.dimension() == Level.OVERWORLD)
+    @Nullable
+    public Entity changeDimension(ServerLevel server, ITeleporter teleporter)
+    {
+        if (Reflector.ForgeHooks.exists() && !Reflector.callBoolean(Reflector.ForgeHooks_onTravelToDimension, this, server.dimension()))
         {
-            this.unRide();
-            this.getLevel().removePlayerImmediately(this);
-
-            if (!this.wonGame)
-            {
-                this.wonGame = true;
-                this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, this.seenCredits ? 0.0F : 1.0F));
-                this.seenCredits = true;
-            }
-
-            return this;
+            return null;
         }
         else
         {
-            LevelData leveldata = p_9180_.getLevelData();
-            this.connection.send(new ClientboundRespawnPacket(p_9180_.dimensionType(), p_9180_.dimension(), BiomeManager.obfuscateSeed(p_9180_.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_9180_.isDebug(), p_9180_.isFlat(), true));
-            this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
-            PlayerList playerlist = this.server.getPlayerList();
-            playerlist.sendPlayerPermissionLevel(this);
-            serverlevel.removePlayerImmediately(this);
-            this.removed = false;
-            PortalInfo portalinfo = this.findDimensionEntryPoint(p_9180_);
+            this.isChangingDimension = true;
+            ServerLevel serverlevel = this.getLevel();
+            ResourceKey<Level> resourcekey = serverlevel.dimension();
 
-            if (portalinfo != null)
+            if (resourcekey == Level.END && server.dimension() == Level.OVERWORLD)
             {
-                serverlevel.getProfiler().push("moving");
+                this.unRide();
 
-                if (resourcekey == Level.OVERWORLD && p_9180_.dimension() == Level.NETHER)
+                if (Reflector.ForgeHooks.exists())
                 {
-                    this.enteredNetherPosition = this.position();
+                    Reflector.callVoid(this.getLevel(), Reflector.ServerWorld_removePlayer, this, true);
                 }
-                else if (p_9180_.dimension() == Level.END)
+                else
                 {
-                    this.createEndPlatform(p_9180_, new BlockPos(portalinfo.pos));
+                    this.getLevel().removePlayerImmediately(this);
                 }
 
-                serverlevel.getProfiler().pop();
-                serverlevel.getProfiler().push("placing");
-                this.setLevel(p_9180_);
-                p_9180_.addDuringPortalTeleport(this);
-                this.setRot(portalinfo.yRot, portalinfo.xRot);
-                this.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z);
-                serverlevel.getProfiler().pop();
-                this.triggerDimensionChangeTriggers(serverlevel);
-                this.gameMode.setLevel(p_9180_);
-                this.connection.send(new ClientboundPlayerAbilitiesPacket(this.abilities));
-                playerlist.sendLevelInfo(this, p_9180_);
-                playerlist.sendAllPlayerInfo(this);
-
-                for (MobEffectInstance mobeffectinstance : this.getActiveEffects())
+                if (!this.wonGame)
                 {
-                    this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), mobeffectinstance));
+                    this.wonGame = true;
+                    this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.WIN_GAME, this.seenCredits ? 0.0F : 1.0F));
+                    this.seenCredits = true;
                 }
 
-                this.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
-                this.lastSentExp = -1;
-                this.lastSentHealth = -1.0F;
-                this.lastSentFood = -1;
+                return this;
             }
+            else
+            {
+                LevelData leveldata = server.getLevelData();
+                this.connection.send(new ClientboundRespawnPacket(server.dimensionType(), server.dimension(), BiomeManager.obfuscateSeed(server.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), server.isDebug(), server.isFlat(), true));
+                this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
+                PlayerList playerlist = this.server.getPlayerList();
+                playerlist.sendPlayerPermissionLevel(this);
+
+                if (Reflector.ForgeHooks.exists())
+                {
+                    Reflector.callVoid(serverlevel, Reflector.ServerWorld_removePlayer, this, true);
+                    Reflector.callVoid(this, Reflector.Entity_revive);
+                }
+                else
+                {
+                    serverlevel.removePlayerImmediately(this);
+                    this.removed = false;
+                }
+
+                this.removed = false;
+                PortalInfo portalinfo = this.findDimensionEntryPoint(server);
+
+                if (portalinfo != null)
+                {
+                    serverlevel.getProfiler().push("moving");
 
-            return this;
+                    if (resourcekey == Level.OVERWORLD && server.dimension() == Level.NETHER)
+                    {
+                        this.enteredNetherPosition = this.position();
+                    }
+                    else if (server.dimension() == Level.END)
+                    {
+                        this.createEndPlatform(server, new BlockPos(portalinfo.pos));
+                    }
+
+                    serverlevel.getProfiler().pop();
+                    serverlevel.getProfiler().push("placing");
+                    this.setLevel(server);
+                    server.addDuringPortalTeleport(this);
+                    this.setRot(portalinfo.yRot, portalinfo.xRot);
+                    this.moveTo(portalinfo.pos.x, portalinfo.pos.y, portalinfo.pos.z);
+                    serverlevel.getProfiler().pop();
+                    this.triggerDimensionChangeTriggers(serverlevel);
+                    this.gameMode.setLevel(server);
+                    this.connection.send(new ClientboundPlayerAbilitiesPacket(this.abilities));
+                    playerlist.sendLevelInfo(this, server);
+                    playerlist.sendAllPlayerInfo(this);
+
+                    for (MobEffectInstance mobeffectinstance : this.getActiveEffects())
+                    {
+                        this.connection.send(new ClientboundUpdateMobEffectPacket(this.getId(), mobeffectinstance));
+                    }
+
+                    this.connection.send(new ClientboundLevelEventPacket(1032, BlockPos.ZERO, 0, false));
+                    this.lastSentExp = -1;
+                    this.lastSentHealth = -1.0F;
+                    this.lastSentFood = -1;
+                    Reflector.call(Reflector.BasicEventHooks_firePlayerChangedDimensionEvent, this, resourcekey, server.dimension());
+                }
+
+                return this;
+            }
         }
     }
 
@@ -912,6 +985,18 @@
 
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_)
     {
+        Optional<BlockPos> optional = Optional.of(p_9115_);
+
+        if (Reflector.ForgeEventFactory_onPlayerSleepInBed.exists())
+        {
+            Player.BedSleepingProblem player$bedsleepingproblem = (Player.BedSleepingProblem)Reflector.call(Reflector.ForgeEventFactory_onPlayerSleepInBed, this, optional);
+
+            if (player$bedsleepingproblem != null)
+            {
+                return Either.left(player$bedsleepingproblem);
+            }
+        }
+
         Direction direction = this.level.getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
 
         if (!this.isSleeping() && this.isAlive())
@@ -931,8 +1016,14 @@
             else
             {
                 this.setRespawnPosition(this.level.dimension(), p_9115_, this.yRot, false, true);
+                boolean flag = this.level.isDay();
 
-                if (this.level.isDay())
+                if (Reflector.ForgeEventFactory_fireSleepingTimeCheck.exists())
+                {
+                    flag = !Reflector.callBoolean(Reflector.ForgeEventFactory_fireSleepingTimeCheck, this, optional);
+                }
+
+                if (flag)
                 {
                     return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
                 }
@@ -943,9 +1034,9 @@
                         double d0 = 8.0D;
                         double d1 = 5.0D;
                         Vec3 vec3 = Vec3.atBottomCenterOf(p_9115_);
-                        List<Monster> list = this.level.getEntitiesOfClass(Monster.class, new AABB(vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D), (p_9062_) ->
+                        List<Monster> list = this.level.getEntitiesOfClass(Monster.class, new AABB(vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D), (p_241146_1_) ->
                         {
-                            return p_9062_.isPreventingPlayerRest(this);
+                            return p_241146_1_.isPreventingPlayerRest(this);
                         });
 
                         if (!list.isEmpty())
@@ -954,7 +1045,7 @@
                         }
                     }
 
-                    Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight((p_9029_) ->
+                    Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight((p_241144_1_) ->
                     {
                         this.awardStat(Stats.SLEEP_IN_BED);
                         CriteriaTriggers.SLEPT_IN_BED.trigger(this);
@@ -978,7 +1069,14 @@
 
     private boolean bedInRange(BlockPos p_9117_, Direction p_9118_)
     {
-        return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
+        if (p_9118_ == null)
+        {
+            return false;
+        }
+        else
+        {
+            return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
+        }
     }
 
     private boolean isReachableBedBlock(BlockPos p_9223_)
@@ -1109,6 +1207,7 @@
                 this.connection.send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
                 abstractcontainermenu.addSlotListener(this);
                 this.containerMenu = abstractcontainermenu;
+                Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.containerMenu));
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -1130,6 +1229,7 @@
         this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, p_9060_.getContainerSize(), p_9059_.getId()));
         this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.inventory, p_9060_, p_9059_);
         this.containerMenu.addSlotListener(this);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.containerMenu));
     }
 
     public void openItemGui(ItemStack p_9082_, InteractionHand p_9083_)
@@ -1202,6 +1302,7 @@
     public void doCloseContainer()
     {
         this.containerMenu.removed(this);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Close_Constructor, this, this.containerMenu));
         this.containerMenu = this.inventoryMenu;
     }
 
@@ -1227,9 +1328,9 @@
     public void awardStat(Stat<?> p_9026_, int p_9027_)
     {
         this.stats.increment(this, p_9026_, p_9027_);
-        this.getScoreboard().forAllObjectives(p_9026_, this.getScoreboardName(), (p_8996_) ->
+        this.getScoreboard().forAllObjectives(p_9026_, this.getScoreboardName(), (p_195396_1_) ->
         {
-            p_8996_.add(p_9027_);
+            p_195396_1_.add(p_9027_);
         });
     }
 
@@ -1349,6 +1450,14 @@
         this.enteredNetherPosition = p_9016_.enteredNetherPosition;
         this.setShoulderEntityLeft(p_9016_.getShoulderEntityLeft());
         this.setShoulderEntityRight(p_9016_.getShoulderEntityRight());
+        CompoundTag compoundtag = (CompoundTag)Reflector.call(p_9016_, Reflector.Entity_getPersistentData);
+
+        if (compoundtag != null && compoundtag.contains("PlayerPersisted"))
+        {
+            ((CompoundTag)Reflector.call(this, Reflector.Entity_getPersistentData)).put("PlayerPersisted", compoundtag.getCompound("PlayerPersisted"));
+        }
+
+        Reflector.callVoid(Reflector.ForgeEventFactory_onPlayerClone, this, p_9016_, !p_9017_);
     }
 
     protected void onEffectAdded(MobEffectInstance p_9040_)
@@ -1456,9 +1565,9 @@
 
     public void sendMessage(Component p_9147_, ChatType p_9148_, UUID p_9149_)
     {
-        this.connection.send(new ClientboundChatPacket(p_9147_, p_9148_, p_9149_), (p_9139_) ->
+        this.connection.send(new ClientboundChatPacket(p_9147_, p_9148_, p_9149_), (p_241149_4_) ->
         {
-            if (!p_9139_.isSuccess() && (p_9148_ == ChatType.GAME_INFO || p_9148_ == ChatType.SYSTEM))
+            if (!p_241149_4_.isSuccess() && (p_9148_ == ChatType.GAME_INFO || p_9148_ == ChatType.SYSTEM))
             {
                 int i = 256;
                 String s = p_9147_.getString(256);
@@ -1481,6 +1590,11 @@
         this.canChatColor = p_9157_.getChatColors();
         this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, (byte)p_9157_.getModelCustomisation());
         this.getEntityData().set(DATA_PLAYER_MAIN_HAND, (byte)(p_9157_.getMainHand() == HumanoidArm.LEFT ? 0 : 1));
+
+        if (Reflector.ForgeHooks.exists())
+        {
+            this.language = Reflector.callString(p_9157_, Reflector.CClientSettingsPacket_getLanguage);
+        }
     }
 
     public ChatVisiblity getChatVisibility()
@@ -1588,7 +1702,13 @@
     @Nullable
     public Component getTabListDisplayName()
     {
-        return null;
+        if (!this.hasTabListName)
+        {
+            this.tabListDisplayName = (Component)Reflector.call(Reflector.ForgeEventFactory_getPlayerTabListDisplayName, this);
+            this.hasTabListName = true;
+        }
+
+        return this.tabListDisplayName;
     }
 
     public void swing(InteractionHand p_9031_)
@@ -1628,8 +1748,18 @@
             this.connection.send(new ClientboundRespawnPacket(p_9000_.dimensionType(), p_9000_.dimension(), BiomeManager.obfuscateSeed(p_9000_.getSeed()), this.gameMode.getGameModeForPlayer(), this.gameMode.getPreviousGameModeForPlayer(), p_9000_.isDebug(), p_9000_.isFlat(), true));
             this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
             this.server.getPlayerList().sendPlayerPermissionLevel(this);
-            serverlevel.removePlayerImmediately(this);
-            this.removed = false;
+
+            if (Reflector.ForgeHooks.exists())
+            {
+                Reflector.callVoid(serverlevel, Reflector.ServerWorld_removePlayer, this, true);
+                Reflector.callVoid(this, Reflector.Entity_revive);
+            }
+            else
+            {
+                serverlevel.removePlayerImmediately(this);
+                this.removed = false;
+            }
+
             this.moveTo(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
             this.setLevel(p_9000_);
             p_9000_.addDuringCommandTeleport(this);
@@ -1638,6 +1768,80 @@
             this.gameMode.setLevel(p_9000_);
             this.server.getPlayerList().sendLevelInfo(this, p_9000_);
             this.server.getPlayerList().sendAllPlayerInfo(this);
+            Reflector.call(Reflector.BasicEventHooks_firePlayerChangedDimensionEvent, this, serverlevel.dimension(), p_9000_.dimension());
+        }
+    }
+
+    public void sweepAttack()
+    {
+        ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.getUUID());
+
+        if (serverviveplayer != null && serverviveplayer.isVR())
+        {
+            Vec3 vec3 = serverviveplayer.getControllerDir(0);
+            float f = (float)Math.toDegrees(Math.atan2(vec3.x, -vec3.z));
+            double d0 = (double)(-Mth.sin(f * ((float)Math.PI / 180F)));
+            double d1 = (double)Mth.cos(f * ((float)Math.PI / 180F));
+            Vec3 vec31 = serverviveplayer.getControllerPos(0, this);
+
+            if (this.level instanceof ServerLevel)
+            {
+                ((ServerLevel)this.level).sendParticles(ParticleTypes.SWEEP_ATTACK, vec31.x + d0, vec31.y, vec31.z + d1, 0, d0, 0.0D, d1, 0.0D);
+            }
+        }
+        else
+        {
+            super.sweepAttack();
+        }
+    }
+
+    protected void triggerItemUseEffects(ItemStack p_21138_, int p_21139_)
+    {
+        if (!p_21138_.isEmpty() && this.isUsingItem())
+        {
+            if (p_21138_.getUseAnimation() == UseAnim.DRINK)
+            {
+                this.playSound(this.getDrinkingSound(p_21138_), 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+            }
+
+            if (p_21138_.getUseAnimation() == UseAnim.EAT)
+            {
+                this.addItemParticles(p_21138_, p_21139_);
+                this.playSound(this.getEatingSound(p_21138_), 0.5F + 0.5F * (float)this.random.nextInt(2), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+            }
+        }
+    }
+
+    private void addItemParticles(ItemStack stack, int count)
+    {
+        ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.getUUID());
+
+        for (int i = 0; i < count; ++i)
+        {
+            Vec3 vec3 = new Vec3(((double)this.random.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vec3 = vec3.xRot(-this.xRot * ((float)Math.PI / 180F));
+            vec3 = vec3.yRot(-this.yRot * ((float)Math.PI / 180F));
+            double d0 = (double)(-this.random.nextFloat()) * 0.6D - 0.3D;
+            Vec3 vec31 = new Vec3(((double)this.random.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+            vec31 = vec31.xRot(-this.xRot * ((float)Math.PI / 180F));
+            vec31 = vec31.yRot(-this.yRot * ((float)Math.PI / 180F));
+            vec31 = vec31.add(this.getX(), this.getEyeY(), this.getZ());
+
+            if (serverviveplayer != null && serverviveplayer.isVR())
+            {
+                InteractionHand interactionhand = this.getUsedItemHand();
+
+                if (interactionhand == InteractionHand.MAIN_HAND)
+                {
+                    vec31 = serverviveplayer.getControllerPos(0, this);
+                }
+                else
+                {
+                    vec31 = serverviveplayer.getControllerPos(1, this);
+                }
+            }
+
+            this.level.addParticle(new ItemParticleOption(ParticleTypes.ITEM, stack), vec31.x, vec31.y, vec31.z, vec3.x, vec3.y + 0.05D, vec3.z);
         }
     }
 
@@ -1664,26 +1868,29 @@
 
     public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_)
     {
-        if (p_9160_ != null)
+        if (!Reflector.callBoolean(Reflector.ForgeEventFactory_onPlayerSpawnSet, this, p_9160_ == null ? Level.OVERWORLD : p_9159_, p_9160_, p_9161_))
         {
-            boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
+            if (p_9160_ != null)
+            {
+                boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
 
-            if (p_9163_ && !flag)
+                if (p_9163_ && !flag)
+                {
+                    this.sendMessage(new TranslatableComponent("block.minecraft.set_spawn"), Util.NIL_UUID);
+                }
+
+                this.respawnPosition = p_9160_;
+                this.respawnDimension = p_9159_;
+                this.respawnAngle = p_9161_;
+                this.respawnForced = p_9162_;
+            }
+            else
             {
-                this.sendMessage(new TranslatableComponent("block.minecraft.set_spawn"), Util.NIL_UUID);
+                this.respawnPosition = null;
+                this.respawnDimension = Level.OVERWORLD;
+                this.respawnAngle = 0.0F;
+                this.respawnForced = false;
             }
-
-            this.respawnPosition = p_9160_;
-            this.respawnDimension = p_9159_;
-            this.respawnAngle = p_9161_;
-            this.respawnForced = p_9162_;
-        }
-        else
-        {
-            this.respawnPosition = null;
-            this.respawnDimension = Level.OVERWORLD;
-            this.respawnAngle = 0.0F;
-            this.respawnForced = false;
         }
     }
 
@@ -1731,7 +1938,28 @@
         }
         else
         {
-            this.level.addFreshEntity(itementity);
+            ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.getUUID());
+
+            if (serverviveplayer != null && serverviveplayer.isVR() && !p_9086_)
+            {
+                Vec3 vec3 = serverviveplayer.getControllerPos(0, this);
+                Vec3 vec31 = serverviveplayer.getControllerDir(0);
+                float f = 0.3F;
+                itementity.setDeltaMovement(vec31.x * (double)f, vec31.y * (double)f, vec31.z * (double)f);
+                itementity.setPos(vec3.x() + itementity.getDeltaMovement().x(), vec3.y() + itementity.getDeltaMovement().y(), vec3.z() + itementity.getDeltaMovement().z());
+            }
+
+            Collection<ItemEntity> collection = (Collection)Reflector.call(this, Reflector.Entity_captureDrops);
+
+            if (collection != null)
+            {
+                collection.add(itementity);
+            }
+            else
+            {
+                this.level.addFreshEntity(itementity);
+            }
+
             ItemStack itemstack = itementity.getItem();
 
             if (p_9087_)
@@ -1753,4 +1981,26 @@
     {
         return this.textFilter;
     }
+
+    public String getLanguage()
+    {
+        return this.language;
+    }
+
+    public void refreshTabListName()
+    {
+        Component component = this.tabListDisplayName;
+        this.tabListDisplayName = (Component)Reflector.call(Reflector.ForgeEventFactory_getPlayerTabListDisplayName, this);
+
+        if (!Objects.equals(component, this.tabListDisplayName))
+        {
+            this.getServer().getPlayerList().broadcastAll(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.UPDATE_DISPLAY_NAME, this));
+        }
+    }
+
+    @Nullable
+    public TextFilter getTextFilter()
+    {
+        return this.textFilter;
+    }
 }
