--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -33,6 +33,7 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.Connection;
+import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.TextComponent;
@@ -109,6 +110,8 @@
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PlayerRideableJumping;
+import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.ChatVisiblity;
@@ -147,9 +150,20 @@
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.optifine.reflect.Reflector;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.AimFixHandler;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.reflection.MCReflection;
+import io.netty.channel.Channel;
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, ServerGamePacketListener
 {
@@ -196,6 +210,21 @@
         p_9771_.setListener(this);
         this.player = p_9772_;
         p_9772_.connection = this;
+        
+        //Vivecraft
+        try
+        {
+        	((Channel)MCReflection.NetworkManager_channel.get(p_9771_)).pipeline().addBefore("packet_handler", "vr_aim_fix", new AimFixHandler(this.connection));
+        }
+        catch (Exception exception)
+        {
+        	if (!Reflector.fml_ModLoader.exists())
+        	{
+        		LOGGER.warn("{} failed adding VR aim fix", (Object)this.player.getName().getString());
+        	}
+        }
+        //
+
         p_9772_.getTextFilter().join();
     }
 
@@ -292,6 +321,8 @@
         {
             this.disconnect(new TranslatableComponent("multiplayer.disconnect.idling"));
         }
+
+        NetworkHelper.sendPosData(this.player);
     }
 
     public void resetPosition()
@@ -316,7 +347,7 @@
 
     public void disconnect(Component pTextComponent)
     {
-        this.connection.send(new ClientboundDisconnectPacket(pTextComponent), (p_9828_) ->
+        this.connection.send(new ClientboundDisconnectPacket(pTextComponent), (p_210161_2_) ->
         {
             this.connection.disconnect(pTextComponent);
         });
@@ -431,11 +462,13 @@
                 }
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot());
                 boolean flag2 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625D));
 
                 if (flag && (flag1 || !flag2))
                 {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot());
                     this.connection.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -1101,14 +1134,14 @@
 
     private boolean isPlayerCollidingWithAnythingNew(LevelReader p_9796_, AABB p_9797_)
     {
-        Stream<VoxelShape> stream = p_9796_.getCollisions(this.player, this.player.getBoundingBox().deflate((double)1.0E-5F), (p_9938_) ->
+        Stream<VoxelShape> stream = p_9796_.getCollisions(this.player, this.player.getBoundingBox().deflate((double)1.0E-5F), (p_241167_0_) ->
         {
             return true;
         });
         VoxelShape voxelshape = Shapes.create(p_9797_.deflate((double)1.0E-5F));
-        return stream.anyMatch((p_9800_) ->
+        return stream.anyMatch((p_241164_1_) ->
         {
-            return !Shapes.joinIsNotEmpty(p_9800_, voxelshape, BooleanOp.AND);
+            return !Shapes.joinIsNotEmpty(p_241164_1_, voxelshape, BooleanOp.AND);
         });
     }
 
@@ -1224,7 +1257,17 @@
 
         if (blockpos.getY() < i)
         {
-            if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0D && serverlevel.mayInteract(this.player, blockpos))
+            double d0 = 8.0D;
+            Object object = Reflector.call(Reflector.getFieldValue(Reflector.ForgeMod_REACH_DISTANCE), Reflector.RegistryObject_get);
+
+            if (object != null)
+            {
+                d0 = this.player.getAttribute((Attribute)object).getValue() + 3.0D;
+            }
+
+            d0 = d0 * d0;
+
+            if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < d0 && serverlevel.mayInteract(this.player, blockpos))
             {
                 InteractionResult interactionresult = this.player.gameMode.useItemOn(this.player, serverlevel, itemstack, interactionhand, blockhitresult);
 
@@ -1331,7 +1374,7 @@
 
     public void send(Packet<?> pPacket)
     {
-        this.send(pPacket, (GenericFutureListener <? extends Future <? super Void >>)null);
+        this.send(pPacket, (GenericFutureListener)null);
     }
 
     public void send(Packet<?> pPacket, @Nullable GenericFutureListener <? extends Future <? super Void >> pFutureListeners)
@@ -1340,9 +1383,9 @@
         {
             this.connection.send(pPacket, pFutureListeners);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            CrashReport crashreport = CrashReport.forThrowable(throwable, "Sending packet");
+            CrashReport crashreport = CrashReport.forThrowable(throwable1, "Sending packet");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Packet being sent");
             crashreportcategory.setDetail("Packet class", () ->
             {
@@ -1805,6 +1848,128 @@
 
     public void handleCustomPayload(ServerboundCustomPayloadPacket pPacket)
     {
+        PacketUtils.ensureRunningOnSameThread(pPacket, this, this.player.getLevel());
+        Reflector.call(Reflector.NetworkHooks_onCustomPayload, pPacket, this.connection);
+        FriendlyByteBuf friendlybytebuf = (FriendlyByteBuf)MCReflection.CCustomPayloadPacket_data.get(pPacket);
+        ResourceLocation resourcelocation = (ResourceLocation)MCReflection.CCustomPayloadPacket_channel.get(pPacket);
+        String s = resourcelocation.getNamespace();
+        String s1 = resourcelocation.getPath();
+
+        if (s.equalsIgnoreCase("vivecraft") && s1.equalsIgnoreCase("data"))
+        {
+            int i = friendlybytebuf.readableBytes();
+            NetworkHelper.PacketDiscriminators networkhelper$packetdiscriminators = NetworkHelper.PacketDiscriminators.values()[friendlybytebuf.readByte()];
+            byte[] abyte = new byte[i - 1];
+            friendlybytebuf.readBytes(abyte);
+            ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.player.getUUID());
+
+            if (serverviveplayer == null && networkhelper$packetdiscriminators != NetworkHelper.PacketDiscriminators.VERSION)
+            {
+                return;
+            }
+
+            switch (networkhelper$packetdiscriminators)
+            {
+                case VERSION:
+                    String s2 = "Vivecraft 1.16.5 jrbudda-7-5";
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.VERSION, s2));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.REQUESTDATA, new byte[0]));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.CLIMBING, new byte[] {1, 0}));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.TELEPORT, new byte[0]));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.CRAWL, new byte[0]));
+                    serverviveplayer = new ServerVivePlayer(this.player);
+                    NetworkHelper.vivePlayers.put(this.player.getUUID(), serverviveplayer);
+                    BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new DataInputStream(new ByteArrayInputStream(abyte))));
+
+                    try
+                    {
+                        String s3 = bufferedreader.readLine();
+
+                        if (s3.contains("NONVR"))
+                        {
+                            this.player.sendMessage(new TextComponent("NONVR: " + this.player.getDisplayName().getString()), this.player.getUUID());
+                            serverviveplayer.setVR(false);
+                        }
+                        else
+                        {
+                            this.player.sendMessage(new TextComponent("VR: " + this.player.getDisplayName().getString()), this.player.getUUID());
+                            serverviveplayer.setVR(true);
+                        }
+                    }
+                    catch (IOException ioexception)
+                    {
+                        ioexception.printStackTrace();
+                    }
+
+                    break;
+
+                case CONTROLLER0DATA:
+                    serverviveplayer.controller0data = abyte;
+                    break;
+
+                case CONTROLLER1DATA:
+                    serverviveplayer.controller1data = abyte;
+                    break;
+
+                case DRAW:
+                    serverviveplayer.draw = abyte;
+                    break;
+
+                case HEADDATA:
+                    serverviveplayer.hmdData = abyte;
+
+                case MOVEMODE:
+                case REQUESTDATA:
+                default:
+                    break;
+
+                case WORLDSCALE:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.worldScale = friendlybytebuf.readFloat();
+                    break;
+
+                case HEIGHT:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.heightscale = friendlybytebuf.readFloat();
+                    break;
+
+                case TELEPORT:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    float f = friendlybytebuf.readFloat();
+                    float f1 = friendlybytebuf.readFloat();
+                    float f2 = friendlybytebuf.readFloat();
+                    this.player.absMoveTo((double)f, (double)f1, (double)f2, this.player.getYRot(), this.player.getXRot());
+                    break;
+
+                case CLIMBING:
+                    this.player.fallDistance = 0.0F;
+
+                case ACTIVEHAND:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.activeHand = friendlybytebuf.readByte();
+
+                    if (serverviveplayer.isSeated())
+                    {
+                        serverviveplayer.activeHand = 0;
+                    }
+
+                    break;
+
+                case CRAWL:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.crawling = friendlybytebuf.readByte() != 0;
+
+                    if (serverviveplayer.crawling)
+                    {
+                        this.player.setPose(Pose.SWIMMING);
+                    }
+            }
+        }
     }
 
     public void handleChangeDifficulty(ServerboundChangeDifficultyPacket p_9839_)
