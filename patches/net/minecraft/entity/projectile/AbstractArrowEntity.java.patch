--- a/net/minecraft/entity/projectile/AbstractArrowEntity.java
+++ b/net/minecraft/entity/projectile/AbstractArrowEntity.java
@@ -5,6 +5,10 @@
 import java.util.Arrays;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.BlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
@@ -28,6 +32,7 @@
 import net.minecraft.network.play.server.SSpawnObjectPacket;
 import net.minecraft.particles.ParticleTypes;
 import net.minecraft.util.DamageSource;
+import net.minecraft.util.Hand;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.SoundEvent;
 import net.minecraft.util.SoundEvents;
@@ -42,6 +47,7 @@
 import net.minecraft.util.math.vector.Vec3d;
 import net.minecraft.util.registry.Registry;
 import net.minecraft.world.World;
+import net.optifine.reflect.Reflector;
 
 public abstract class AbstractArrowEntity extends ProjectileEntity
 {
@@ -78,7 +84,20 @@
 
         if (p_i3311_2_ instanceof PlayerEntity)
         {
-            this.pickupStatus = AbstractArrowEntity.PickupStatus.ALLOWED;
+        	ServerVivePlayer vp = NetworkHelper.vivePlayers.get(p_i3311_2_.getUniqueID());
+        	if (vp !=null && vp.isVR())
+        	{
+         		//VIVE SET SPAWNPOS
+        		Vec3d aimSource = vp.getControllerPos(vp.activeHand);
+        		Vec3d aimDir = vp.getControllerDir(vp.activeHand);     
+        		if (!vp.isSeated() && vp.getDraw() > 0) {
+        			aimDir = vp.getControllerPos(1).subtract(vp.getControllerPos(0)).normalize();
+        			aimSource = vp.getControllerPos(0);
+        		}   
+        		this.setPosition(aimSource.x + aimDir.x ,aimSource.y + aimDir.y ,aimSource.z+aimDir.z );
+        		//
+        	}
+        	this.pickupStatus = AbstractArrowEntity.PickupStatus.ALLOWED;
         }
     }
 
@@ -142,7 +161,15 @@
         BlockPos blockpos = this.getBlockPos();
         BlockState blockstate = this.world.getBlockState(blockpos);
 
-        if (!blockstate.isAir() && !flag)
+        //Forge
+        boolean isair;
+        if(Reflector.IForgeBlockState_isAir2.exists())
+        	isair = Reflector.callBoolean(blockstate, Reflector.IForgeBlockState_isAir2, this.world, blockpos);
+        else
+        	isair = blockstate.isAir();
+        //
+        
+        if (!isair && !flag)
         {
             VoxelShape voxelshape = blockstate.getCollisionShape(this.world, blockpos);
 
@@ -217,7 +244,12 @@
                     }
                 }
 
-                if (raytraceresult != null && !flag)
+                //Forge
+                boolean f = true;
+                if(raytraceresult !=null && Reflector.ForgeEventFactory_onProjectileImpactA.exists())
+                	f = raytraceresult.getType() != RayTraceResult.Type.MISS && !Reflector.callBoolean(Reflector.ForgeEventFactory_onProjectileImpactA, this, raytraceresult);
+
+                if (raytraceresult != null && !flag && f)
                 {
                     this.onImpact(raytraceresult);
                     this.isAirBorne = true;
