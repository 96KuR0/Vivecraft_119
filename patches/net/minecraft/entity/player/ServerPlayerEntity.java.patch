--- a/net/minecraft/entity/player/ServerPlayerEntity.java
+++ b/net/minecraft/entity/player/ServerPlayerEntity.java
@@ -13,7 +13,9 @@
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.block.BlockState;
+import net.minecraft.block.Blocks;
 import net.minecraft.block.HorizontalBlock;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.arguments.EntityAnchorArgument;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -37,6 +39,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
 import net.minecraft.item.MerchantOffers;
+import net.minecraft.item.UseAction;
 import net.minecraft.item.WrittenBookItem;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.item.crafting.ServerRecipeBook;
@@ -75,8 +78,13 @@
 import net.minecraft.network.play.server.SUpdateTileEntityPacket;
 import net.minecraft.network.play.server.SWindowItemsPacket;
 import net.minecraft.network.play.server.SWindowPropertyPacket;
+import net.minecraft.particles.ItemParticleData;
+import net.minecraft.particles.ParticleType;
+import net.minecraft.particles.ParticleTypes;
 import net.minecraft.potion.EffectInstance;
 import net.minecraft.potion.Effects;
+import net.minecraft.potion.PotionUtils;
+import net.minecraft.potion.Potions;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreCriteria;
 import net.minecraft.scoreboard.ScorePlayerTeam;
@@ -102,6 +110,7 @@
 import net.minecraft.util.ServerCooldownTracker;
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.SoundEvent;
+import net.minecraft.util.SoundEvents;
 import net.minecraft.util.Unit;
 import net.minecraft.util.Util;
 import net.minecraft.util.math.AxisAlignedBB;
@@ -123,8 +132,13 @@
 import net.minecraft.world.biome.BiomeManager;
 import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.storage.IWorldInfo;
+import net.optifine.reflect.Reflector;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.reflection.MCReflection;
+import org.vivecraft.utils.ITeleporterDummy;
 
 public class ServerPlayerEntity extends PlayerEntity implements IContainerListener
 {
@@ -359,6 +373,22 @@
     public void addSelfToInternalCraftingInventory()
     {
         this.openContainer.addListener(this);
+
+		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+		if (vp != null && vp.isVR()) {
+			if (rand.nextInt(20) == 3) {
+				ItemStack stack;
+				if (rand.nextInt(2) == 1)
+					stack = new ItemStack(Items.PUMPKIN_PIE).setDisplayName(new StringTextComponent("EAT ME"));
+				else
+					stack = PotionUtils.addPotionToItemStack(new ItemStack(Items.POTION), Potions.WATER)
+					.setDisplayName(new StringTextComponent("DRINK ME"));
+				stack.getTag().putInt("HideFlags", 32);
+				
+				if (this.inventory.addItemStackToInventory(stack))
+					this.container.detectAndSendChanges();
+			}
+		}
     }
 
     public void sendEnterCombat()
@@ -545,6 +575,10 @@
 
     public void onDeath(DamageSource cause)
     {
+        //Forge
+        if(Reflector.callBoolean(Reflector.ForgeHooks_onLivingDeath, this, cause)) return;
+        //
+        
         boolean flag = this.world.getGameRules().getBoolean(GameRules.SHOW_DEATH_MESSAGES);
 
         if (flag)
@@ -1089,6 +1123,7 @@
                 this.connection.sendPacket(new SOpenWindowPacket(container.windowId, container.getType(), p_213829_1_.getDisplayName()));
                 container.addListener(this);
                 this.openContainer = container;
+                Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.openContainer));
                 return OptionalInt.of(this.currentWindowId);
             }
         }
@@ -1110,6 +1145,7 @@
         this.connection.sendPacket(new SOpenHorseWindowPacket(this.currentWindowId, inventoryIn.getSizeInventory(), horse.getEntityId()));
         this.openContainer = new HorseInventoryContainer(this.currentWindowId, this.inventory, inventoryIn, horse);
         this.openContainer.addListener(this);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.openContainer));
     }
 
     public void openBook(ItemStack stack, Hand hand)
@@ -1182,6 +1218,7 @@
     public void closeContainer()
     {
         this.openContainer.onContainerClosed(this);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Close_Constructor, this, this.openContainer));
         this.openContainer = this.container;
     }
 
@@ -1331,6 +1368,24 @@
         this.enteredNetherPosition = that.enteredNetherPosition;
         this.setLeftShoulderEntity(that.getLeftShoulderEntity());
         this.setRightShoulderEntity(that.getRightShoulderEntity());
+        //Forge
+    	Reflector.setFieldValue(this, Reflector.ForgePlayerEntity_spawnPosMap, Reflector.getFieldValue(that, Reflector.ForgePlayerEntity_spawnPosMap));
+		Reflector.setFieldValue(this, Reflector.ForgePlayerEntity_spawnForcedMap, Reflector.getFieldValue(that, Reflector.ForgePlayerEntity_spawnForcedMap));
+   
+//		if(that.dimension != DimensionType.OVERWORLD) {
+//			MCReflection.PlayerEntity_spawnPos.set(this, MCReflection.PlayerEntity_spawnPos.get(that));
+//			MCReflection.PlayerEntity_spawnForced.set(this, MCReflection.PlayerEntity_spawnForced.get(that));
+//        }
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.       
+        CompoundNBT old = (CompoundNBT)Reflector.call(that, Reflector.Entity_getPersistentData);
+		if (old!=null && old.contains("PlayerPersisted")) {
+			((CompoundNBT)Reflector.call(this, Reflector.Entity_getPersistentData)).put("PlayerPersisted", old.getCompound("PlayerPersisted"));
+		}
+		Reflector.callVoid(Reflector.ForgeEventFactory_onPlayerClone, this, that, !keepEverything);
+
+        //
     }
 
     protected void onNewPotionEffect(EffectInstance id)
@@ -1620,6 +1675,82 @@
             this.interactionManager.setWorld(newWorld);
             this.server.getPlayerList().sendWorldInfo(this, newWorld);
             this.server.getPlayerList().sendInventory(this);
+            //Forge
+            Reflector.call(Reflector.BasicEventHooks_firePlayerChangedDimensionEvent, this, serverworld.getDimension(), newWorld.getDimension());
+            //
+        }
+    }
+	@Override
+	public void spawnSweepParticles() {
+		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+		if (vp == null || vp.isVR() == false) {
+			super.spawnSweepParticles();
+		} else {
+			// VIVECRAFT USE CONTROLLER - which controller? have to assume 0.
+
+			Vector3d aim = vp.getControllerDir(0);
+			float yaw = (float) Math.toDegrees(Math.atan2(aim.x, -aim.z));
+
+			double d0 = (double) (-MathHelper.sin(yaw * 0.017453292F));
+			double d1 = (double) MathHelper.cos(yaw * 0.017453292F);
+
+			Vector3d pos = vp.getControllerPos(0);
+
+			if (this.world instanceof ServerWorld) // has to be
+			{
+				((ServerWorld) this.world).spawnParticle(ParticleTypes.SWEEP_ATTACK, pos.x + d0, pos.y, pos.z + d1, 0, d0,
+						0.0D, d1, 0.0D);
+			}
+			// END
+		}
+	}
+
+	//Vivecraft override from LivingEntity because addItemParticles is private
+	@Override
+    protected void triggerItemUseEffects(ItemStack p_226293_1_, int p_226293_2_)
+    {
+        if (!p_226293_1_.isEmpty() && this.isHandActive())
+        {
+            if (p_226293_1_.getUseAction() == UseAction.DRINK)
+            {
+                this.playSound(this.getDrinkSound(p_226293_1_), 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+            }
+
+            if (p_226293_1_.getUseAction() == UseAction.EAT)
+            {
+                this.addItemParticles(p_226293_1_, p_226293_2_);
+                this.playSound(this.getEatSound(p_226293_1_), 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+            }
+        }
+    }
+
+    private void addItemParticles(ItemStack stack, int count)
+    {
+
+        for (int i = 0; i < count; ++i)
+        {
+            Vector3d vector3d = new Vector3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vector3d = vector3d.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+            vector3d = vector3d.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+            double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+            Vector3d vector3d1 = new Vector3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+		
+            if(this.isUser()) { 
+            	//TODO: wait what
+	            //VIVE
+				Hand hand = getActiveHand();
+				if(hand == Hand.MAIN_HAND){
+					vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(0).getPosition();                 	
+				} else {
+					vector3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(1).getPosition();      
+				}
+			}
+               
+            // vector3d1 = vector3d1.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+            // vector3d1 = vector3d1.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+            // vector3d1 = vector3d1.add(this.getPosX(), this.getPosYEye(), this.getPosZ());
+			//
+            this.world.addParticle(new ItemParticleData(ParticleTypes.ITEM, stack), vector3d1.x, vector3d1.y, vector3d1.z, vector3d.x, vector3d.y + 0.05D, vector3d.z);
         }
     }
 
@@ -1696,6 +1827,7 @@
         return new SSpawnPlayerPacket(this);
     }
 
+    @Override
     public ItemEntity dropItem(ItemStack droppedItem, boolean dropAround, boolean traceItem)
     {
         ItemEntity itementity = super.dropItem(droppedItem, dropAround, traceItem);
@@ -1706,7 +1838,28 @@
         }
         else
         {
+        	//Vivecraft, set spwanpos of dropped item.
+            ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());    
+            if (vp != null && vp.isVR() && !dropAround) {
+    			Vector3d pos = vp.getControllerPos(0);    	
+    			Vector3d aim = vp.getControllerDir(0);
+    			float f2 = 0.3F;
+    			itementity.setMotion(aim.x * f2, aim.y * f2, aim.z * f2);
+    			itementity.setPosition(pos.getX() + itementity.getMotion().getX(), 
+    					pos.getY()+itementity.getMotion().getY(), 
+    					pos.getZ() + itementity.getMotion().getZ());
+            }
+            //         
+            //Forge
+            Collection<ItemEntity> capture = (Collection<ItemEntity>) Reflector.call(this, Reflector.Entity_captureDrops);
+   
+            if(capture != null) {
+                capture.add(itementity);
+            }
+            //
+            else
             this.world.addEntity(itementity);
+            
             ItemStack itemstack = itementity.getItem();
 
             if (traceItem)
@@ -1722,4 +1875,4 @@
             return itementity;
         }
     }
-}
+}
\ No newline at end of file
