--- a/net/minecraft/entity/player/ServerPlayerEntity.java
+++ b/net/minecraft/entity/player/ServerPlayerEntity.java
@@ -13,6 +13,7 @@
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.arguments.EntityAnchorArgument;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -33,6 +34,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.Items;
 import net.minecraft.item.MerchantOffers;
+import net.minecraft.item.UseAction;
 import net.minecraft.item.WrittenBookItem;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.item.crafting.ServerRecipeBook;
@@ -70,8 +72,13 @@
 import net.minecraft.network.play.server.SUpdateTileEntityPacket;
 import net.minecraft.network.play.server.SWindowItemsPacket;
 import net.minecraft.network.play.server.SWindowPropertyPacket;
+import net.minecraft.particles.ItemParticleData;
+import net.minecraft.particles.ParticleType;
+import net.minecraft.particles.ParticleTypes;
 import net.minecraft.potion.EffectInstance;
 import net.minecraft.potion.Effects;
+import net.minecraft.potion.PotionUtils;
+import net.minecraft.potion.Potions;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreCriteria;
 import net.minecraft.scoreboard.ScorePlayerTeam;
@@ -95,6 +102,7 @@
 import net.minecraft.util.ServerCooldownTracker;
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.SoundEvent;
+import net.minecraft.util.SoundEvents;
 import net.minecraft.util.Unit;
 import net.minecraft.util.Util;
 import net.minecraft.util.math.BlockPos;
@@ -115,6 +123,8 @@
 import net.minecraft.world.storage.WorldInfo;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
 
 public class ServerPlayerEntity extends PlayerEntity implements IContainerListener
 {
@@ -322,6 +332,22 @@
     public void addSelfToInternalCraftingInventory()
     {
         this.openContainer.addListener(this);
+
+		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+		if (vp != null && vp.isVR()) {
+			if (rand.nextInt(20) == 3) {
+				ItemStack stack;
+				if (rand.nextInt(2) == 1)
+					stack = new ItemStack(Items.PUMPKIN_PIE).setDisplayName(new StringTextComponent("EAT ME"));
+				else
+					stack = PotionUtils.addPotionToItemStack(new ItemStack(Items.POTION), Potions.WATER)
+					.setDisplayName(new StringTextComponent("DRINK ME"));
+				stack.getTag().putInt("HideFlags", 32);
+				
+				if (this.inventory.addItemStackToInventory(stack))
+					this.container.detectAndSendChanges();
+			}
+		}
     }
 
     public void sendEnterCombat()
@@ -1507,6 +1533,79 @@
             this.server.getPlayerList().sendInventory(this);
         }
     }
+	@Override
+	public void spawnSweepParticles() {
+		ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+		if (vp == null || vp.isVR() == false) {
+			super.spawnSweepParticles();
+		} else {
+			// VIVECRAFT USE CONTROLLER - which controller? have to assume 0.
+
+			Vec3d aim = vp.getControllerDir(0);
+			float yaw = (float) Math.toDegrees(Math.atan2(aim.x, -aim.z));
+
+			double d0 = (double) (-MathHelper.sin(yaw * 0.017453292F));
+			double d1 = (double) MathHelper.cos(yaw * 0.017453292F);
+
+			Vec3d pos = vp.getControllerPos(0);
+
+			if (this.world instanceof ServerWorld) // has to be
+			{
+				((ServerWorld) this.world).spawnParticle(ParticleTypes.SWEEP_ATTACK, pos.x + d0, pos.y, pos.z + d1, 0, d0,
+						0.0D, d1, 0.0D);
+			}
+			// END
+		}
+	}
+
+	//Vivecraft override from LivingEntity because addItemParticles is private
+	@Override
+    protected void func_226293_b_(ItemStack p_226293_1_, int p_226293_2_)
+    {
+        if (!p_226293_1_.isEmpty() && this.isHandActive())
+        {
+            if (p_226293_1_.getUseAction() == UseAction.DRINK)
+            {
+                this.playSound(this.getDrinkSound(p_226293_1_), 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+            }
+
+            if (p_226293_1_.getUseAction() == UseAction.EAT)
+            {
+                this.addItemParticles(p_226293_1_, p_226293_2_);
+                this.playSound(this.getEatSound(p_226293_1_), 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+            }
+        }
+    }
+
+    private void addItemParticles(ItemStack stack, int count)
+    {
+
+        for (int i = 0; i < count; ++i)
+        {
+            Vec3d vec3d = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vec3d = vec3d.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+            vec3d = vec3d.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+            double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+            Vec3d vec3d1 = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+		
+            if(this.isUser()) { 
+            	//TODO: wait what
+	            //VIVE
+				Hand hand = getActiveHand();
+				if(hand == Hand.MAIN_HAND){
+					vec3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(0).getPosition();                 	
+				} else {
+					vec3d1 = Minecraft.getInstance().vrPlayer.vrdata_world_pre.getController(1).getPosition();      
+				}
+			}
+               
+            // vec3d1 = vec3d1.rotatePitch(-this.rotationPitch * ((float)Math.PI / 180F));
+            // vec3d1 = vec3d1.rotateYaw(-this.rotationYaw * ((float)Math.PI / 180F));
+            // vec3d1 = vec3d1.add(this.getPosX(), this.getPosYEye(), this.getPosZ());
+			//
+            this.world.addParticle(new ItemParticleData(ParticleTypes.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
+        }
+    }
 
     public void sendChunkLoad(ChunkPos p_213844_1_, IPacket<?> p_213844_2_, IPacket<?> p_213844_3_)
     {
@@ -1542,6 +1641,7 @@
         return new SSpawnPlayerPacket(this);
     }
 
+    @Override
     public ItemEntity dropItem(ItemStack droppedItem, boolean dropAround, boolean traceItem)
     {
         ItemEntity itementity = super.dropItem(droppedItem, dropAround, traceItem);
@@ -1552,6 +1652,18 @@
         }
         else
         {
+        	//Vivecraft, set spwanpos of dropped item.
+            ServerVivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());    
+            if (vp != null && vp.isVR() && !dropAround) {
+    			Vec3d pos = vp.getControllerPos(0);    	
+    			Vec3d aim = vp.getControllerDir(0);
+    			float f2 = 0.3F;
+    			itementity.setMotion(aim.x * f2, aim.y * f2, aim.z * f2);
+    			itementity.setPosition(pos.getX() + itementity.getMotion().getX(), 
+    					pos.getY()+itementity.getMotion().getY(), 
+    					pos.getZ() + itementity.getMotion().getZ());
+            }
+            //         
             this.world.addEntity(itementity);
             ItemStack itemstack = itementity.getItem();
 
@@ -1568,4 +1680,4 @@
             return itementity;
         }
     }
-}
+}
\ No newline at end of file
