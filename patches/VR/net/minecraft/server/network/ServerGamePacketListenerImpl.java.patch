--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -34,6 +34,7 @@
 import net.minecraft.Util;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.advancements.CriteriaTriggers;
+import net.minecraft.client.Minecraft;
 import net.minecraft.commands.CommandSigningContext;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -45,6 +46,7 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.Connection;
+import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.PacketSendListener;
 import net.minecraft.network.TickablePacketListener;
 import net.minecraft.network.chat.ChatMessageContent;
@@ -140,6 +142,7 @@
 import net.minecraft.world.entity.HasCustomInventoryScreen;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PlayerRideableJumping;
+import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.ChatVisiblity;
 import net.minecraft.world.entity.player.Inventory;
@@ -177,8 +180,19 @@
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.optifine.reflect.Reflector;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
+import org.vivecraft.api.AimFixHandler;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+import org.vivecraft.reflection.MCReflection;
+import io.netty.channel.Channel;
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, TickablePacketListener, ServerGamePacketListener
 {
@@ -236,6 +250,20 @@
         this.player = p_9772_;
         p_9772_.connection = this;
         this.keepAliveTime = Util.getMillis();
+        
+        //Vivecraft
+        try
+        {
+        	((Channel)MCReflection.NetworkManager_channel.get(p_9771_)).pipeline().addBefore("packet_handler", "vr_aim_fix", new AimFixHandler(this.connection));
+        }
+        catch (Exception exception)
+        {
+        	if (!Reflector.fml_ModLoader.exists())
+        	{
+        		LOGGER.warn("{} failed adding VR aim fix", (Object)this.player.getName().getString());
+        	}
+        }
+        //
         p_9772_.getTextFilter().join();
         ProfilePublicKey profilepublickey = p_9772_.getProfilePublicKey();
 
@@ -352,6 +380,10 @@
         }
 
         this.chatPreviewThrottler.tick();
+        
+        //Vivecraft
+        NetworkHelper.sendPosData(this.player);
+        //
     }
 
     public void resetPosition()
@@ -491,11 +523,17 @@
                 }
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                //Forge
+                this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot());
+                //
                 boolean flag3 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625D));
 
                 if (flag && (flag2 || !flag3))
                 {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    //Forge
+                    this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot());
+                    //
                     this.connection.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -512,7 +550,10 @@
 
     private boolean noBlocksAround(Entity p_9794_)
     {
-        return p_9794_.level.getBlockStates(p_9794_.getBoundingBox().inflate(0.0625D).expandTowards(0.0D, -0.55D, 0.0D)).allMatch(BlockBehaviour.BlockStateBase::isAir);
+    	//Forge is this ok?
+        //return p_9794_.level.getBlockStates(p_9794_.getBoundingBox().inflate(0.0625D).expandTowards(0.0D, -0.55D, 0.0D)).allMatch(BlockBehaviour.BlockStateBase::isAir);
+        return BlockPos.betweenClosedStream(p_9794_.getBoundingBox().inflate(0.0625D).expandTowards(0.0D, -0.55D, 0.0D)).allMatch(b -> p_9794_.level.getBlockState(b).isAir());
+        //
     }
 
     public void handleAcceptTeleportPacket(ServerboundAcceptTeleportationPacket pPacket)
@@ -1289,8 +1330,8 @@
         Vec3 vec3 = blockhitresult.getLocation();
         BlockPos blockpos = blockhitresult.getBlockPos();
         Vec3 vec31 = Vec3.atCenterOf(blockpos);
-
-        if (!(this.player.getEyePosition().distanceToSqr(vec31) > MAX_INTERACTION_DISTANCE))
+        boolean flag = Reflector.IForgePlayer_canInteractWith_Block.exists() || !(this.player.getEyePosition().distanceToSqr(vec31) > MAX_INTERACTION_DISTANCE);
+        if (flag)
         {
             Vec3 vec32 = vec3.subtract(vec31);
             double d0 = 1.0000001D;
@@ -1300,10 +1341,10 @@
                 Direction direction = blockhitresult.getDirection();
                 this.player.resetLastActionTime();
                 int i = this.player.level.getMaxBuildHeight();
-
                 if (blockpos.getY() < i)
                 {
-                    if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0D && serverlevel.mayInteract(this.player, blockpos))
+                	boolean flag1 = !Reflector.IForgePlayer_canInteractWith_Block.exists() && this.player.distanceToSqr((double)blockpos.getX() + 0.5D, (double)blockpos.getY() + 0.5D, (double)blockpos.getZ() + 0.5D) < 64.0;
+                    if (this.awaitingPositionFromClient == null && (flag1 || Reflector.callBoolean(player,Reflector.IForgePlayer_canInteractWith_Block,blockpos,3)) && serverlevel.mayInteract(this.player, blockpos))
                     {
                         InteractionResult interactionresult = this.player.gameMode.useItemOn(this.player, serverlevel, itemstack, interactionhand, blockhitresult);
 
@@ -1438,9 +1479,9 @@
         {
             this.connection.send(pPacket, pFutureListeners);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            CrashReport crashreport = CrashReport.forThrowable(throwable, "Sending packet");
+            CrashReport crashreport = CrashReport.forThrowable(throwable1, "Sending packet");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Packet being sent");
             crashreportcategory.setDetail("Packet class", () ->
             {
@@ -1943,16 +1984,21 @@
             {
                 return;
             }
+            boolean flag = Reflector.IForgePlayer_canInteractWith_Entity.exists() || entity.distanceToSqr(this.player.getEyePosition()) < MAX_INTERACTION_DISTANCE;
 
-            if (entity.distanceToSqr(this.player.getEyePosition()) < MAX_INTERACTION_DISTANCE)
+            if (flag)
             {
                 pPacket.dispatch(new ServerboundInteractPacket.Handler()
                 {
                     private void performInteraction(InteractionHand p_143679_, ServerGamePacketListenerImpl.EntityInteraction p_143680_)
                     {
+                    	//Forge: If the entity cannot be reached, do nothing. Original check was dist < 6, range is 4.5, so vanilla used padding=1.5
+                        if(Reflector.IForgePlayer_canInteractWith_Entity.exists() && !Reflector.callBoolean(player,Reflector.IForgePlayer_canInteractWith_Entity, entity, 1.5D)) return; 
                         ItemStack itemstack = ServerGamePacketListenerImpl.this.player.getItemInHand(p_143679_).copy();
                         InteractionResult interactionresult = p_143680_.run(ServerGamePacketListenerImpl.this.player, entity, p_143679_);
-
+                        //Forge
+                        if (Reflector.call(Reflector.ForgeHooks_onInteractEntityAt, player, entity, entity.position(), p_143679_) != null) return;
+                        //
                         if (interactionresult.consumesAction())
                         {
                             CriteriaTriggers.PLAYER_INTERACTED_WITH_ENTITY.trigger(ServerGamePacketListenerImpl.this.player, itemstack, entity);
@@ -1978,7 +2024,8 @@
                     {
                         if (!(entity instanceof ItemEntity) && !(entity instanceof ExperienceOrb) && !(entity instanceof AbstractArrow) && entity != ServerGamePacketListenerImpl.this.player)
                         {
-                            ServerGamePacketListenerImpl.this.player.attack(entity);
+                            if(!Reflector.IForgePlayer_canHit.exists() || Reflector.callBoolean(player, Reflector.IForgePlayer_canHit,entity,3))
+                            	ServerGamePacketListenerImpl.this.player.attack(entity); //Forge: Perform attack range check. Original check was dist < 6, range is 3, so vanilla used padding=3
                         }
                         else
                         {
@@ -2250,6 +2297,130 @@
 
     public void handleCustomPayload(ServerboundCustomPayloadPacket pPacket)
     {
+        //Forge
+    	PacketUtils.ensureRunningOnSameThread(pPacket, this, this.player.getLevel());
+        Reflector.call(Reflector.NetworkHooks_onCustomPayload, pPacket, this.connection);
+        //
+        FriendlyByteBuf friendlybytebuf = (FriendlyByteBuf)MCReflection.CCustomPayloadPacket_data.get(pPacket);
+        ResourceLocation resourcelocation = (ResourceLocation)MCReflection.CCustomPayloadPacket_channel.get(pPacket);
+        String s = resourcelocation.getNamespace();
+        String s1 = resourcelocation.getPath();
+
+        if (s.equalsIgnoreCase("vivecraft") && s1.equalsIgnoreCase("data"))
+        {
+            int i = friendlybytebuf.readableBytes();
+            NetworkHelper.PacketDiscriminators networkhelper$packetdiscriminators = NetworkHelper.PacketDiscriminators.values()[friendlybytebuf.readByte()];
+            byte[] abyte = new byte[i - 1];
+            friendlybytebuf.readBytes(abyte);
+            ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.player.getUUID());
+
+            if (serverviveplayer == null && networkhelper$packetdiscriminators != NetworkHelper.PacketDiscriminators.VERSION)
+            {
+                return;
+            }
+
+            switch (networkhelper$packetdiscriminators)
+            {
+                case VERSION:
+                    String s2 = Minecraft.getInstance().minecriftVerString;
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.VERSION, s2));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.REQUESTDATA, new byte[0]));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.CLIMBING, new byte[] {1, 0}));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.TELEPORT, new byte[0]));
+                    this.send(NetworkHelper.getVivecraftServerPacket(NetworkHelper.PacketDiscriminators.CRAWL, new byte[0]));
+                    serverviveplayer = new ServerVivePlayer(this.player);
+                    NetworkHelper.vivePlayers.put(this.player.getUUID(), serverviveplayer);
+                    BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new DataInputStream(new ByteArrayInputStream(abyte))));
+
+                    try
+                    {
+                        String s3 = bufferedreader.readLine();
+
+                        if (s3.contains("NONVR"))
+                        {
+                            this.player.sendSystemMessage(Component.literal("NONVR: " + this.player.getDisplayName().getString()));
+                            serverviveplayer.setVR(false);
+                        }
+                        else
+                        {
+                            this.player.sendSystemMessage(Component.literal("VR: " + this.player.getDisplayName().getString()));
+                            serverviveplayer.setVR(true);
+                        }
+                    }
+                    catch (IOException ioexception)
+                    {
+                        ioexception.printStackTrace();
+                    }
+
+                    break;
+
+                case CONTROLLER0DATA:
+                    serverviveplayer.controller0data = abyte;
+                    break;
+
+                case CONTROLLER1DATA:
+                    serverviveplayer.controller1data = abyte;
+                    break;
+
+                case DRAW:
+                    serverviveplayer.draw = abyte;
+                    break;
+
+                case HEADDATA:
+                    serverviveplayer.hmdData = abyte;
+
+                case MOVEMODE:
+                case REQUESTDATA:
+                default:
+                    break;
+
+                case WORLDSCALE:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.worldScale = friendlybytebuf.readFloat();
+                    break;
+
+                case HEIGHT:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.heightscale = friendlybytebuf.readFloat();
+                    break;
+
+                case TELEPORT:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    float f = friendlybytebuf.readFloat();
+                    float f1 = friendlybytebuf.readFloat();
+                    float f2 = friendlybytebuf.readFloat();
+                    this.player.absMoveTo((double)f, (double)f1, (double)f2, this.player.getYRot(), this.player.getXRot());
+                    break;
+
+                case CLIMBING:
+                    this.player.fallDistance = 0.0F;
+                    this.aboveGroundTickCount = 0; //why were we not doing this
+                case ACTIVEHAND:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.activeHand = friendlybytebuf.readByte();
+
+                    if (serverviveplayer.isSeated())
+                    {
+                        serverviveplayer.activeHand = 0;
+                    }
+
+                    break;
+
+                case CRAWL:
+                    friendlybytebuf.resetReaderIndex();
+                    friendlybytebuf.readByte();
+                    serverviveplayer.crawling = friendlybytebuf.readByte() != 0;
+
+                    if (serverviveplayer.crawling)
+                    {
+                        this.player.setPose(Pose.SWIMMING);
+                    }
+            }
+        }
     }
 
     public void handleChangeDifficulty(ServerboundChangeDifficultyPacket pPacket)
