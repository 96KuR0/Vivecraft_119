--- a/net/minecraft/server/packs/repository/PackRepository.java
+++ b/net/minecraft/server/packs/repository/PackRepository.java
@@ -13,6 +13,8 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import net.minecraft.client.resources.ClientPackSource;
 import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.PackType;
 
@@ -25,18 +27,31 @@
 
     public PackRepository(Pack.PackConstructor p_10502_, RepositorySource... p_10503_)
     {
-        this.constructor = p_10502_;
-        this.sources = ImmutableSet.copyOf(p_10503_);
+    	this.constructor = p_10502_;
+    	this.sources = new java.util.HashSet<>(java.util.Arrays.asList(p_10503_));
     }
 
-    public PackRepository(PackType p_143890_, RepositorySource... p_143891_)
-    {
-        this((p_143894_, p_143895_, p_143896_, p_143897_, p_143898_, p_143899_, p_143900_) ->
-        {
-            return new Pack(p_143894_, p_143895_, p_143896_, p_143897_, p_143898_, p_143890_, p_143899_, p_143900_);
-        }, p_143891_);
+    //vanilla
+//    public PackRepository(PackType p_143890_, RepositorySource... p_143891_)
+//    {
+//        this((p_143894_, p_143895_, p_143896_, p_143897_, p_143898_, p_143899_, p_143900_) ->
+//        {
+//            return new Pack(p_143894_, p_143895_, p_143896_, p_143897_, p_143898_, p_143890_, p_143899_, p_143900_);
+//        }, p_143891_);
+//      //net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.event.AddPackFindersEvent(p_143890_, sources::add));
+//    }
+    
+    //forge
+    public PackRepository(PackType p_143890_, RepositorySource... p_143891_) {
+        this((p_143894_, p_143895_, p_143896_, p_143897_, p_143898_, p_143899_, p_143900_, hidden) -> {
+           return new Pack(p_143894_, p_143895_, p_143896_, p_143897_, p_143898_, p_143890_, p_143899_, p_143900_, hidden);
+        }, p_143891_);      //net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.event.AddPackFindersEvent(p_143890_, sources::add));
     }
-
+    public synchronized void addPackFinder(RepositorySource packFinder) {
+    	this.sources.add(packFinder);
+    }
+    //
+    
     public void reload()
     {
         List<String> list = this.selected.stream().map(Pack::getId).collect(ImmutableList.toImmutableList());
