--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -6,6 +6,7 @@
 import com.mojang.logging.LogUtils;
 import java.util.Collection;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Random;
@@ -18,11 +19,14 @@
 import net.minecraft.ReportedException;
 import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
+import net.minecraft.client.Minecraft;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.SectionPos;
+import net.minecraft.core.particles.ItemParticleOption;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.network.chat.ChatType;
@@ -54,6 +58,7 @@
 import net.minecraft.network.protocol.game.ClientboundPlayerCombatEndPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerCombatEnterPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerCombatKillPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket;
 import net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket;
 import net.minecraft.network.protocol.game.ClientboundResourcePackPacket;
@@ -110,7 +115,10 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ServerItemCooldowns;
+import net.minecraft.world.item.UseAnim;
 import net.minecraft.world.item.WrittenBookItem;
+import net.minecraft.world.item.alchemy.PotionUtils;
+import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.ChunkPos;
@@ -134,6 +142,10 @@
 import net.minecraft.world.scores.Score;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.ServerVivePlayer;
+import net.optifine.reflect.Reflector;
+import net.minecraftforge.common.util.ITeleporter;
 import org.slf4j.Logger;
 
 public class ServerPlayer extends Player
@@ -233,6 +245,9 @@
     private int containerCounter;
     public int latency;
     public boolean wonGame;
+    private String language = "en_us";
+    private boolean hasTabListName = false;
+    private Component tabListDisplayName = null;
 
     public ServerPlayer(MinecraftServer p_143384_, ServerLevel p_143385_, GameProfile p_143386_)
     {
@@ -378,9 +393,9 @@
             pCompound.putInt("SpawnZ", this.respawnPosition.getZ());
             pCompound.putBoolean("SpawnForced", this.respawnForced);
             pCompound.putFloat("SpawnAngle", this.respawnAngle);
-            ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location()).resultOrPartial(LOGGER::error).ifPresent((p_9134_) ->
+            ResourceLocation.CODEC.encodeStart(NbtOps.INSTANCE, this.respawnDimension.location()).resultOrPartial(LOGGER::error).ifPresent((p_241148_1_) ->
             {
-                pCompound.put("SpawnDimension", p_9134_);
+                pCompound.put("SpawnDimension", p_241148_1_);
             });
         }
     }
@@ -413,13 +428,38 @@
 
     private void initMenu(AbstractContainerMenu p_143400_)
     {
-        p_143400_.addSlotListener(this.containerListener);
-        p_143400_.setSynchronizer(this.containerSynchronizer);
+    	p_143400_.addSlotListener(this.containerListener);
+    	p_143400_.setSynchronizer(this.containerSynchronizer);
     }
 
     public void initInventoryMenu()
     {
         this.initMenu(this.inventoryMenu);
+
+        ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.getUUID());
+
+        //vivecraft
+        if (!Minecraft.getInstance().vrSettings.disableFun && serverviveplayer != null && serverviveplayer.isVR() && this.random.nextInt(40) == 3)
+        {
+            ItemStack itemstack;
+
+            if (this.random.nextInt(2) == 1)
+            {
+                itemstack = (new ItemStack(Items.PUMPKIN_PIE)).setHoverName(new TextComponent("EAT ME"));
+            }
+            else
+            {
+                itemstack = PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER).setHoverName(new TextComponent("DRINK ME"));
+            }
+
+            itemstack.getTag().putInt("HideFlags", 32);
+
+            if (this.getInventory().add(itemstack))
+            {
+                this.inventoryMenu.broadcastChanges();
+            }
+        }
+        //
     }
 
     public void onEnterCombat()
@@ -501,6 +541,7 @@
             if (!this.isSpectator() || !this.touchingUnloadedChunk())
             {
                 super.tick();
+                NetworkHelper.overridePose(this);
             }
 
             for (int i = 0; i < this.getInventory().getContainerSize(); ++i)
@@ -573,9 +614,9 @@
                 CriteriaTriggers.LOCATION.trigger(this);
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking player");
+            CrashReport crashreport = CrashReport.forThrowable(throwable1, "Ticking player");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Player being ticked");
             this.fillCrashReportCategory(crashreportcategory);
             throw new ReportedException(crashreport);
@@ -631,6 +672,9 @@
 
     public void die(DamageSource pCause)
     {
+        //Forge
+        if(Reflector.callBoolean(Reflector.ForgeHooks_onLivingDeath, this, pCause)) return;
+        //
         boolean flag = this.level.getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
 
         if (flag)
@@ -974,6 +1018,18 @@
 
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos pAt)
     {
+        Optional<BlockPos> optional = Optional.of(pAt);
+
+        if (Reflector.ForgeEventFactory_onPlayerSleepInBed.exists())
+        {
+            Player.BedSleepingProblem player$bedsleepingproblem = (Player.BedSleepingProblem)Reflector.call(Reflector.ForgeEventFactory_onPlayerSleepInBed, this, optional);
+
+            if (player$bedsleepingproblem != null)
+            {
+                return Either.left(player$bedsleepingproblem);
+            }
+        }
+
         Direction direction = this.level.getBlockState(pAt).getValue(HorizontalDirectionalBlock.FACING);
 
         if (!this.isSleeping() && this.isAlive())
@@ -993,8 +1049,14 @@
             else
             {
                 this.setRespawnPosition(this.level.dimension(), pAt, this.getYRot(), false, true);
-
-                if (this.level.isDay())
+                
+                boolean flag = this.level.isDay();
+                if (Reflector.ForgeEventFactory_fireSleepingTimeCheck.exists())
+                {
+                	flag = !Reflector.callBoolean(Reflector.ForgeEventFactory_fireSleepingTimeCheck, this, optional);
+                }
+                
+                if (flag)
                 {
                     return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
                 }
@@ -1005,9 +1067,9 @@
                         double d0 = 8.0D;
                         double d1 = 5.0D;
                         Vec3 vec3 = Vec3.atBottomCenterOf(pAt);
-                        List<Monster> list = this.level.getEntitiesOfClass(Monster.class, new AABB(vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D), (p_9062_) ->
+                        List<Monster> list = this.level.getEntitiesOfClass(Monster.class, new AABB(vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D), (p_241146_1_) ->
                         {
-                            return p_9062_.isPreventingPlayerRest(this);
+                            return p_241146_1_.isPreventingPlayerRest(this);
                         });
 
                         if (!list.isEmpty())
@@ -1016,7 +1078,7 @@
                         }
                     }
 
-                    Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(pAt).ifRight((p_9029_) ->
+                    Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(pAt).ifRight((p_241144_1_) ->
                     {
                         this.awardStat(Stats.SLEEP_IN_BED);
                         CriteriaTriggers.SLEPT_IN_BED.trigger(this);
@@ -1046,7 +1108,14 @@
 
     private boolean bedInRange(BlockPos p_9117_, Direction p_9118_)
     {
-        return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
+        if (p_9118_ == null)
+        {
+            return false;
+        }
+        else
+        {
+            return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
+        }
     }
 
     private boolean isReachableBedBlock(BlockPos p_9223_)
@@ -1187,6 +1256,7 @@
                 this.connection.send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
                 this.initMenu(abstractcontainermenu);
                 this.containerMenu = abstractcontainermenu;
+                Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.containerMenu));
                 return OptionalInt.of(this.containerCounter);
             }
         }
@@ -1208,6 +1278,7 @@
         this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, pInventory.getContainerSize(), pHorse.getId()));
         this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), pInventory, pHorse);
         this.initMenu(this.containerMenu);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Open_Constructor, this, this.containerMenu));
     }
 
     public void openItemGui(ItemStack pStack, InteractionHand pHand)
@@ -1238,6 +1309,7 @@
     {
         this.containerMenu.removed(this);
         this.inventoryMenu.transferState(this.containerMenu);
+        Reflector.postForgeBusEvent(Reflector.newInstance(Reflector.PlayerContainerEvent_Close_Constructor, this, this.containerMenu));
         this.containerMenu = this.inventoryMenu;
     }
 
@@ -1263,9 +1335,9 @@
     public void awardStat(Stat<?> pStat, int pAmount)
     {
         this.stats.increment(this, pStat, pAmount);
-        this.getScoreboard().forAllObjectives(pStat, this.getScoreboardName(), (p_8996_) ->
+        this.getScoreboard().forAllObjectives(pStat, this.getScoreboardName(), (p_195396_1_) ->
         {
-            p_8996_.add(pAmount);
+            p_195396_1_.add(pAmount);
         });
     }
 
@@ -1387,6 +1459,16 @@
         this.enteredNetherPosition = pThat.enteredNetherPosition;
         this.setShoulderEntityLeft(pThat.getShoulderEntityLeft());
         this.setShoulderEntityRight(pThat.getShoulderEntityRight());
+        //Forge
+        CompoundTag compoundtag = (CompoundTag)Reflector.call(pThat, Reflector.Entity_getPersistentData);
+
+        if (compoundtag != null && compoundtag.contains("PlayerPersisted"))
+        {
+            ((CompoundTag)Reflector.call(this, Reflector.Entity_getPersistentData)).put("PlayerPersisted", compoundtag.getCompound("PlayerPersisted"));
+        }
+
+        Reflector.callVoid(Reflector.ForgeEventFactory_onPlayerClone, this, pThat, !pKeepEverything);
+        //
     }
 
     protected void onEffectAdded(MobEffectInstance p_143393_, @Nullable Entity p_143394_)
@@ -1460,6 +1542,10 @@
 
     public boolean setGameMode(GameType p_143404_)
     {
+    	//Forge
+    	if (Reflector.ForgeHooks_onChangeGameMode.exists() && !Reflector.callBoolean(Reflector.ForgeHooks_onChangeGameMode, this, this.gameMode.getGameModeForPlayer(), p_143404_))
+    		return false;
+    	//
         if (!this.gameMode.changeGameModeForPlayer(p_143404_))
         {
             return false;
@@ -1531,6 +1617,9 @@
         this.allowsListing = pPacket.allowsListing();
         this.getEntityData().set(DATA_PLAYER_MODE_CUSTOMISATION, (byte)pPacket.modelCustomisation());
         this.getEntityData().set(DATA_PLAYER_MAIN_HAND, (byte)(pPacket.mainHand() == HumanoidArm.LEFT ? 0 : 1));
+        //forge
+        this.language = pPacket.language();
+        //
     }
 
     public boolean canChatInColor()
@@ -1606,7 +1695,8 @@
     {
         Entity entity = this.getCamera();
         this.camera = (Entity)(pEntityToSpectate == null ? this : pEntityToSpectate);
-
+        //Forge -- ehhh
+        //while (this.camera instanceof net.minecraftforge.entity.PartEntity<?> partEntity) this.camera = partEntity.getParent(); // FORGE: fix MC-46486
         if (entity != this.camera)
         {
             this.connection.send(new ClientboundSetCameraPacket(this.camera));
@@ -1642,7 +1732,15 @@
     @Nullable
     public Component getTabListDisplayName()
     {
-        return null;
+    	//Forge
+        if (!this.hasTabListName)
+        {
+            this.tabListDisplayName = (Component)Reflector.call(Reflector.ForgeEventFactory_getPlayerTabListDisplayName, this);
+            this.hasTabListName = true;
+        }
+
+        return this.tabListDisplayName;
+        //
     }
 
     public void swing(InteractionHand pHand)
@@ -1717,26 +1815,29 @@
 
     public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_)
     {
-        if (p_9160_ != null)
+        if (!Reflector.callBoolean(Reflector.ForgeEventFactory_onPlayerSpawnSet, this, p_9160_ == null ? Level.OVERWORLD : p_9159_, p_9160_, p_9161_))
         {
-            boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
+            if (p_9160_ != null)
+            {
+                boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
 
-            if (p_9163_ && !flag)
+                if (p_9163_ && !flag)
+                {
+                    this.sendMessage(new TranslatableComponent("block.minecraft.set_spawn"), Util.NIL_UUID);
+                }
+
+                this.respawnPosition = p_9160_;
+                this.respawnDimension = p_9159_;
+                this.respawnAngle = p_9161_;
+                this.respawnForced = p_9162_;
+            }
+            else
             {
-                this.sendMessage(new TranslatableComponent("block.minecraft.set_spawn"), Util.NIL_UUID);
+                this.respawnPosition = null;
+                this.respawnDimension = Level.OVERWORLD;
+                this.respawnAngle = 0.0F;
+                this.respawnForced = false;
             }
-
-            this.respawnPosition = p_9160_;
-            this.respawnDimension = p_9159_;
-            this.respawnAngle = p_9161_;
-            this.respawnForced = p_9162_;
-        }
-        else
-        {
-            this.respawnPosition = null;
-            this.respawnDimension = Level.OVERWORLD;
-            this.respawnAngle = 0.0F;
-            this.respawnForced = false;
         }
     }
 
@@ -1783,7 +1884,32 @@
         }
         else
         {
-            this.level.addFreshEntity(itementity);
+        	//Vivecraft
+            ServerVivePlayer serverviveplayer = NetworkHelper.vivePlayers.get(this.getUUID());
+
+            if (serverviveplayer != null && serverviveplayer.isVR() && !pDropAround)
+            {
+                Vec3 vec3 = serverviveplayer.getControllerPos(0, this);
+                Vec3 vec31 = serverviveplayer.getControllerDir(0);
+                float f = 0.3F;
+                itementity.setDeltaMovement(vec31.x * (double)f, vec31.y * (double)f, vec31.z * (double)f);
+                itementity.setPos(vec3.x() + itementity.getDeltaMovement().x(), vec3.y() + itementity.getDeltaMovement().y(), vec3.z() + itementity.getDeltaMovement().z());
+            }
+            //
+                 
+            //Forge
+            Collection<ItemEntity> collection = (Collection)Reflector.call(this, Reflector.Entity_captureDrops);
+
+            if (collection != null)
+            {
+                collection.add(itementity);
+            }
+            else
+            {
+                this.level.addFreshEntity(itementity);
+            }
+            //
+            
             ItemStack itemstack = itementity.getItem();
 
             if (pTraceItem)
@@ -1890,4 +2016,23 @@
     {
         return this.allowsListing;
     }
+
+    //Forge
+    public String getLanguage()
+    {
+        return this.language;
+    }
+
+    public void refreshTabListName()
+    {
+        Component component = this.tabListDisplayName;
+        this.tabListDisplayName = (Component)Reflector.call(Reflector.ForgeEventFactory_getPlayerTabListDisplayName, this);
+
+        if (!Objects.equals(component, this.tabListDisplayName))
+        {
+            this.getServer().getPlayerList().broadcastAll(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.UPDATE_DISPLAY_NAME, this));
+        }
+    }
+    //
+
 }
