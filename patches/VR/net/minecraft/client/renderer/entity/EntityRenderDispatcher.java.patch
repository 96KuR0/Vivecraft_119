--- a/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -1,6 +1,7 @@
 package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.math.Matrix3f;
@@ -11,6 +12,12 @@
 import java.util.HashMap;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.VRArmRenderer;
+import org.vivecraft.render.VRPlayerRenderer;
+
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -82,6 +89,14 @@
     private Entity renderedEntity = null;
     private EntityRendererProvider.Context context = null;
 
+    //Vivecraft
+    private final Map<String, VRPlayerRenderer> skinMapVR = Maps.newHashMap();
+    private final Map<String, VRPlayerRenderer> skinMapVRSeated = Maps.newHashMap();
+    private VRPlayerRenderer playerRendererVR;
+    private VRPlayerRenderer playerRendererVRSeated;
+    private VRArmRenderer armRenderer;
+    public final Map<String, VRArmRenderer> armSkinMap = new HashMap<>();
+    //
     public <E extends Entity> int getPackedLightCoords(E pEntity, float pPartialTicks)
     {
         int i = this.getRenderer(pEntity).getPackedLightCoords(pEntity, pPartialTicks);
@@ -107,16 +122,19 @@
 
     public <T extends Entity> EntityRenderer <? super T > getRenderer(T pEntity)
     {
-        if (pEntity instanceof AbstractClientPlayer)
-        {
-            String s = ((AbstractClientPlayer)pEntity).getModelName();
-            EntityRenderer <? extends Player > entityrenderer = this.playerRenderers.get(s);
+    	if (pEntity instanceof AbstractClientPlayer)
+    	{
+    		String s = ((AbstractClientPlayer)pEntity).getModelName();
+    		EntityRenderer <? extends Player > entityrenderer = this.playerRenderers.get(s);
+     		//Vivecraft
+     		entityrenderer = this.overrideRenderer((AbstractClientPlayer) pEntity, s, entityrenderer);
+     		//
             return entityrenderer != null ? (EntityRenderer <? super T >)entityrenderer : (EntityRenderer <? super T >)this.playerRenderers.get("default");
-        }
-        else
-        {
-            return (EntityRenderer <? super T >)this.renderers.get(pEntity.getType());
-        }
+    	}
+    	else
+    	{
+    		return (EntityRenderer <? super T >)this.renderers.get(pEntity.getType());
+    	}
     }
 
     public void prepare(Level pLevel, Camera pActiveRenderInfo, Entity pEntity)
@@ -455,7 +473,64 @@
 
     public Quaternion cameraOrientation()
     {
-        return this.cameraOrientation;
+        if (Minecraft.getInstance().currentPass == RenderPass.GUI)
+        {
+            return this.camera.rotation();
+        }
+        else
+        {
+            Entity entity = Minecraft.getInstance().levelRenderer.renderedEntity;
+
+            if (entity == null)
+            {
+                return this.camera.rotation();
+            }
+            else
+            {
+                Vec3 vec3 = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(RenderPass.CENTER).getPosition();
+
+                if (Minecraft.getInstance().currentPass == RenderPass.THIRD || Minecraft.getInstance().currentPass == RenderPass.CAMERA)
+                {
+                    vec3 = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(Minecraft.getInstance().currentPass).getPosition();
+                }
+
+                Vec3 vec31 = entity.position().add(0.0D, (double)(entity.getBbHeight() / 2.0F), 0.0D).subtract(vec3).normalize();
+                this.cameraOrientation.set(0.0F, 0.0F, 0.0F, 1.0F);
+                this.cameraOrientation.mul(Vector3f.YP.rotationDegrees((float)(-Math.toDegrees(Math.atan2(-vec31.x, vec31.z)))));
+                this.cameraOrientation.mul(Vector3f.XP.rotationDegrees((float)(-Math.toDegrees(Math.asin(vec31.y / vec31.length())))));
+                return this.cameraOrientation;
+            }
+        }
+    }
+
+    public Quaternion getCameraOrientationOffset(Entity entity, float offset)
+    {
+        if (Minecraft.getInstance().currentPass == RenderPass.GUI)
+        {
+            return this.camera.rotation();
+        }
+        else
+        {
+            if (entity == null)
+            {
+                return this.camera.rotation();
+            }
+            else
+            {
+                Vec3 vec3 = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(RenderPass.CENTER).getPosition();
+
+                if (Minecraft.getInstance().currentPass == RenderPass.THIRD || Minecraft.getInstance().currentPass == RenderPass.CAMERA)
+                {
+                    vec3 = Minecraft.getInstance().vrPlayer.getVRDataWorld().getEye(Minecraft.getInstance().currentPass).getPosition();
+                }
+
+                Vec3 vec31 = entity.position().add(0.0D, (double)(entity.getBbHeight() + offset), 0.0D).subtract(vec3).normalize();
+                this.cameraOrientation.set(0.0F, 0.0F, 0.0F, 1.0F);
+                this.cameraOrientation.mul(Vector3f.YP.rotationDegrees((float)(-Math.toDegrees(Math.atan2(-vec31.x, vec31.z)))));
+                this.cameraOrientation.mul(Vector3f.XP.rotationDegrees((float)(-Math.toDegrees(Math.asin(vec31.y / vec31.length())))));
+                return this.cameraOrientation;
+            }
+        }
     }
 
     public ItemInHandRenderer getItemInHandRenderer()
@@ -470,6 +545,11 @@
         this.renderers = EntityRenderers.createEntityRenderers(entityrendererprovider$context);
         this.playerRenderers = EntityRenderers.createPlayerRenderers(entityrendererprovider$context);
         registerPlayerItems(this.playerRenderers);
+        //Vivecraft       
+        this.armRenderer = new VRArmRenderer(context, false);
+        this.armSkinMap.put("default", this.armRenderer);
+        this.armSkinMap.put("slim", new VRArmRenderer(context, true));
+        //
         ReflectorForge.postModLoaderEvent(Reflector.EntityRenderersEvent_AddLayers_Constructor, this.renderers, this.playerRenderers);
     }
 
@@ -527,4 +607,47 @@
     {
         return Collections.unmodifiableMap(this.playerRenderers);
     }
+    
+	//Vivecraft
+	private EntityRenderer <? extends Player > overrideRenderer(AbstractClientPlayer pEntity, String s, EntityRenderer <? extends Player > renderer) {
+		PlayerModelController.RotInfo rotinfo = PlayerModelController.getInstance().getRotationsForPlayer(pEntity.getUUID());
+		if (rotinfo==null) return renderer;
+	
+		VRPlayerRenderer vrplayerrenderer1;
+	
+		if (rotinfo.seated)
+		{
+			if (this.playerRendererVRSeated == null)
+			{
+				this.playerRendererVRSeated = new VRPlayerRenderer(this.context, false, true);
+				this.skinMapVRSeated.put("default", this.playerRendererVRSeated);
+				this.skinMapVRSeated.put("slim", new VRPlayerRenderer(this.context, true, true));
+				//TODO: where gone?
+				//:shrug:
+				//PlayerItemsLayer.register(this.skinMapVRSeated);
+			}
+	
+			if(skinMapVRSeated.containsKey(s))
+				return this.skinMapVRSeated.get(s);
+			else 
+				return this.playerRendererVRSeated;
+	
+		}
+		else
+		{
+			if (this.playerRendererVR == null)
+			{
+				this.playerRendererVR = new VRPlayerRenderer(this.context, false, false);
+				this.skinMapVR.put("default", this.playerRendererVR);
+				this.skinMapVR.put("slim", new VRPlayerRenderer(this.context, true, false));
+				// PlayerItemsLayer.register(this.skinMapVR);
+			}
+			
+			if(skinMapVR.containsKey(s))
+				return this.skinMapVR.get(s);
+			else 
+				return this.playerRendererVR;
+	
+		}
+	}
 }
