--- a/net/minecraft/client/renderer/LevelRenderer.java
+++ b/net/minecraft/client/renderer/LevelRenderer.java
@@ -33,6 +33,7 @@
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
@@ -180,6 +181,9 @@
 import net.optifine.util.RenderChunkUtils;
 import org.lwjgl.opengl.GL11;
 import org.slf4j.Logger;
+import org.vivecraft.gameplay.screenhandlers.KeyboardHandler;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.settings.VRSettings;
 
 public class LevelRenderer implements ResourceManagerReloadListener, AutoCloseable
 {
@@ -283,6 +287,7 @@
     private int rainSoundTime;
     private final float[] rainSizeX = new float[1024];
     private final float[] rainSizeZ = new float[1024];
+    public Entity renderedEntity;
     public Set chunksToResortTransparency = new LinkedHashSet();
     public Set chunksToUpdateForced = new LinkedHashSet();
     private Set<ChunkRenderDispatcher.RenderChunk> chunksToUpdatePrev = new ObjectLinkedOpenHashSet<>();
@@ -314,7 +319,15 @@
     private Map<RenderType, Map> mapRegionLayers = new LinkedHashMap<>();
     private int frameId;
     private boolean debugFixTerrainFrustumShadow;
-
+    @Nullable
+    public RenderTarget alphaSortVROccludedFramebuffer;
+    @Nullable
+    public RenderTarget alphaSortVRUnoccludedFramebuffer;
+    @Nullable
+    public RenderTarget alphaSortVRHandsFramebuffer;
+    public float selR;
+    public float selG;
+    public float selB;
     public LevelRenderer(Minecraft p_234245_, EntityRenderDispatcher p_234246_, BlockEntityRenderDispatcher p_234247_, RenderBuffers p_234248_)
     {
         this.minecraft = p_234245_;
@@ -363,9 +376,16 @@
 
             pLightTexture.turnOnLightLayer();
             Level level = this.minecraft.level;
-            int i = Mth.floor(pCamX);
-            int j = Mth.floor(p_109707_);
-            int k = Mth.floor(pCamY);
+            //Vivecraft correct which xy pos doesn't get rain.
+            Vec3 vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(RenderPass.CENTER).getPosition();
+            if (this.minecraft.currentPass == RenderPass.THIRD || this.minecraft.currentPass == RenderPass.CAMERA)
+            {
+                vec3 = this.minecraft.vrPlayer.vrdata_world_render.getEye(this.minecraft.currentPass).getPosition();
+            }
+            int i = Mth.floor(vec3.x);
+            int j = Mth.floor(vec3.y);
+            int k = Mth.floor(vec3.z);
+            //
             Tesselator tesselator = Tesselator.getInstance();
             BufferBuilder bufferbuilder = tesselator.getBuilder();
             RenderSystem.disableCull();
@@ -587,12 +607,15 @@
 
     public void onResourceManagerReload(ResourceManager pResourceManager)
     {
-        this.initOutline();
 
-        if (Minecraft.useShaderTransparency())
-        {
-            this.initTransparency();
-        }
+        //Vivecraft
+        this.minecraft.vrRenderer.reinitFrameBuffers("Resource Reload");
+        //this.initOutline();
+        //
+//        if (Minecraft.useShaderTransparency())
+//        {
+//            this.initTransparency();
+//        }
     }
 
     public void initOutline()
@@ -624,10 +647,11 @@
         }
     }
 
-    private void initTransparency()
+    //unused
+    public void initTransparency()
     {
         this.deinitTransparency();
-        ResourceLocation resourcelocation = new ResourceLocation("shaders/post/transparency.json");
+        ResourceLocation resourcelocation = new ResourceLocation("shaders/post/vrtransparency.json");
 
         try
         {
@@ -645,11 +669,11 @@
             this.weatherTarget = rendertarget4;
             this.cloudsTarget = rendertarget;
         }
-        catch (Exception exception1)
+        catch (Exception exception)
         {
-            String s = exception1 instanceof JsonSyntaxException ? "parse" : "load";
+            String s = exception instanceof JsonSyntaxException ? "parse" : "load";
             String s1 = "Failed to " + s + " shader: " + resourcelocation;
-            LevelRenderer.TransparencyShaderException levelrenderer$transparencyshaderexception = new LevelRenderer.TransparencyShaderException(s1, exception1);
+            LevelRenderer.TransparencyShaderException levelrenderer$transparencyshaderexception = new LevelRenderer.TransparencyShaderException(s1, exception);
 
             if (this.minecraft.getResourcePackRepository().getSelectedIds().size() > 1)
             {
@@ -672,7 +696,7 @@
         }
     }
 
-    private void deinitTransparency()
+    public void deinitTransparency()
     {
         if (this.transparencyChain != null)
         {
@@ -880,6 +904,7 @@
         }
     }
 
+    //unused
     public void graphicsChanged()
     {
         if (Minecraft.useShaderTransparency())
@@ -896,7 +921,8 @@
     {
         if (this.level != null)
         {
-            this.graphicsChanged();
+        	//vivecraftn no.
+            //this.graphicsChanged();
             this.level.clearTintCaches();
 
             if (this.chunkRenderDispatcher == null)
@@ -1042,7 +1068,8 @@
             this.viewArea.repositionCamera(d0, d2);
         }
 
-        if (Config.isDynamicLights())
+        // VIVECRAFT: only update on the first frame, otherwise third person makes it go crazy
+        if (Config.isDynamicLights() && this.minecraft.currentPass == RenderPass.LEFT)
         {
             DynamicLights.update(this);
         }
@@ -1054,7 +1081,9 @@
         double d3 = Math.floor(vec3.x / 8.0D);
         double d4 = Math.floor(vec3.y / 8.0D);
         double d5 = Math.floor(vec3.z / 8.0D);
-        this.needsFullRenderChunkUpdate = this.needsFullRenderChunkUpdate || d3 != this.prevCamX || d4 != this.prevCamY || d5 != this.prevCamZ;
+        // VIVECRAFT: Always update culling because different camera positions
+        this.needsFullRenderChunkUpdate = true;//this.needsFullRenderChunkUpdate || d6 != this.prevCamX || d7 != this.prevCamY || d8 != this.prevCamZ;
+        //TODO: Investigate
         this.nextFullUpdateMillis.updateAndGet((p_234308_1_) ->
         {
             if (p_234308_1_ > 0L && System.currentTimeMillis() > p_234308_1_)
@@ -1523,17 +1552,25 @@
         }
     }
 
+    //cursed params
     public void renderLevel(PoseStack pPoseStack, float pPartialTick, long pFinishNanoTime, boolean p_109603_, Camera pRenderBlockOutline, GameRenderer pCamera, LightTexture pGameRenderer, Matrix4f pLightTexture)
     {
         RenderSystem.setShaderGameTime(this.level.getGameTime(), pPartialTick);
         this.blockEntityRenderDispatcher.prepare(this.level, pRenderBlockOutline, this.minecraft.hitResult);
         this.entityRenderDispatcher.prepare(this.level, pRenderBlockOutline, this.minecraft.crosshairPickEntity);
         ProfilerFiller profilerfiller = this.level.getProfiler();
-        profilerfiller.popPush("light_update_queue");
-        this.level.pollLightUpdates();
-        profilerfiller.popPush("light_updates");
-        boolean flag = this.level.isLightUpdateQueueEmpty();
-        this.level.getChunkSource().getLightEngine().runUpdates(Integer.MAX_VALUE, flag, true);
+    	//Vivecraft once per frame
+        if (this.minecraft.currentPass == RenderPass.LEFT)
+        {
+        	profilerfiller.popPush("light_update_queue");
+        	this.level.pollLightUpdates();
+        	profilerfiller.popPush("light_updates");
+        	boolean flag = this.level.isLightUpdateQueueEmpty();
+        	this.level.getChunkSource().getLightEngine().runUpdates(Integer.MAX_VALUE, flag, true);
+        }
+        //Vivecraft use our postchain
+        this.setShaderGroup();
+        //
         Vec3 vec3 = pRenderBlockOutline.getPosition();
         double d0 = vec3.x();
         double d1 = vec3.y();
@@ -1599,6 +1636,12 @@
             Shaders.setCamera(pPoseStack, pRenderBlockOutline, pPartialTick);
             Shaders.renderPrepare();
         }
+        //
+
+        //Vivecraft - VR Stencil
+        this.minecraft.getProfiler().popPush("stencil");
+        pCamera.drawEyeStencil(flag1);
+        //
 
         float f = pCamera.getRenderDistance();
         boolean flag3 = this.minecraft.level.effects().isFoggyAt(Mth.floor(d0), Mth.floor(d1)) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog();
@@ -1640,13 +1683,8 @@
         profilerfiller.popPush("terrain");
         Lagometer.timerTerrain.start();
 
-        if (this.minecraft.options.ofSmoothFps)
-        {
-            this.minecraft.getProfiler().popPush("finish");
-            GL11.glFinish();
-            this.minecraft.getProfiler().popPush("terrain");
-        }
-
+        //Vivecraft this is where ofSmoothFps, would be... if we allowed it.
+        
         if (Config.isFogOff() && FogRenderer.fogStandard)
         {
             RenderSystem.setFogAllowed(false);
@@ -1663,6 +1701,10 @@
             ShadersRender.endTerrain();
         }
 
+        //TODO: fix lighting?
+        Matrix4f matrix4f1 = new Matrix4f();
+        matrix4f1.setIdentity();
+        //
         if (this.level.effects().constantAmbientLight())
         {
             Lighting.setupNetherLevel(pPoseStack.last().pose());
@@ -1718,6 +1760,10 @@
             GameRenderer.getPositionShader().apply();
         }
 
+        //Vivecraft draw yourself sometimes.
+        boolean renderSelf = this.minecraft.currentPass == RenderPass.THIRD && this.minecraft.vrSettings.displayMirrorMode == VRSettings.MirrorMode.THIRD_PERSON || this.minecraft.currentPass == RenderPass.CAMERA;
+        renderSelf = renderSelf | (this.minecraft.vrSettings.shouldRenderSelf || this.minecraft.vrSettings.tmpRenderSelf);
+        //
         for (Entity entity : this.level.entitiesForRendering())
         {
             BlockPos blockpos = entity.blockPosition();
@@ -1729,8 +1775,8 @@
                 if (this.entityRenderDispatcher.shouldRender(entity, frustum, d0, d1, d2) || entity.hasIndirectPassenger(this.minecraft.player))
                 {
                     BlockPos blockpos1 = entity.blockPosition();
-
-                    if ((this.level.isOutsideBuildHeight(blockpos1.getY()) || this.isChunkCompiled(blockpos1)) && (entity != pRenderBlockOutline.getEntity() || pRenderBlockOutline.isDetached() || pRenderBlockOutline.getEntity() instanceof LivingEntity && ((LivingEntity)pRenderBlockOutline.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || pRenderBlockOutline.getEntity() == entity || flag6))
+                    //Vivecraft insert selfRender
+                    if ((this.level.isOutsideBuildHeight(blockpos1.getY()) || this.isChunkCompiled(blockpos1)) && (renderSelf || entity != pRenderBlockOutline.getEntity() || pRenderBlockOutline.isDetached() || pRenderBlockOutline.getEntity() instanceof LivingEntity && ((LivingEntity)pRenderBlockOutline.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || pRenderBlockOutline.getEntity() == entity || flag6))
                     {
                         String s = entity.getClass().getName();
                         List<Entity> list = this.mapEntityLists.get(s);
@@ -1753,6 +1799,13 @@
             {
                 ++this.renderedEntities;
 
+                //Vivecraft put back location.
+                if (entity1 == pRenderBlockOutline.getEntity())
+                {
+                    pCamera.restoreRVEPos((LivingEntity)entity1);
+                }
+                //
+                
                 if (entity1.tickCount == 0)
                 {
                     entity1.xOld = entity1.getX();
@@ -1778,13 +1831,24 @@
                 {
                     multibuffersource = multibuffersource$buffersource;
                 }
+                //excuse me I was using that!
+                this.renderedEntity = entity1;
 
                 if (flag2)
                 {
                     Shaders.nextEntity(entity1);
                 }
+                
 
                 this.renderEntity(entity1, d0, d1, d2, pPartialTick, pPoseStack, multibuffersource);
+                renderedEntity = null;
+	             //Vivecraft put it back back
+	             if (entity1 == pRenderBlockOutline.getEntity())
+	             {
+	                 pCamera.cacheRVEPos((LivingEntity)entity1);
+	                 pCamera.setupRVE();
+	             }
+	             //
             }
 
             list1.clear();
@@ -1985,6 +2049,20 @@
         this.checkPoseStack(pPoseStack);
         HitResult hitresult = this.minecraft.hitResult;
 
+        //Vivecraft interact highlight
+        selR = selG = selB = 1f;
+        for (int c=0;c<2;c++) {
+        	if(minecraft.interactTracker.isInteractActive(c) && (minecraft.interactTracker.inBlockHit[c] != null || minecraft.interactTracker.bukkit[c])) {
+        		BlockPos blockpos = minecraft.interactTracker.inBlockHit[c] != null ? minecraft.interactTracker.inBlockHit[c].getBlockPos() : new BlockPos(minecraft.vrPlayer.vrdata_world_render.getController(c).getPosition());
+        		BlockState blockstate = this.level.getBlockState(blockpos);
+                this.renderHitOutline(pPoseStack, multibuffersource$buffersource.getBuffer(RenderType.lines()), pRenderBlockOutline.getEntity(), d0, d1, d2, blockpos, blockstate);
+        		if (c==0) p_109603_ = false; //don't draw both
+        	}
+        }
+        //
+        	//vivecraft put back black outline
+        	selR = selG = selB = 0f;
+        	//
         if (p_109603_ && hitresult != null && hitresult.getType() == HitResult.Type.BLOCK)
         {
             profilerfiller.popPush("outline");
@@ -2027,6 +2105,7 @@
         this.minecraft.debugRenderer.render(pPoseStack, multibuffersource$buffersource, d0, d1, d2);
         posestack.popPose();
         RenderSystem.applyModelViewMatrix();
+        profilerfiller.popPush("render bukkake");
         multibuffersource$buffersource.endBatch(Sheets.translucentCullBlockSheet());
         multibuffersource$buffersource.endBatch(Sheets.bannerSheet());
         multibuffersource$buffersource.endBatch(Sheets.shieldSheet());
@@ -2044,15 +2123,17 @@
         {
             multibuffersource$buffersource.endBatch();
             ShadersRender.endDebug();
-            Shaders.preRenderHand();
-            Matrix4f matrix4f1 = RenderSystem.getProjectionMatrix().copy();
-            ShadersRender.renderHand0(pCamera, pPoseStack, pRenderBlockOutline, pPartialTick);
-            RenderSystem.setProjectionMatrix(matrix4f1);
+            //Shaders.preRenderHand();
+            //Matrix4f matrix4f1 = RenderSystem.getProjectionMatrix().copy();
+            //ShadersRender.renderHand0(pCamera, pPoseStack, pRenderBlockOutline, pPartialTick);
+            //RenderSystem.setProjectionMatrix(matrix4f1);
             Shaders.preWater();
         }
 
+        boolean menuHandleft = pCamera.isInMenuRoom() || this.minecraft.screen != null || KeyboardHandler.Showing;
+        boolean menuhandright = menuHandleft || this.minecraft.interactTracker.hotbar >= 0 && this.minecraft.vrSettings.vrTouchHotbar;
         if (this.transparencyChain != null)
-        {
+        { //fabulous!
             multibuffersource$buffersource.endBatch(RenderType.lines());
             multibuffersource$buffersource.endBatch();
             this.translucentTarget.clear(Minecraft.ON_OSX);
@@ -2067,9 +2148,12 @@
             profilerfiller.popPush("particles");
             this.minecraft.particleEngine.render(pPoseStack, multibuffersource$buffersource, pGameRenderer, pRenderBlockOutline, pPartialTick, frustum);
             RenderStateShard.PARTICLES_TARGET.clearRenderState();
+            pCamera.renderVRFabulous(pPartialTick, this, menuhandright, menuHandleft, pPoseStack);
         }
         else
-        {
+        { //Fast, Fancy
+        	//once
+            pCamera.renderVrFast(pPartialTick, false, menuhandright, menuHandleft, pPoseStack);
             profilerfiller.popPush("translucent");
             Lagometer.timerTerrain.start();
 
@@ -2113,6 +2197,8 @@
             {
                 this.minecraft.particleEngine.render(pPoseStack, multibuffersource$buffersource, pGameRenderer, pRenderBlockOutline, pPartialTick, frustum);
             }
+            //twice
+            pCamera.renderVrFast(pPartialTick, true, menuhandright, menuHandleft, pPoseStack);
 
             if (flag2)
             {
@@ -2356,7 +2442,7 @@
                     if (chunkrenderdispatcher$renderchunk.regionX != l || chunkrenderdispatcher$renderchunk.regionZ != i1)
                     {
                         PairInt pairint = PairInt.of(chunkrenderdispatcher$renderchunk.regionX, chunkrenderdispatcher$renderchunk.regionZ);
-                        map1 = map.computeIfAbsent(pairint, (kx) ->
+                        map1 = map.computeIfAbsent(pairint, (p_lambda$renderBlockLayer$4_0_) ->
                         {
                             return new LinkedHashMap(8);
                         });
@@ -3625,11 +3711,12 @@
         }
     }
 
+    //Vivecraft add configurable color.
     private void renderHitOutline(PoseStack pPoseStack, VertexConsumer pConsumer, Entity pEntity, double pCamX, double p_109642_, double pCamY, BlockPos p_109644_, BlockState pCamZ)
     {
         if (!Config.isCustomEntityModels() || !CustomEntityModels.isCustomModel(pCamZ))
         {
-            renderShape(pPoseStack, pConsumer, pCamZ.getShape(this.level, p_109644_, CollisionContext.of(pEntity)), (double)p_109644_.getX() - pCamX, (double)p_109644_.getY() - p_109642_, (double)p_109644_.getZ() - pCamY, 0.0F, 0.0F, 0.0F, 0.4F);
+            renderShape(pPoseStack, pConsumer, pCamZ.getShape(this.level, p_109644_, CollisionContext.of(pEntity)), (double)p_109644_.getX() - pCamX, (double)p_109644_.getY() - p_109642_, (double)p_109644_.getZ() - pCamY, this.selR, this.selG, this.selB, 0.4F);
         }
     }
 
@@ -4115,6 +4202,7 @@
     public void levelEvent(int p_234305_, BlockPos p_234306_, int p_234307_)
     {
         RandomSource randomsource = this.level.random;
+        boolean playerNear = this.minecraft.player != null && this.minecraft.player.isAlive() && this.minecraft.player.blockPosition().distSqr(p_234306_) < 25.0D;
 
         switch (p_234305_)
         {
@@ -4186,18 +4274,34 @@
                 break;
 
             case 1011:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 250);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.IRON_DOOR_CLOSE, SoundSource.BLOCKS, 1.0F, randomsource.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1012:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 250);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.WOODEN_DOOR_CLOSE, SoundSource.BLOCKS, 1.0F, randomsource.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1013:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 250);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.WOODEN_TRAPDOOR_CLOSE, SoundSource.BLOCKS, 1.0F, randomsource.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1014:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 250);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.FENCE_GATE_CLOSE, SoundSource.BLOCKS, 1.0F, randomsource.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -4218,14 +4322,29 @@
                 break;
 
             case 1019:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 750);
+                    this.minecraft.vr.triggerHapticPulse(1, 750);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.ZOMBIE_ATTACK_WOODEN_DOOR, SoundSource.HOSTILE, 2.0F, (randomsource.nextFloat() - randomsource.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1020:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 750);
+                    this.minecraft.vr.triggerHapticPulse(1, 750);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.ZOMBIE_ATTACK_IRON_DOOR, SoundSource.HOSTILE, 2.0F, (randomsource.nextFloat() - randomsource.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1021:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 750);
+                    this.minecraft.vr.triggerHapticPulse(1, 750);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.ZOMBIE_BREAK_WOODEN_DOOR, SoundSource.HOSTILE, 2.0F, (randomsource.nextFloat() - randomsource.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
@@ -4254,10 +4373,19 @@
                 break;
 
             case 1030:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 500);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.ANVIL_USE, SoundSource.BLOCKS, 1.0F, randomsource.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1031:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 1250);
+                    this.minecraft.vr.triggerHapticPulse(1, 1250);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.ANVIL_LAND, SoundSource.BLOCKS, 0.3F, this.level.random.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -4278,6 +4406,10 @@
                 break;
 
             case 1036:
+                if (playerNear)
+                {
+                    this.minecraft.vr.triggerHapticPulse(0, 250);
+                }
                 this.level.playLocalSound(p_234306_, SoundEvents.IRON_TRAPDOOR_CLOSE, SoundSource.BLOCKS, 1.0F, randomsource.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -4699,9 +4831,9 @@
         return 0;
     }
 
-    public ChunkRenderDispatcher.RenderChunk getRenderChunk(BlockPos pos)
+    public ChunkRenderDispatcher.RenderChunk getRenderChunk(BlockPos p_getRenderChunk_1_)
     {
-        return this.viewArea.getRenderChunkAt(pos);
+        return this.viewArea.getRenderChunkAt(p_getRenderChunk_1_);
     }
 
     public ClientLevel getWorld()
@@ -4804,11 +4936,11 @@
         return this.renderInfosTileEntities;
     }
 
-    private void checkLoadVisibleChunks(Camera activeRenderInfo, Frustum icamera, boolean spectator)
+    private void checkLoadVisibleChunks(Camera p_checkLoadVisibleChunks_1_, Frustum p_checkLoadVisibleChunks_2_, boolean p_checkLoadVisibleChunks_3_)
     {
         if (this.loadVisibleChunksCounter == 0)
         {
-            this.loadAllVisibleChunks(activeRenderInfo, icamera, spectator);
+            this.loadAllVisibleChunks(p_checkLoadVisibleChunks_1_, p_checkLoadVisibleChunks_2_, p_checkLoadVisibleChunks_3_);
             this.minecraft.gui.getChat().removeById(201435902);
         }
 
@@ -4818,7 +4950,7 @@
         }
     }
 
-    private void loadAllVisibleChunks(Camera activeRenderInfo, Frustum icamera, boolean spectator)
+    private void loadAllVisibleChunks(Camera p_loadAllVisibleChunks_1_, Frustum p_loadAllVisibleChunks_2_, boolean p_loadAllVisibleChunks_3_)
     {
         int i = this.minecraft.options.ofChunkUpdates;
         boolean flag = this.minecraft.options.ofLazyChunkLoading;
@@ -4842,7 +4974,7 @@
                 for (int j1 = 0; j1 < 100; ++j1)
                 {
                     levelrenderer.needsUpdate();
-                    levelrenderer.setupRender(activeRenderInfo, icamera, false, spectator);
+                    levelrenderer.setupRender(p_loadAllVisibleChunks_1_, p_loadAllVisibleChunks_2_, false, p_loadAllVisibleChunks_3_);
 
                     if (!levelrenderer.hasRenderedAllChunks())
                     {
@@ -5203,4 +5335,42 @@
             super(pMessage, pCause);
         }
     }
+    
+    //Vivecraft additions
+    public void setShaderGroup()
+    {
+        this.transparencyChain = null;
+        this.translucentTarget = null;
+        this.itemEntityTarget = null;
+        this.particlesTarget = null;
+        this.weatherTarget = null;
+        this.cloudsTarget = null;
+        this.alphaSortVRHandsFramebuffer = null;
+        this.alphaSortVROccludedFramebuffer = null;
+        this.alphaSortVRUnoccludedFramebuffer = null;
+        PostChain postchain = this.minecraft.vrRenderer.alphaShaders.get(this.minecraft.getMainRenderTarget().name);
+
+        if (postchain != null)
+        {
+            this.transparencyChain = postchain;
+            this.translucentTarget = postchain.getTempTarget("translucent");
+            this.itemEntityTarget = postchain.getTempTarget("itemEntity");
+            this.particlesTarget = postchain.getTempTarget("particles");
+            this.weatherTarget = postchain.getTempTarget("weather");
+            this.cloudsTarget = postchain.getTempTarget("clouds");
+            this.alphaSortVRHandsFramebuffer = postchain.getTempTarget("vrhands");
+            this.alphaSortVROccludedFramebuffer = postchain.getTempTarget("vroccluded");
+            this.alphaSortVRUnoccludedFramebuffer = postchain.getTempTarget("vrunoccluded");
+        }
+
+        this.entityEffect = null;
+        this.entityTarget = null;
+        PostChain postchain2 = this.minecraft.vrRenderer.entityShaders.get(this.minecraft.getMainRenderTarget().name);
+
+        if (postchain2 != null)
+        {
+            this.entityEffect = postchain2;
+            this.entityTarget = postchain2.getTempTarget("final");
+        }
+    }
 }
