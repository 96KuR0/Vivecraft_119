--- a/net/minecraft/client/main/Main.java
+++ b/net/minecraft/client/main/Main.java
@@ -38,12 +38,18 @@
 import net.minecraft.util.NativeModuleLister;
 import net.minecraft.util.profiling.jfr.Environment;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
+import net.optifine.reflect.Reflector;
+
 import org.slf4j.Logger;
 
 public class Main
 {
     static final Logger LOGGER = LogUtils.getLogger();
-
+    public static boolean kiosk;
+    public static boolean viewonly;
+    public static boolean katvr;
+    public static boolean infinadeck;
+    public static boolean oculus;
     @DontObfuscate
     public static void main(String[] pArgs)
     {
@@ -64,6 +70,12 @@
         optionparser.accepts("demo");
         optionparser.accepts("disableMultiplayer");
         optionparser.accepts("disableChat");
+        optionparser.accepts("demo");
+        optionparser.accepts("kiosk");
+        optionparser.accepts("viewonly");
+        optionparser.accepts("katvr");
+        optionparser.accepts("infinadeck");
+        optionparser.accepts("oculus");
         optionparser.accepts("fullscreen");
         optionparser.accepts("checkGlErrors");
         OptionSpec<Void> optionspec = optionparser.accepts("jfrProfile");
@@ -82,8 +94,8 @@
         OptionSpec<String> optionspec13 = optionparser.accepts("clientId").withOptionalArg().defaultsTo("");
         OptionSpec<String> optionspec14 = optionparser.accepts("accessToken").withRequiredArg().required();
         OptionSpec<String> optionspec15 = optionparser.accepts("version").withRequiredArg().required();
-        OptionSpec<Integer> optionspec16 = optionparser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854);
-        OptionSpec<Integer> optionspec17 = optionparser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480);
+        OptionSpec<Integer> optionspec16 = optionparser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(1280);
+        OptionSpec<Integer> optionspec17 = optionparser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(720);
         OptionSpec<Integer> optionspec18 = optionparser.accepts("fullscreenWidth").withRequiredArg().ofType(Integer.class);
         OptionSpec<Integer> optionspec19 = optionparser.accepts("fullscreenHeight").withRequiredArg().ofType(Integer.class);
         OptionSpec<String> optionspec20 = optionparser.accepts("userProperties").withRequiredArg().defaultsTo("{}");
@@ -134,6 +146,26 @@
         OptionalInt optionalint1 = ofNullable(parseArgument(optionset, optionspec19));
         boolean flag = optionset.has("fullscreen");
         boolean flag1 = optionset.has("demo");
+        kiosk = optionset.has("kiosk");
+
+        if (kiosk)
+        {
+            System.out.println("Setting kiosk");
+        }
+
+        if (kiosk)
+        {
+            viewonly = optionset.has("viewonly");
+
+            if (viewonly)
+            {
+                System.out.println("Setting viewonly");
+            }
+        }
+
+        katvr = optionset.has("katvr");
+        infinadeck = optionset.has("infinadeck");
+        oculus = optionset.has("oculus");
         boolean flag2 = optionset.has("disableMultiplayer");
         boolean flag3 = optionset.has("disableChat");
         String s3 = parseArgument(optionset, optionspec15);
@@ -157,7 +189,19 @@
         }
 
         CrashReport.preload();
-        Bootstrap.bootStrap();
+        //Forge
+        if(Reflector.BackgroundWaiter_runAndTick.exists()) {
+        	Runnable bootstrap = new Runnable() {			
+				@Override
+				public void run() {
+					Bootstrap.bootStrap();
+				}
+			};
+        	Reflector.call(Reflector.BackgroundWaiter_runAndTick, bootstrap, Reflector.getFieldValue(Reflector.FMLLoader_progressWindowTick));
+        } else {
+            Bootstrap.bootStrap();
+        }
+        //
         Bootstrap.validate();
         Util.startTimerHackThread();
         String s10 = optionspec23.value(optionset);
@@ -199,13 +243,14 @@
             minecraft = new Minecraft(gameconfig);
             RenderSystem.finishInitialization();
         }
-        catch (SilentInitException silentinitexception)
+        catch (RuntimeException silentinitexception)
         {
             LOGGER.warn("Failed to create window: ", (Throwable)silentinitexception);
             return;
         }
         catch (Throwable throwable1)
         {
+            LOGGER.warn("Failed to something: ", throwable1);
             CrashReport crashreport = CrashReport.forThrowable(throwable1, "Initializing game");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Initialization");
             NativeModuleLister.addCrashSection(crashreportcategory);
@@ -265,9 +310,9 @@
                 thread1.join();
             }
         }
-        catch (InterruptedException interruptedexception)
+        catch (InterruptedException interruptedexception1)
         {
-            LOGGER.error("Exception during client thread shutdown", (Throwable)interruptedexception);
+            LOGGER.error("Exception during client thread shutdown", (Throwable)interruptedexception1);
         }
         finally
         {
@@ -315,6 +360,6 @@
 
     static
     {
-        System.setProperty("java.awt.headless", "true");
+    	//Vivecraft we do this for some reason. System.setProperty("java.awt.headless", "true");
     }
 }
