--- a/net/minecraft/client/Options.java
+++ b/net/minecraft/client/Options.java
@@ -273,6 +273,9 @@
             p_231861_0_.set(p_231861_1_);
             this.updateRenderClouds();
             minecraft.levelRenderer.allChanged();
+            //Vivecraft
+            minecraft.vrRenderer.reinitFrameBuffers("gfx setting change");
+            //
         }
     }, Codec.INT.xmap(GraphicsStatus::byId, GraphicsStatus::getId)), GraphicsStatus.FANCY, (p_231870_0_) ->
     {
@@ -727,7 +730,7 @@
     public boolean ofSmoothFps = false;
     public boolean ofSmoothWorld = Config.isSingleProcessor();
     public boolean ofLazyChunkLoading = Config.isSingleProcessor();
-    public boolean ofRenderRegions = false;
+    public boolean ofRenderRegions = true;
     public boolean ofSmartAnimations = false;
     public double ofAoLevel = 1.0D;
     public int ofAaLevel = 0;
@@ -764,7 +767,7 @@
     public boolean ofFastRender = false;
     public boolean ofDynamicFov = true;
     public boolean ofAlternateBlocks = true;
-    public int ofDynamicLights = 3;
+    public int ofDynamicLights = 2;
     public boolean ofCustomEntityModels = true;
     public boolean ofCustomGuis = true;
     public boolean ofShowGlErrors = true;
@@ -1183,6 +1186,9 @@
         this.framerateLimit().set(this.framerateLimit().getMaxValue());
         this.ofKeyBindZoom = new KeyMapping("of.key.zoom", 67, "key.categories.misc");
         this.keyMappings = ArrayUtils.add(this.keyMappings, this.ofKeyBindZoom);
+        //Vivecraft
+        this.keyMappings = this.minecraft.vr.initializeBindings(this.keyMappings);
+		//    
         KeyUtils.fixKeyConflicts(this.keyMappings, new KeyMapping[] {this.ofKeyBindZoom});
         this.renderDistance.set(8);
         this.load();
@@ -1662,9 +1668,9 @@
 
                 printwriter.close();
             }
-            catch (Exception exception1)
+            catch (Exception exception)
             {
-                LOGGER.error("Failed to save options", (Throwable)exception1);
+                LOGGER.error("Failed to save options", (Throwable)exception);
             }
 
             this.saveOptions = false;
@@ -1806,9 +1812,9 @@
         }
     }
 
-    public void setOptionValueOF(OptionInstance par1EnumOptions, int par2)
+    public void setOptionValueOF(OptionInstance p_setOptionValueOF_1_, int par2)
     {
-        if (par1EnumOptions == Option.FOG_FANCY)
+        if (p_setOptionValueOF_1_ == Option.FOG_FANCY)
         {
             switch (this.ofFogType)
             {
@@ -1821,7 +1827,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.FOG_START)
+        if (p_setOptionValueOF_1_ == Option.FOG_START)
         {
             this.ofFogStart += 0.2F;
 
@@ -1831,18 +1837,18 @@
             }
         }
 
-        if (par1EnumOptions == Option.SMOOTH_FPS)
+        if (p_setOptionValueOF_1_ == Option.SMOOTH_FPS)
         {
             this.ofSmoothFps = !this.ofSmoothFps;
         }
 
-        if (par1EnumOptions == Option.SMOOTH_WORLD)
+        if (p_setOptionValueOF_1_ == Option.SMOOTH_WORLD)
         {
             this.ofSmoothWorld = !this.ofSmoothWorld;
             Config.updateThreadPriorities();
         }
 
-        if (par1EnumOptions == Option.CLOUDS)
+        if (p_setOptionValueOF_1_ == Option.CLOUDS)
         {
             ++this.ofClouds;
 
@@ -1854,13 +1860,13 @@
             this.updateRenderClouds();
         }
 
-        if (par1EnumOptions == Option.TREES)
+        if (p_setOptionValueOF_1_ == Option.TREES)
         {
             this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.RAIN)
+        if (p_setOptionValueOF_1_ == Option.RAIN)
         {
             ++this.ofRain;
 
@@ -1870,7 +1876,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.ANIMATED_WATER)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_WATER)
         {
             ++this.ofAnimatedWater;
 
@@ -1885,7 +1891,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.ANIMATED_LAVA)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_LAVA)
         {
             ++this.ofAnimatedLava;
 
@@ -1900,92 +1906,92 @@
             }
         }
 
-        if (par1EnumOptions == Option.ANIMATED_FIRE)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_FIRE)
         {
             this.ofAnimatedFire = !this.ofAnimatedFire;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_PORTAL)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_PORTAL)
         {
             this.ofAnimatedPortal = !this.ofAnimatedPortal;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_REDSTONE)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_REDSTONE)
         {
             this.ofAnimatedRedstone = !this.ofAnimatedRedstone;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_EXPLOSION)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_EXPLOSION)
         {
             this.ofAnimatedExplosion = !this.ofAnimatedExplosion;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_FLAME)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_FLAME)
         {
             this.ofAnimatedFlame = !this.ofAnimatedFlame;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_SMOKE)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_SMOKE)
         {
             this.ofAnimatedSmoke = !this.ofAnimatedSmoke;
         }
 
-        if (par1EnumOptions == Option.VOID_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.VOID_PARTICLES)
         {
             this.ofVoidParticles = !this.ofVoidParticles;
         }
 
-        if (par1EnumOptions == Option.WATER_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.WATER_PARTICLES)
         {
             this.ofWaterParticles = !this.ofWaterParticles;
         }
 
-        if (par1EnumOptions == Option.PORTAL_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.PORTAL_PARTICLES)
         {
             this.ofPortalParticles = !this.ofPortalParticles;
         }
 
-        if (par1EnumOptions == Option.POTION_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.POTION_PARTICLES)
         {
             this.ofPotionParticles = !this.ofPotionParticles;
         }
 
-        if (par1EnumOptions == Option.FIREWORK_PARTICLES)
+        if (p_setOptionValueOF_1_ == Option.FIREWORK_PARTICLES)
         {
             this.ofFireworkParticles = !this.ofFireworkParticles;
         }
 
-        if (par1EnumOptions == Option.DRIPPING_WATER_LAVA)
+        if (p_setOptionValueOF_1_ == Option.DRIPPING_WATER_LAVA)
         {
             this.ofDrippingWaterLava = !this.ofDrippingWaterLava;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_TERRAIN)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_TERRAIN)
         {
             this.ofAnimatedTerrain = !this.ofAnimatedTerrain;
         }
 
-        if (par1EnumOptions == Option.ANIMATED_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.ANIMATED_TEXTURES)
         {
             this.ofAnimatedTextures = !this.ofAnimatedTextures;
         }
 
-        if (par1EnumOptions == Option.RAIN_SPLASH)
+        if (p_setOptionValueOF_1_ == Option.RAIN_SPLASH)
         {
             this.ofRainSplash = !this.ofRainSplash;
         }
 
-        if (par1EnumOptions == Option.LAGOMETER)
+        if (p_setOptionValueOF_1_ == Option.LAGOMETER)
         {
             this.ofLagometer = !this.ofLagometer;
         }
 
-        if (par1EnumOptions == Option.SHOW_FPS)
+        if (p_setOptionValueOF_1_ == Option.SHOW_FPS)
         {
             this.ofShowFps = !this.ofShowFps;
         }
 
-        if (par1EnumOptions == Option.AUTOSAVE_TICKS)
+        if (p_setOptionValueOF_1_ == Option.AUTOSAVE_TICKS)
         {
             int i = 900;
             this.ofAutoSaveTicks = Math.max(this.ofAutoSaveTicks / i * i, i);
@@ -1997,7 +2003,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.BETTER_GRASS)
+        if (p_setOptionValueOF_1_ == Option.BETTER_GRASS)
         {
             ++this.ofBetterGrass;
 
@@ -2009,7 +2015,7 @@
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.CONNECTED_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.CONNECTED_TEXTURES)
         {
             ++this.ofConnectedTextures;
 
@@ -2028,27 +2034,27 @@
             }
         }
 
-        if (par1EnumOptions == Option.WEATHER)
+        if (p_setOptionValueOF_1_ == Option.WEATHER)
         {
             this.ofWeather = !this.ofWeather;
         }
 
-        if (par1EnumOptions == Option.SKY)
+        if (p_setOptionValueOF_1_ == Option.SKY)
         {
             this.ofSky = !this.ofSky;
         }
 
-        if (par1EnumOptions == Option.STARS)
+        if (p_setOptionValueOF_1_ == Option.STARS)
         {
             this.ofStars = !this.ofStars;
         }
 
-        if (par1EnumOptions == Option.SUN_MOON)
+        if (p_setOptionValueOF_1_ == Option.SUN_MOON)
         {
             this.ofSunMoon = !this.ofSunMoon;
         }
 
-        if (par1EnumOptions == Option.VIGNETTE)
+        if (p_setOptionValueOF_1_ == Option.VIGNETTE)
         {
             ++this.ofVignette;
 
@@ -2058,7 +2064,7 @@
             }
         }
 
-        if (par1EnumOptions == Option.CHUNK_UPDATES)
+        if (p_setOptionValueOF_1_ == Option.CHUNK_UPDATES)
         {
             ++this.ofChunkUpdates;
 
@@ -2068,12 +2074,12 @@
             }
         }
 
-        if (par1EnumOptions == Option.CHUNK_UPDATES_DYNAMIC)
+        if (p_setOptionValueOF_1_ == Option.CHUNK_UPDATES_DYNAMIC)
         {
             this.ofChunkUpdatesDynamic = !this.ofChunkUpdatesDynamic;
         }
 
-        if (par1EnumOptions == Option.TIME)
+        if (p_setOptionValueOF_1_ == Option.TIME)
         {
             ++this.ofTime;
 
@@ -2083,119 +2089,119 @@
             }
         }
 
-        if (par1EnumOptions == Option.PROFILER)
+        if (p_setOptionValueOF_1_ == Option.PROFILER)
         {
             this.ofProfiler = !this.ofProfiler;
         }
 
-        if (par1EnumOptions == Option.BETTER_SNOW)
+        if (p_setOptionValueOF_1_ == Option.BETTER_SNOW)
         {
             this.ofBetterSnow = !this.ofBetterSnow;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.SWAMP_COLORS)
+        if (p_setOptionValueOF_1_ == Option.SWAMP_COLORS)
         {
             this.ofSwampColors = !this.ofSwampColors;
             CustomColors.updateUseDefaultGrassFoliageColors();
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.RANDOM_ENTITIES)
+        if (p_setOptionValueOF_1_ == Option.RANDOM_ENTITIES)
         {
             this.ofRandomEntities = !this.ofRandomEntities;
             RandomEntities.update();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_FONTS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_FONTS)
         {
             this.ofCustomFonts = !this.ofCustomFonts;
             FontUtils.reloadFonts();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_COLORS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_COLORS)
         {
             this.ofCustomColors = !this.ofCustomColors;
             CustomColors.update();
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_ITEMS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_ITEMS)
         {
             this.ofCustomItems = !this.ofCustomItems;
             this.minecraft.delayTextureReload();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_SKY)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_SKY)
         {
             this.ofCustomSky = !this.ofCustomSky;
             CustomSky.update();
         }
 
-        if (par1EnumOptions == Option.SHOW_CAPES)
+        if (p_setOptionValueOF_1_ == Option.SHOW_CAPES)
         {
             this.ofShowCapes = !this.ofShowCapes;
         }
 
-        if (par1EnumOptions == Option.NATURAL_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.NATURAL_TEXTURES)
         {
             this.ofNaturalTextures = !this.ofNaturalTextures;
             NaturalTextures.update();
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.EMISSIVE_TEXTURES)
+        if (p_setOptionValueOF_1_ == Option.EMISSIVE_TEXTURES)
         {
             this.ofEmissiveTextures = !this.ofEmissiveTextures;
             this.minecraft.delayTextureReload();
         }
 
-        if (par1EnumOptions == Option.FAST_MATH)
+        if (p_setOptionValueOF_1_ == Option.FAST_MATH)
         {
             this.ofFastMath = !this.ofFastMath;
             Mth.fastMath = this.ofFastMath;
         }
 
-        if (par1EnumOptions == Option.FAST_RENDER)
+        if (p_setOptionValueOF_1_ == Option.FAST_RENDER)
         {
             this.ofFastRender = !this.ofFastRender;
         }
 
-        if (par1EnumOptions == Option.LAZY_CHUNK_LOADING)
+        if (p_setOptionValueOF_1_ == Option.LAZY_CHUNK_LOADING)
         {
             this.ofLazyChunkLoading = !this.ofLazyChunkLoading;
         }
 
-        if (par1EnumOptions == Option.RENDER_REGIONS)
+        if (p_setOptionValueOF_1_ == Option.RENDER_REGIONS)
         {
             this.ofRenderRegions = !this.ofRenderRegions;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.SMART_ANIMATIONS)
+        if (p_setOptionValueOF_1_ == Option.SMART_ANIMATIONS)
         {
             this.ofSmartAnimations = !this.ofSmartAnimations;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.DYNAMIC_FOV)
+        if (p_setOptionValueOF_1_ == Option.DYNAMIC_FOV)
         {
             this.ofDynamicFov = !this.ofDynamicFov;
         }
 
-        if (par1EnumOptions == Option.ALTERNATE_BLOCKS)
+        if (p_setOptionValueOF_1_ == Option.ALTERNATE_BLOCKS)
         {
             this.ofAlternateBlocks = !this.ofAlternateBlocks;
             this.minecraft.levelRenderer.allChanged();
         }
 
-        if (par1EnumOptions == Option.DYNAMIC_LIGHTS)
+        if (p_setOptionValueOF_1_ == Option.DYNAMIC_LIGHTS)
         {
             this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
             DynamicLights.removeLights(this.minecraft.levelRenderer);
         }
 
-        if (par1EnumOptions == Option.SCREENSHOT_SIZE)
+        if (p_setOptionValueOF_1_ == Option.SCREENSHOT_SIZE)
         {
             ++this.ofScreenshotSize;
 
@@ -2205,34 +2211,34 @@
             }
         }
 
-        if (par1EnumOptions == Option.CUSTOM_ENTITY_MODELS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_ENTITY_MODELS)
         {
             this.ofCustomEntityModels = !this.ofCustomEntityModels;
             this.minecraft.delayTextureReload();
         }
 
-        if (par1EnumOptions == Option.CUSTOM_GUIS)
+        if (p_setOptionValueOF_1_ == Option.CUSTOM_GUIS)
         {
             this.ofCustomGuis = !this.ofCustomGuis;
             CustomGuis.update();
         }
 
-        if (par1EnumOptions == Option.SHOW_GL_ERRORS)
+        if (p_setOptionValueOF_1_ == Option.SHOW_GL_ERRORS)
         {
             this.ofShowGlErrors = !this.ofShowGlErrors;
         }
 
-        if (par1EnumOptions == Option.HELD_ITEM_TOOLTIPS)
+        if (p_setOptionValueOF_1_ == Option.HELD_ITEM_TOOLTIPS)
         {
             this.heldItemTooltips = !this.heldItemTooltips;
         }
 
-        if (par1EnumOptions == Option.ADVANCED_TOOLTIPS)
+        if (p_setOptionValueOF_1_ == Option.ADVANCED_TOOLTIPS)
         {
             this.advancedItemTooltips = !this.advancedItemTooltips;
         }
 
-        if (par1EnumOptions == Option.CHAT_BACKGROUND)
+        if (p_setOptionValueOF_1_ == Option.CHAT_BACKGROUND)
         {
             if (this.ofChatBackground == 0)
             {
@@ -2248,12 +2254,12 @@
             }
         }
 
-        if (par1EnumOptions == Option.CHAT_SHADOW)
+        if (p_setOptionValueOF_1_ == Option.CHAT_SHADOW)
         {
             this.ofChatShadow = !this.ofChatShadow;
         }
 
-        if (par1EnumOptions == Option.TELEMETRY)
+        if (p_setOptionValueOF_1_ == Option.TELEMETRY)
         {
             this.ofTelemetry = nextValue(this.ofTelemetry, OF_TELEMETRY);
         }
@@ -3171,16 +3177,19 @@
                         this.ofKeyBindZoom.setKey(InputConstants.getKey(astring[1]));
                     }
                 }
-                catch (Exception exception1)
+                catch (Exception exception)
                 {
                     Config.dbg("Skipping bad option: " + s);
-                    exception1.printStackTrace();
+                    exception.printStackTrace();
                 }
             }
 
             KeyUtils.fixKeyConflicts(this.keyMappings, new KeyMapping[] {this.ofKeyBindZoom});
             KeyMapping.resetMapping();
             bufferedreader.close();
+            this.ofFastRender = false;
+            this.ofAaLevel = 0;
+            this.ofAfLevel = 1;
         }
         catch (Exception exception11)
         {
@@ -3266,10 +3275,10 @@
             printwriter.println("key_" + this.ofKeyBindZoom.getName() + ":" + this.ofKeyBindZoom.saveString());
             printwriter.close();
         }
-        catch (Exception exception1)
+        catch (Exception exception)
         {
             Config.warn("Failed to save options");
-            exception1.printStackTrace();
+            exception.printStackTrace();
         }
     }
 
@@ -3345,7 +3354,7 @@
         Config.updateAvailableProcessors();
         this.ofSmoothWorld = Config.isSingleProcessor();
         this.ofLazyChunkLoading = false;
-        this.ofRenderRegions = false;
+        this.ofRenderRegions = true;
         this.ofFastMath = false;
         this.ofFastRender = false;
         this.ofDynamicFov = true;
