--- a/net/optifine/shaders/ShadersRender.java
+++ b/net/optifine/shaders/ShadersRender.java
@@ -1,6 +1,7 @@
 package net.optifine.shaders;
 
 import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.Lighting;
 import com.mojang.blaze3d.systems.RenderSystem;
 import com.mojang.blaze3d.vertex.BufferBuilder;
 import com.mojang.blaze3d.vertex.PoseStack;
@@ -259,7 +260,7 @@
         }
     }
 
-    public static void renderShadowMap(GameRenderer entityRenderer, Camera activeRenderInfo, int pass, float partialTicks, long finishTimeNano)
+    public static void renderShadowMap(GameRenderer gameRenderer, Camera activeRenderInfo, int pass, float partialTicks, long finishTimeNano)
     {
         if (Shaders.hasShadowMap)
         {
@@ -350,6 +351,7 @@
                 levelrenderer.renderChunkLayer(RenderTypes.SOLID, posestack, d0, d1, d2, matrix4f1);
                 Shaders.checkGLError("shadow terrain solid");
                 GlStateManager.enableAlphaTest();
+                GlStateManager.alphaFunc(516, 0.1F); // vivecraft?
                 levelrenderer.renderChunkLayer(RenderTypes.CUTOUT_MIPPED, posestack, d0, d1, d2, matrix4f1);
                 Shaders.checkGLError("shadow terrain cutoutmipped");
                 minecraft.getTextureManager().getTexture(TextureAtlas.LOCATION_BLOCKS).setFilter(false, false);
@@ -368,7 +370,10 @@
             int j = minecraft.level.getMinBuildHeight();
             int k = minecraft.level.getMaxBuildHeight();
             LongOpenHashSet longopenhashset = levelrenderer.getRenderChunksEntities();
-
+            //vivecraft neutral lighting
+            Matrix4f matrix4fi = new Matrix4f();
+            matrix4fi.setIdentity();
+            Lighting.setupLevel(matrix4fi);
             for (Entity entity : Shaders.isRenderShadowEntities() ? Shaders.getCurrentWorld().entitiesForRendering() : (List<Entity>)Collections.EMPTY_LIST)
             {
                 BlockPos blockpos = entity.blockPosition();
@@ -376,10 +381,19 @@
                 if ((longopenhashset.contains(SectionPos.asLong(blockpos)) || blockpos.getY() <= j || blockpos.getY() >= k) && (entityrenderdispatcher.shouldRender(entity, frustum, d0, d1, d2) || entity.hasIndirectPassenger(minecraft.player)) && (entity != activeRenderInfo.getEntity() || flag || activeRenderInfo.isDetached() || activeRenderInfo.getEntity() instanceof LivingEntity && ((LivingEntity)activeRenderInfo.getEntity()).isSleeping()) && (!(entity instanceof LocalPlayer) || activeRenderInfo.getEntity() == entity))
                 {
                     ++countEntitiesRenderedShadow;
+                	if (entity == activeRenderInfo.getEntity())
+                	{
+                		gameRenderer.restoreRVEPos((LivingEntity)entity);
+                	}
                     levelrenderer1.renderedEntity = entity;
                     Shaders.nextEntity(entity);
                     levelrenderer1.renderEntity(entity, d0, d1, d2, partialTicks, posestack, multibuffersource$buffersource);
                     levelrenderer1.renderedEntity = null;
+                	if (entity == activeRenderInfo.getEntity())
+                	{
+                		gameRenderer.cacheRVEPos((LivingEntity)entity);
+                		gameRenderer.setupRVE();
+                	}
                 }
             }
 
@@ -487,7 +501,6 @@
             GlStateManager._depthMask(true);
             GlStateManager._enableCull();
             GlStateManager._disableBlend();
-            GL30.glFlush();
             Shaders.checkGLError("shadow flush");
             Shaders.isShadowPass = false;
             levelrenderer.setShadowRenderInfos(false);
