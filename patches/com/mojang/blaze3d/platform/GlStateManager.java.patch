--- a/com/mojang/blaze3d/platform/GlStateManager.java
+++ b/com/mojang/blaze3d/platform/GlStateManager.java
@@ -40,7 +40,7 @@
 public class GlStateManager
 {
     public static final int TEXTURE_COUNT = 12;
-    private static final GlStateManager.BlendState BLEND = new GlStateManager.BlendState();
+    public static final GlStateManager.BlendState BLEND = new GlStateManager.BlendState();
     private static final GlStateManager.DepthState DEPTH = new GlStateManager.DepthState();
     private static final GlStateManager.CullState CULL = new GlStateManager.CullState();
     private static final GlStateManager.PolygonOffsetState POLY_OFFSET = new GlStateManager.PolygonOffsetState();
@@ -223,22 +223,19 @@
         {
             blendLockState.setFactors(p_84329_, p_84330_);
         }
-        else
+        else if (p_84329_ != BLEND.srcRgb || p_84330_ != BLEND.dstRgb || p_84329_ != BLEND.srcAlpha || p_84330_ != BLEND.dstAlpha)
         {
-            if (p_84329_ != BLEND.srcRgb || p_84330_ != BLEND.dstRgb || p_84329_ != BLEND.srcAlpha || p_84330_ != BLEND.dstAlpha)
-            {
-                BLEND.srcRgb = p_84329_;
-                BLEND.dstRgb = p_84330_;
-                BLEND.srcAlpha = p_84329_;
-                BLEND.dstAlpha = p_84330_;
-
-                if (Config.isShaders())
-                {
-                    Shaders.uniform_blendFunc.setValue(p_84329_, p_84330_, p_84329_, p_84330_);
-                }
+            BLEND.srcRgb = p_84329_;
+            BLEND.dstRgb = p_84330_;
+            BLEND.srcAlpha = p_84329_;
+            BLEND.dstAlpha = p_84330_;
 
-                GL11.glBlendFunc(p_84329_, p_84330_);
+            if (Config.isShaders())
+            {
+                Shaders.uniform_blendFunc.setValue(p_84329_, p_84330_, p_84329_, p_84330_);
             }
+
+            GL11.glBlendFunc(p_84329_, p_84330_);
         }
     }
 
@@ -246,26 +243,28 @@
     {
         RenderSystem.assertThread(RenderSystem::isOnRenderThread);
 
+        if (p_84336_ == GlStateManager.SourceFactor.SRC_ALPHA.value && p_84337_ == GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA.value && p_84338_ == GlStateManager.SourceFactor.ONE.value && p_84339_ == GlStateManager.DestFactor.ZERO.value)
+        {
+            p_84339_ = GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA.value;
+        }
+
         if (blendLock.isLocked())
         {
             blendLockState.setFactors(p_84336_, p_84337_, p_84338_, p_84339_);
         }
-        else
+        else if (p_84336_ != BLEND.srcRgb || p_84337_ != BLEND.dstRgb || p_84338_ != BLEND.srcAlpha || p_84339_ != BLEND.dstAlpha)
         {
-            if (p_84336_ != BLEND.srcRgb || p_84337_ != BLEND.dstRgb || p_84338_ != BLEND.srcAlpha || p_84339_ != BLEND.dstAlpha)
-            {
-                BLEND.srcRgb = p_84336_;
-                BLEND.dstRgb = p_84337_;
-                BLEND.srcAlpha = p_84338_;
-                BLEND.dstAlpha = p_84339_;
+            BLEND.srcRgb = p_84336_;
+            BLEND.dstRgb = p_84337_;
+            BLEND.srcAlpha = p_84338_;
+            BLEND.dstAlpha = p_84339_;
 
-                if (Config.isShaders())
-                {
-                    Shaders.uniform_blendFunc.setValue(p_84336_, p_84337_, p_84338_, p_84339_);
-                }
-
-                glBlendFuncSeparate(p_84336_, p_84337_, p_84338_, p_84339_);
+            if (Config.isShaders())
+            {
+                Shaders.uniform_blendFunc.setValue(p_84336_, p_84337_, p_84338_, p_84339_);
             }
+
+            glBlendFuncSeparate(p_84336_, p_84337_, p_84338_, p_84339_);
         }
     }
 
@@ -640,6 +639,8 @@
     public static void _glDeleteFramebuffers(int p_84503_)
     {
         RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
+        if(p_84503_ == framebufferDraw) framebufferDraw = 0;
+        if(p_84503_ == framebufferRead) framebufferRead = 0;
         GL30.glDeleteFramebuffers(p_84503_);
     }
 
@@ -892,11 +893,11 @@
 
             GL11.glDeleteTextures(p_84542_);
 
-            for (GlStateManager.TextureState glstatemanager$texturestate : TEXTURES)
+            for (GlStateManager.TextureState GlStateManager$texturestate : TEXTURES)
             {
-                if (glstatemanager$texturestate.binding == p_84542_)
+                if (GlStateManager$texturestate.binding == p_84542_)
                 {
-                    glstatemanager$texturestate.binding = 0;
+                    GlStateManager$texturestate.binding = 0;
                 }
             }
         }
@@ -906,13 +907,13 @@
     {
         RenderSystem.assertThread(RenderSystem::isOnRenderThreadOrInit);
 
-        for (GlStateManager.TextureState glstatemanager$texturestate : TEXTURES)
+        for (GlStateManager.TextureState GlStateManager$texturestate : TEXTURES)
         {
             for (int i : p_84366_)
             {
-                if (glstatemanager$texturestate.binding == i)
+                if (GlStateManager$texturestate.binding == i)
                 {
-                    glstatemanager$texturestate.binding = -1;
+                    GlStateManager$texturestate.binding = -1;
                 }
             }
         }
@@ -1198,32 +1199,29 @@
             int k = getActiveTextureUnit();
             int l = getBoundTexture();
 
-            if (l > 0)
+            if (l > 0 && (i != k || j != l))
             {
-                if (i != k || j != l)
-                {
-                    Config.dbg("checkTexture: act: " + k + ", glAct: " + i + ", tex: " + l + ", glTex: " + j);
-                }
+                Config.dbg("checkTexture: act: " + k + ", glAct: " + i + ", tex: " + l + ", glTex: " + j);
             }
         }
     }
 
-    public static void genTextures(IntBuffer buf)
+    public static void genTextures(IntBuffer p_genTextures_0_)
     {
-        GL11.glGenTextures(buf);
+        GL11.glGenTextures(p_genTextures_0_);
     }
 
-    public static void deleteTextures(IntBuffer buf)
+    public static void deleteTextures(IntBuffer p_deleteTextures_0_)
     {
-        ((Buffer)buf).rewind();
+        ((Buffer)p_deleteTextures_0_).rewind();
 
-        while (buf.position() < buf.limit())
+        while (p_deleteTextures_0_.position() < p_deleteTextures_0_.limit())
         {
-            int i = buf.get();
+            int i = p_deleteTextures_0_.get();
             _deleteTexture(i);
         }
 
-        ((Buffer)buf).rewind();
+        ((Buffer)p_deleteTextures_0_).rewind();
     }
 
     public static void lockAlpha(GlAlphaState stateNew)
@@ -1287,45 +1285,45 @@
         }
     }
 
-    public static void getBlendState(GlBlendState gbs)
+    public static void getBlendState(GlBlendState p_getBlendState_0_)
     {
         if (blendLock.isLocked())
         {
-            gbs.setState(blendLockState);
+            p_getBlendState_0_.setState(blendLockState);
         }
         else
         {
-            gbs.setState(BLEND.mode.enabled, BLEND.srcRgb, BLEND.dstRgb, BLEND.srcAlpha, BLEND.dstAlpha);
+            p_getBlendState_0_.setState(BLEND.mode.enabled, BLEND.srcRgb, BLEND.dstRgb, BLEND.srcAlpha, BLEND.dstAlpha);
         }
     }
 
-    public static void setBlendState(GlBlendState gbs)
+    public static void setBlendState(GlBlendState p_setBlendState_0_)
     {
         if (blendLock.isLocked())
         {
-            blendLockState.setState(gbs);
+            blendLockState.setState(p_setBlendState_0_);
         }
         else
         {
-            BLEND.mode.setEnabled(gbs.isEnabled());
+            BLEND.mode.setEnabled(p_setBlendState_0_.isEnabled());
 
-            if (!gbs.isSeparate())
+            if (!p_setBlendState_0_.isSeparate())
             {
-                _blendFunc(gbs.getSrcFactor(), gbs.getDstFactor());
+                _blendFunc(p_setBlendState_0_.getSrcFactor(), p_setBlendState_0_.getDstFactor());
             }
             else
             {
-                _blendFuncSeparate(gbs.getSrcFactor(), gbs.getDstFactor(), gbs.getSrcFactorAlpha(), gbs.getDstFactorAlpha());
+                _blendFuncSeparate(p_setBlendState_0_.getSrcFactor(), p_setBlendState_0_.getDstFactor(), p_setBlendState_0_.getSrcFactorAlpha(), p_setBlendState_0_.getDstFactorAlpha());
             }
         }
     }
 
-    public static void lockCull(GlCullState stateNew)
+    public static void lockCull(GlCullState p_lockCull_0_)
     {
         if (!cullLock.isLocked())
         {
             getCullState(cullLockState);
-            setCullState(stateNew);
+            setCullState(p_lockCull_0_);
             cullLock.lock();
         }
     }
@@ -1338,34 +1336,34 @@
         }
     }
 
-    public static void getCullState(GlCullState state)
+    public static void getCullState(GlCullState p_getCullState_0_)
     {
         if (cullLock.isLocked())
         {
-            state.setState(cullLockState);
+            p_getCullState_0_.setState(cullLockState);
         }
         else
         {
-            state.setState(CULL.enable.enabled, CULL.mode);
+            p_getCullState_0_.setState(CULL.enable.enabled, CULL.mode);
         }
     }
 
-    public static void setCullState(GlCullState state)
+    public static void setCullState(GlCullState p_setCullState_0_)
     {
         if (cullLock.isLocked())
         {
-            cullLockState.setState(state);
+            cullLockState.setState(p_setCullState_0_);
         }
         else
         {
-            CULL.enable.setEnabled(state.isEnabled());
-            CULL.mode = state.getMode();
+            CULL.enable.setEnabled(p_setCullState_0_.isEnabled());
+            CULL.mode = p_setCullState_0_.getMode();
         }
     }
 
-    public static void glMultiDrawArrays(int mode, IntBuffer bFirst, IntBuffer bCount)
+    public static void glMultiDrawArrays(int p_glMultiDrawArrays_0_, IntBuffer p_glMultiDrawArrays_1_, IntBuffer p_glMultiDrawArrays_2_)
     {
-        GL14.glMultiDrawArrays(mode, bFirst, bCount);
+        GL14.glMultiDrawArrays(p_glMultiDrawArrays_0_, p_glMultiDrawArrays_1_, p_glMultiDrawArrays_2_);
 
         if (Config.isShaders())
         {
@@ -1376,7 +1374,7 @@
                 for (int j = 1; j < i; ++j)
                 {
                     Shaders.uniform_instanceId.setValue(j);
-                    GL14.glMultiDrawArrays(mode, bFirst, bCount);
+                    GL14.glMultiDrawArrays(p_glMultiDrawArrays_0_, p_glMultiDrawArrays_1_, p_glMultiDrawArrays_2_);
                 }
 
                 Shaders.uniform_instanceId.setValue(0);
@@ -1399,9 +1397,9 @@
         GL31.glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
     }
 
-    public static void readPixels(int x, int y, int width, int height, int format, int type, long pixels)
+    public static void readPixels(int p_readPixels_0_, int p_readPixels_1_, int p_readPixels_2_, int p_readPixels_3_, int p_readPixels_4_, int p_readPixels_5_, long p_readPixels_6_)
     {
-        GL11.glReadPixels(x, y, width, height, format, type, pixels);
+        GL11.glReadPixels(p_readPixels_0_, p_readPixels_1_, p_readPixels_2_, p_readPixels_3_, p_readPixels_4_, p_readPixels_5_, p_readPixels_6_);
     }
 
     public static int getFramebufferRead()
@@ -1428,13 +1426,13 @@
         GL14.glBlendFuncSeparate(BLEND.srcRgb, BLEND.dstRgb, BLEND.srcAlpha, BLEND.dstAlpha);
     }
 
-    public static void setBlendsIndexed(GlBlendState[] blends)
+    public static void setBlendsIndexed(GlBlendState[] p_setBlendsIndexed_0_)
     {
-        if (blends != null)
+        if (p_setBlendsIndexed_0_ != null)
         {
-            for (int i = 0; i < blends.length; ++i)
+            for (int i = 0; i < p_setBlendsIndexed_0_.length; ++i)
             {
-                GlBlendState glblendstate = blends[i];
+                GlBlendState glblendstate = p_setBlendsIndexed_0_[i];
 
                 if (glblendstate != null)
                 {
@@ -1453,19 +1451,19 @@
         }
     }
 
-    public static void bindImageTexture(int unit, int texture, int level, boolean layered, int layer, int access, int format)
+    public static void bindImageTexture(int p_bindImageTexture_0_, int p_bindImageTexture_1_, int p_bindImageTexture_2_, boolean p_bindImageTexture_3_, int p_bindImageTexture_4_, int p_bindImageTexture_5_, int p_bindImageTexture_6_)
     {
-        if (unit >= 0 && unit < IMAGE_TEXTURES.length)
+        if (p_bindImageTexture_0_ >= 0 && p_bindImageTexture_0_ < IMAGE_TEXTURES.length)
         {
-            if (IMAGE_TEXTURES[unit] == texture)
+            if (IMAGE_TEXTURES[p_bindImageTexture_0_] == p_bindImageTexture_1_)
             {
                 return;
             }
 
-            IMAGE_TEXTURES[unit] = texture;
+            IMAGE_TEXTURES[p_bindImageTexture_0_] = p_bindImageTexture_1_;
         }
 
-        GL42.glBindImageTexture(unit, texture, level, layered, layer, access, format);
+        GL42.glBindImageTexture(p_bindImageTexture_0_, p_bindImageTexture_1_, p_bindImageTexture_2_, p_bindImageTexture_3_, p_bindImageTexture_4_, p_bindImageTexture_5_, p_bindImageTexture_6_);
     }
 
     public static int getProgram()
@@ -1473,7 +1471,7 @@
         return glProgram;
     }
 
-    static class BlendState
+    public static class BlendState
     {
         public final GlStateManager.BooleanState mode = new GlStateManager.BooleanState(3042);
         public int srcRgb = 1;
@@ -1693,4 +1691,46 @@
             return INSTANCE.height;
         }
     }
+    
+    //Vivecraft TODO: fix
+    public static void mulTextureByModelView()
+    {
+//    	getMatrix(2982, MATRIX_BUFFER);
+//    	multMatrix(MATRIX_BUFFER);
+    }
+    
+    public static Matrix4f getMatrix4f(int p_getMatrix4f_0_)
+    {
+//    	GL11.glGetFloatv(p_getMatrix4f_0_, MATRIX_BUFFER);
+//    	MATRIX_BUFFER.rewind();
+//    	Matrix4f matrix4f = new Matrix4f();
+//    	matrix4f.read(MATRIX_BUFFER);
+//    	MATRIX_BUFFER.rewind();
+    	return null;
+    }
+        
+    //Vivecraft yea well un-deprecate it.
+    @Deprecated
+	public
+    static class Color
+    {
+        public float r = 1.0F;
+        public float g = 1.0F;
+        public float b = 1.0F;
+        public float a = 1.0F;
+
+        public Color()
+        {
+            this(1.0F, 1.0F, 1.0F, 1.0F);
+        }
+
+        public Color(float red, float green, float blue, float alpha)
+        {
+            this.r = red;
+            this.g = green;
+            this.b = blue;
+            this.a = alpha;
+        }
+    }
+    
 }
