--- a/net/minecraft/client/multiplayer/ClientPacketListener.java
+++ b/net/minecraft/client/multiplayer/ClientPacketListener.java
@@ -273,8 +273,11 @@
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import net.optifine.reflect.Reflector;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.render.PlayerModelController;
 
 public class ClientPacketListener implements ClientGamePacketListener
 {
@@ -311,6 +314,8 @@
         this.advancements = new ClientAdvancements(p_194193_);
         this.suggestionsProvider = new ClientSuggestionProvider(this, p_194193_);
         this.telemetryManager = p_194197_;
+        NetworkHelper.resetServerSettings();
+        NetworkHelper.displayedChatMessage = false;
     }
 
     public ClientSuggestionProvider getSuggestionsProvider()
@@ -366,6 +371,9 @@
 
         this.minecraft.debugRenderer.clear();
         this.minecraft.player.resetPos();
+        //Forge
+        Reflector.call(Reflector.ClientHooks_firePlayerLogin, this.minecraft.gameMode, this.minecraft.player, this.minecraft.getConnection().getConnection());
+        //
         int i = pPacket.playerId();
         this.minecraft.player.setId(i);
         this.level.addPlayer(i, this.minecraft.player);
@@ -377,10 +385,15 @@
         this.minecraft.player.setShowDeathScreen(pPacket.showDeathScreen());
         this.minecraft.gameMode.setLocalMode(pPacket.gameType(), pPacket.previousGameType());
         this.minecraft.options.setServerRenderDistance(pPacket.chunkRadius());
+        //Forge
+        Reflector.call(Reflector.NetworkHooks_sendMCRegistryPackets, connection, "PLAY_TO_SERVER");
+        //
         this.minecraft.options.broadcastOptions();
         this.connection.send(new ServerboundCustomPayloadPacket(ServerboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(ClientBrandRetriever.getClientModName())));
         this.minecraft.getGame().onStartGameSession();
         this.telemetryManager.onPlayerInfoReceived(pPacket.gameType(), pPacket.hardcore());
+        NetworkHelper.vivePlayers.clear();
+        NetworkHelper.sendVersionInfo();
     }
 
     public void handleAddEntity(ClientboundAddEntityPacket pPacket)
@@ -649,9 +662,9 @@
     {
         PacketUtils.ensureRunningOnSameThread(pPacket, this, this.minecraft);
         int i = 19 | (pPacket.shouldSuppressLightUpdates() ? 128 : 0);
-        pPacket.runUpdates((p_104922_, p_104923_) ->
+        pPacket.runUpdates((p_243492_2_, p_243492_3_) ->
         {
-            this.level.setBlock(p_104922_, p_104923_, i);
+            this.level.setBlock(p_243492_2_, p_243492_3_, i);
         });
     }
 
@@ -809,7 +822,17 @@
     public void handleChat(ClientboundChatPacket pPacket)
     {
         PacketUtils.ensureRunningOnSameThread(pPacket, this, this.minecraft);
-        this.minecraft.gui.handleChat(pPacket.getType(), pPacket.getMessage(), pPacket.getSender());
+        Component component = (Component)Reflector.call(Reflector.ForgeEventFactory_onClientChat, pPacket.getType(), pPacket.getMessage(), pPacket.getSender());
+
+        if (component == null)
+        {
+            this.minecraft.gui.handleChat(pPacket.getType(), pPacket.getMessage(), pPacket.getSender());
+        }
+        else
+        {
+            this.minecraft.gui.handleChat(pPacket.getType(), component, pPacket.getSender());
+        }
+
     }
 
     public void handleAnimate(ClientboundAnimatePacket pPacket)
@@ -919,7 +942,8 @@
 
                     if (entity1 == this.minecraft.player && !flag)
                     {
-                        this.minecraft.gui.setOverlayMessage(new TranslatableComponent("mount.onboard", this.minecraft.options.keyShift.getTranslatedKeyMessage()), false);
+                        this.minecraft.gui.setOverlayMessage(new TranslatableComponent("mount.onboard", this.minecraft.options.keyShift.getName()), false);
+                        this.minecraft.options.keyShift.getTranslatedKeyMessage();
                     }
                 }
             }
@@ -1017,6 +1041,8 @@
             this.level.addMapData(map);
             this.minecraft.setLevel(this.level);
             this.minecraft.setScreen(new ReceivingLevelScreen());
+            NetworkHelper.resetServerSettings();
+            NetworkHelper.sendVersionInfo();
         }
 
         String s = localplayer.getServerBrand();
@@ -1037,9 +1063,12 @@
         {
             localplayer1.getAttributes().assignValues(localplayer.getAttributes());
         }
-
+        //Forge
+        Reflector.call(Reflector.LocalPlayer_updateSyncFields, localplayer1, localplayer);// Forge: fix MC-10657
+        //
         localplayer1.resetPos();
         localplayer1.setServerBrand(s);
+        Reflector.call(Reflector.ClientHooks_firePlayerRespawn, this.minecraft.gameMode, localplayer, localplayer1, localplayer1.connection.getConnection());
         this.level.addPlayer(i, localplayer1);
         localplayer1.setYRot(-180.0F);
         localplayer1.input = new KeyboardInput(this.minecraft.options);
@@ -1172,13 +1201,18 @@
         BlockPos blockpos = pPacket.getPos();
         this.minecraft.level.getBlockEntity(blockpos, pPacket.getType()).ifPresent((p_194239_) ->
         {
+    		//Forge
+    		if(Reflector.IForgeTileEntity_handleUpdateTag.exists()) {
+    			Reflector.call(p_194239_, Reflector.IForgeTileEntity_onDataPacket, connection, pPacket);
+    		} else {
+    		//
             CompoundTag compoundtag = pPacket.getTag();
 
             if (compoundtag != null)
             {
                 p_194239_.load(compoundtag);
             }
-
+    		}
             if (p_194239_ instanceof CommandBlockEntity && this.minecraft.screen instanceof CommandBlockEditScreen)
             {
                 ((CommandBlockEditScreen)this.minecraft.screen).updateGui();
@@ -1408,6 +1442,9 @@
         clientrecipebook.setupCollections(this.recipeManager.getRecipes());
         clientrecipebook.getCollections().forEach(mutablesearchtree::add);
         mutablesearchtree.refresh();
+        //Forge
+        Reflector.call(Reflector.ForgeHooksClient_onRecipesUpdated, this.recipeManager);
+        //
     }
 
     public void handleLookAt(ClientboundPlayerLookAtPacket pPacket)
@@ -1508,7 +1545,7 @@
 
         if (entity instanceof LivingEntity)
         {
-            MobEffect mobeffect = MobEffect.byId(pPacket.getEffectId());
+            MobEffect mobeffect = MobEffect.byId(pPacket.getEffectId() & 255);
 
             if (mobeffect != null)
             {
@@ -1524,7 +1561,7 @@
         PacketUtils.ensureRunningOnSameThread(pPacket, this, this.minecraft);
         TagContainer tagcontainer = TagContainer.deserializeFromNetwork(this.registryAccess, pPacket.getTags());
         Multimap < ResourceKey <? extends Registry<? >> , ResourceLocation > multimap = StaticTags.getAllMissingTags(tagcontainer);
-
+    	
         if (!multimap.isEmpty())
         {
             LOGGER.warn("Incomplete server tags, disconnecting. Missing: {}", (Object)multimap);
@@ -1532,6 +1569,11 @@
         }
         else
         {
+        	//Forge
+        	if(Reflector.ITagCollectionSupplier_reinjectOptionalTags.exists()) {
+                tagcontainer = (TagContainer)Reflector.call(Reflector.ITagCollectionSupplier_reinjectOptionalTags, tagcontainer);
+            }
+        	//
             this.tags = tagcontainer;
 
             if (!this.connection.isMemoryConnection())
@@ -1886,16 +1928,16 @@
             {
                 throw new URISyntaxException(pUrl, "Wrong protocol");
             }
-            else if (!flag || !pUrl.contains("..") && pUrl.endsWith("/resources.zip"))
+            else if (flag && (pUrl.contains("..") || !pUrl.endsWith("/resources.zip")))
             {
-                return true;
+                throw new URISyntaxException(pUrl, "Invalid levelstorage resourcepack path");
             }
             else
             {
-                throw new URISyntaxException(pUrl, "Invalid levelstorage resourcepack path");
+                return true;
             }
         }
-        catch (URISyntaxException urisyntaxexception)
+        catch (URISyntaxException urisyntaxexception1)
         {
             this.send(ServerboundResourcePackPacket.Action.FAILED_DOWNLOAD);
             return false;
@@ -1967,6 +2009,7 @@
         PacketUtils.ensureRunningOnSameThread(pPacket, this, this.minecraft);
         ResourceLocation resourcelocation = pPacket.getIdentifier();
         FriendlyByteBuf friendlybytebuf = null;
+        boolean release = true;
 
         try
         {
@@ -2243,14 +2286,86 @@
                 int i5 = friendlybytebuf.readVarInt();
                 this.minecraft.debugRenderer.gameEventListenerRenderer.trackListener(positionsource, i5);
             }
+            else if (resourcelocation.getNamespace().equalsIgnoreCase("vivecraft"))
+            {
+                if (resourcelocation.getPath().equalsIgnoreCase("data"))
+                {
+                    byte b0 = friendlybytebuf.readByte();
+                    NetworkHelper.PacketDiscriminators networkhelper$packetdiscriminators = NetworkHelper.PacketDiscriminators.values()[b0];
+
+                    switch (networkhelper$packetdiscriminators)
+                    {
+                        case VERSION:
+                            String s11 = friendlybytebuf.readUtf(1024);
+
+                            if (!NetworkHelper.displayedChatMessage)
+                            {
+                                NetworkHelper.displayedChatMessage = true;
+                                this.minecraft.gui.getChat().addMessage(new TranslatableComponent("vivecraft.messages.serverplugin", s11));
+                            }
+
+                            break;
+
+                        case REQUESTDATA:
+                            NetworkHelper.serverWantsData = true;
+                            break;
+
+                        case CLIMBING:
+
+                            break;
+
+                        case TELEPORT:
+                            NetworkHelper.serverSupportsDirectTeleport = true;
+                            break;
+
+                        case UBERPACKET:
+                            Long olong = friendlybytebuf.readLong();
+                            Long olong1 = friendlybytebuf.readLong();
+                            byte[] abyte = new byte[29];
+                            byte[] abyte1 = new byte[29];
+                            byte[] abyte2 = new byte[29];
+                            friendlybytebuf.readBytes(29).getBytes(0, abyte);
+                            friendlybytebuf.readBytes(29).getBytes(0, abyte1);
+                            friendlybytebuf.readBytes(29).getBytes(0, abyte2);
+                            UUID uuid2 = new UUID(olong, olong1);
+                            float f3 = 1.0F;
+                            float f4 = 1.0F;
+
+                            if (friendlybytebuf.isReadable())
+                            {
+                                f3 = friendlybytebuf.readFloat();
+                            }
+
+                            if (friendlybytebuf.isReadable())
+                            {
+                                f4 = friendlybytebuf.readFloat();
+                            }
+
+                            PlayerModelController.getInstance().Update(uuid2, abyte, abyte1, abyte2, f3, f4);
+                            break;
+
+                        case SETTING_OVERRIDE:
+
+                            break;
+
+                        case CRAWL:
+                            NetworkHelper.serverAllowsCrawling = true;
+                    }
+                }
+            }
             else
             {
-                LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            	release = false;
+
+                if (!Reflector.callBoolean(Reflector.NetworkHooks_onCustomPayload, pPacket, this.connection))
+                {
+                    LOGGER.warn("Unknown custom packet identifier: {}", (Object)resourcelocation);
+                }
             }
         }
         finally
         {
-            if (friendlybytebuf != null)
+            if (friendlybytebuf != null && release)
             {
                 friendlybytebuf.release();
             }
@@ -2439,28 +2554,27 @@
             {
                 throw new IllegalStateException("Server tried to update attributes of a non-living entity (actually: " + entity + ")");
             }
-            else
+
+            AttributeMap attributemap = ((LivingEntity)entity).getAttributes();
+
+            for (ClientboundUpdateAttributesPacket.AttributeSnapshot clientboundupdateattributespacket$attributesnapshot : pPacket.getValues())
             {
-                AttributeMap attributemap = ((LivingEntity)entity).getAttributes();
+                AttributeInstance attributeinstance = attributemap.getInstance(clientboundupdateattributespacket$attributesnapshot.getAttribute());
 
-                for (ClientboundUpdateAttributesPacket.AttributeSnapshot clientboundupdateattributespacket$attributesnapshot : pPacket.getValues())
+                if (attributeinstance == null)
+                {
+                    LOGGER.warn("Entity {} does not have attribute {}", entity, Registry.ATTRIBUTE.getKey(clientboundupdateattributespacket$attributesnapshot.getAttribute()));
+                }
+                else
                 {
-                    AttributeInstance attributeinstance = attributemap.getInstance(clientboundupdateattributespacket$attributesnapshot.getAttribute());
+                    attributeinstance.setBaseValue(clientboundupdateattributespacket$attributesnapshot.getBase());
+                    attributeinstance.removeModifiers();
 
-                    if (attributeinstance == null)
+                    for (AttributeModifier attributemodifier : clientboundupdateattributespacket$attributesnapshot.getModifiers())
                     {
-                        LOGGER.warn("Entity {} does not have attribute {}", entity, Registry.ATTRIBUTE.getKey(clientboundupdateattributespacket$attributesnapshot.getAttribute()));
+                        attributeinstance.addTransientModifier(attributemodifier);
                     }
-                    else
-                    {
-                        attributeinstance.setBaseValue(clientboundupdateattributespacket$attributesnapshot.getBase());
-                        attributeinstance.removeModifiers();
 
-                        for (AttributeModifier attributemodifier : clientboundupdateattributespacket$attributesnapshot.getModifiers())
-                        {
-                            attributeinstance.addTransientModifier(attributemodifier);
-                        }
-                    }
                 }
             }
         }
@@ -2648,4 +2762,16 @@
     {
         return this.registryAccess;
     }
+    boolean tryParseInt(String value)
+    {
+        try
+        {
+            Integer.parseInt(value);
+            return true;
+        }
+        catch (NumberFormatException numberformatexception)
+        {
+            return false;
+        }
+    }
 }
