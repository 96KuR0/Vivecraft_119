--- a/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
+++ b/net/minecraft/client/renderer/entity/EntityRenderDispatcher.java
@@ -1,6 +1,7 @@
 package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
 import com.mojang.blaze3d.vertex.PoseStack;
 import com.mojang.blaze3d.vertex.VertexConsumer;
 import com.mojang.math.Matrix3f;
@@ -11,6 +12,11 @@
 import java.util.HashMap;
 import java.util.Map;
 import javax.annotation.Nullable;
+
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.render.VRPlayerRenderer;
+
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -77,6 +83,12 @@
     private Entity renderedEntity = null;
     private EntityRendererProvider.Context context = null;
 
+    //Vivecraft
+    private final Map<String, VRPlayerRenderer> skinMapVR = Maps.newHashMap();
+    private final Map<String, VRPlayerRenderer> skinMapVRSeated = Maps.newHashMap();
+    private VRPlayerRenderer playerRendererVR;
+    private VRPlayerRenderer playerRendererVRSeated;
+    //
     public <E extends Entity> int getPackedLightCoords(E pEntity, float pPartialTicks)
     {
         int i = this.getRenderer(pEntity).getPackedLightCoords(pEntity, pPartialTicks);
@@ -98,18 +110,66 @@
         this.entityModels = p_174002_;
     }
 
+    //Vivecraft
+    private EntityRenderer <? extends Player > overrideRenderer(AbstractClientPlayer pEntity, String s, EntityRenderer <? extends Player > renderer) {
+    	PlayerModelController.RotInfo rotinfo = PlayerModelController.getInstance().getRotationsForPlayer(pEntity.getUUID());
+    	if (rotinfo==null) return renderer;
+
+    	VRPlayerRenderer vrplayerrenderer1;
+
+    	if (rotinfo.seated)
+    	{
+    		if (this.playerRendererVRSeated == null)
+    		{
+    			this.playerRendererVRSeated = new VRPlayerRenderer(this.context, false, true);
+    			this.skinMapVRSeated.put("default", this.playerRendererVRSeated);
+    			this.skinMapVRSeated.put("slim", new VRPlayerRenderer(this.context, true, true));
+    			//TODO: where gone?
+    			//:shrug:
+    			//PlayerItemsLayer.register(this.skinMapVRSeated);
+    		}
+
+    		if(skinMapVRSeated.containsKey(s))
+    			return this.skinMapVRSeated.get(s);
+    		else 
+    			return this.playerRendererVRSeated;
+
+    	}
+    	else
+    	{
+    		if (this.playerRendererVR == null)
+    		{
+    			this.playerRendererVR = new VRPlayerRenderer(this.context, false, false);
+    			this.skinMapVR.put("default", this.playerRendererVR);
+    			this.skinMapVR.put("slim", new VRPlayerRenderer(this.context, true, false));
+    			// PlayerItemsLayer.register(this.skinMapVR);
+    		}
+    		
+    		if(skinMapVR.containsKey(s))
+    			return this.skinMapVR.get(s);
+    		else 
+    			return this.playerRendererVR;
+
+    	}
+    }
+
+
+    
     public <T extends Entity> EntityRenderer <? super T > getRenderer(T pEntity)
     {
-        if (pEntity instanceof AbstractClientPlayer)
-        {
-            String s = ((AbstractClientPlayer)pEntity).getModelName();
-            EntityRenderer <? extends Player > entityrenderer = this.playerRenderers.get(s);
-            return (EntityRenderer)(entityrenderer != null ? entityrenderer : this.playerRenderers.get("default"));
-        }
-        else
-        {
-            return (EntityRenderer) this.renderers.get(pEntity.getType());
-        }
+    	if (pEntity instanceof AbstractClientPlayer)
+    	{
+    		String s = ((AbstractClientPlayer)pEntity).getModelName();
+    		EntityRenderer <? extends Player > entityrenderer = this.playerRenderers.get(s);
+    		//Vivecraft
+    		entityrenderer = this.overrideRenderer((AbstractClientPlayer) pEntity, s, entityrenderer);
+    		//
+    		return (EntityRenderer)(entityrenderer != null ? entityrenderer : this.playerRenderers.get("default"));
+    	}
+    	else
+    	{
+    		return (EntityRenderer) this.renderers.get(pEntity.getType());
+    	}
     }
 
     public void prepare(Level pLevel, Camera pActiveRenderInfo, Entity pEntity)
