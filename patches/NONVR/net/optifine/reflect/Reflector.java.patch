--- a/net/optifine/reflect/Reflector.java
+++ b/net/optifine/reflect/Reflector.java
@@ -1,8 +1,5 @@
 package net.optifine.reflect;
 
-import com.google.common.collect.ImmutableMap;
-import com.mojang.blaze3d.vertex.PoseStack;
-import com.mojang.math.Matrix4f;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -10,9 +7,18 @@
 import java.util.List;
 import java.util.Map;
 import java.util.function.Supplier;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import com.google.common.collect.ImmutableMap;
+import com.mojang.authlib.properties.PropertyMap;
+import com.mojang.blaze3d.vertex.PoseStack;
+import com.mojang.math.Matrix4f;
 import net.minecraft.client.Camera;
 import net.minecraft.client.KeyMapping;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.User;
 import net.minecraft.client.color.block.BlockColors;
 import net.minecraft.client.gui.Font;
 import net.minecraft.client.gui.components.Button;
@@ -23,7 +29,6 @@
 import net.minecraft.client.model.ArmorStandModel;
 import net.minecraft.client.model.AxolotlModel;
 import net.minecraft.client.model.BeeModel;
-import net.minecraft.client.model.BlazeModel;
 import net.minecraft.client.model.BookModel;
 import net.minecraft.client.model.ChestedHorseModel;
 import net.minecraft.client.model.ChickenModel;
@@ -31,16 +36,12 @@
 import net.minecraft.client.model.EntityModel;
 import net.minecraft.client.model.EvokerFangsModel;
 import net.minecraft.client.model.FoxModel;
-import net.minecraft.client.model.GuardianModel;
 import net.minecraft.client.model.HoglinModel;
 import net.minecraft.client.model.HorseModel;
-import net.minecraft.client.model.IllagerModel;
-import net.minecraft.client.model.IronGolemModel;
 import net.minecraft.client.model.LeashKnotModel;
 import net.minecraft.client.model.LlamaModel;
 import net.minecraft.client.model.LlamaSpitModel;
 import net.minecraft.client.model.OcelotModel;
-import net.minecraft.client.model.PhantomModel;
 import net.minecraft.client.model.PiglinModel;
 import net.minecraft.client.model.QuadrupedModel;
 import net.minecraft.client.model.RabbitModel;
@@ -57,7 +58,9 @@
 import net.minecraft.client.model.dragon.DragonHeadModel;
 import net.minecraft.client.model.geom.EntityModelSet;
 import net.minecraft.client.model.geom.ModelPart;
+import net.minecraft.client.multiplayer.MultiPlayerGameMode;
 import net.minecraft.client.particle.TerrainParticle;
+import net.minecraft.client.player.LocalPlayer;
 import net.minecraft.client.renderer.LevelRenderer;
 import net.minecraft.client.renderer.MultiBufferSource;
 import net.minecraft.client.renderer.RenderType;
@@ -92,6 +95,7 @@
 import net.minecraft.client.renderer.entity.WitherSkullRenderer;
 import net.minecraft.client.renderer.entity.layers.LlamaDecorLayer;
 import net.minecraft.client.renderer.entity.layers.TropicalFishPatternLayer;
+import net.minecraft.client.resources.ClientPackSource;
 import net.minecraft.client.resources.LegacyPackResourcesAdapter;
 import net.minecraft.client.resources.PackResourcesAdapterV4;
 import net.minecraft.client.resources.model.ModelManager;
@@ -99,17 +103,27 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.syncher.EntityDataAccessor;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.Ticket;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.packs.PackResources;
+import net.minecraft.server.packs.repository.Pack;
+import net.minecraft.server.packs.repository.PackRepository;
+import net.minecraft.server.packs.resources.ReloadableResourceManager;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.tags.ItemTags;
+import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
+import net.minecraft.world.entity.projectile.FishingHook;
+import net.minecraft.world.entity.projectile.Projectile;
+import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Rarity;
@@ -121,12 +135,12 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
+import net.minecraft.world.phys.HitResult;
+import net.minecraft.world.phys.Vec3;
 import net.minecraftforge.client.event.RenderLevelStageEvent;
 import net.minecraftforge.eventbus.api.Event;
 import net.optifine.Log;
 import net.optifine.util.ArrayUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class Reflector
 {
@@ -156,6 +170,9 @@
     public static ReflectorConstructor ChunkEvent_Load_Constructor = new ReflectorConstructor(ChunkEvent_Load, new Class[] {ChunkAccess.class});
     public static ReflectorClass ChunkEvent_Unload = new ReflectorClass("net.minecraftforge.event.level.ChunkEvent$Unload");
     public static ReflectorConstructor ChunkEvent_Unload_Constructor = new ReflectorConstructor(ChunkEvent_Unload, new Class[] {ChunkAccess.class});
+    //public static ReflectorClass ClientHooks = new ReflectorClass("net.minecraftforge.fmlclient.ClientHooks");
+    //public static ReflectorMethod ClientHooks_trackBrokenTexture = new ReflectorMethod(ClientHooks, "trackBrokenTexture");
+    //public static ReflectorMethod ClientHooks_trackMissingTexture = new ReflectorMethod(ClientHooks, "trackMissingTexture");
     public static ReflectorClass CrashReportExtender = new ReflectorClass("net.minecraftforge.logging.CrashReportExtender");
     public static ReflectorMethod CrashReportExtender_addCrashReportHeader = new ReflectorMethod(CrashReportExtender, "addCrashReportHeader");
     public static ReflectorMethod CrashReportExtender_extendSystemReport = new ReflectorMethod(CrashReportExtender, "extendSystemReport");
@@ -282,20 +299,12 @@
     public static ReflectorClass ForgeIChunk = new ReflectorClass(ChunkAccess.class);
     public static ReflectorMethod ForgeIChunk_getWorldForge = new ReflectorMethod(ForgeIChunk, "getWorldForge");
     public static ReflectorClass IForgeItem = new ReflectorClass("net.minecraftforge.common.extensions.IForgeItem");
-    public static ReflectorMethod IForgeItem_getEquipmentSlot = new ReflectorMethod(IForgeItem, "getEquipmentSlot");
     public static ReflectorMethod IForgeItem_isDamageable1 = new ReflectorMethod(IForgeItem, "isDamageable", new Class[] {ItemStack.class});
-    public static ReflectorMethod IForgeItem_onEntitySwing = new ReflectorMethod(IForgeItem, "onEntitySwing");
-    public static ReflectorMethod IForgeItem_shouldCauseReequipAnimation = new ReflectorMethod(IForgeItem, "shouldCauseReequipAnimation");
     public static ReflectorClass IForgeItemStack = new ReflectorClass("net.minecraftforge.common.extensions.IForgeItemStack");
     public static ReflectorMethod IForgeItemStack_canDisableShield = new ReflectorMethod(IForgeItemStack, "canDisableShield");
-    public static ReflectorMethod IForgeItemStack_getEquipmentSlot = new ReflectorMethod(IForgeItemStack, "getEquipmentSlot");
-    public static ReflectorMethod IForgeItemStack_getShareTag = new ReflectorMethod(IForgeItemStack, "getShareTag");
-    public static ReflectorMethod IForgeItemStack_getHighlightTip = new ReflectorMethod(IForgeItemStack, "getHighlightTip");
-    public static ReflectorMethod IForgeItemStack_readShareTag = new ReflectorMethod(IForgeItemStack, "readShareTag");
     public static ReflectorClass ForgeItemTags = new ReflectorClass(ItemTags.class);
     public static ReflectorMethod ForgeItemTags_create = ForgeItemTags.makeMethod("create", new Class[] {ResourceLocation.class});
     public static ReflectorClass ForgeI18n = new ReflectorClass("net.minecraftforge.common.ForgeI18n");
-    public static ReflectorMethod ForgeI18n_loadLanguageData = new ReflectorMethod(ForgeI18n, "loadLanguageData");
     public static ReflectorClass ForgeKeyBinding = new ReflectorClass(KeyMapping.class);
     public static ReflectorMethod ForgeKeyBinding_setKeyConflictContext = new ReflectorMethod(ForgeKeyBinding, "setKeyConflictContext");
     public static ReflectorMethod ForgeKeyBinding_setKeyModifierAndCode = new ReflectorMethod(ForgeKeyBinding, "setKeyModifierAndCode");
@@ -377,7 +386,6 @@
     public static ReflectorClass LevelEvent_Load = new ReflectorClass("net.minecraftforge.event.level.LevelEvent$Load");
     public static ReflectorConstructor LevelEvent_Load_Constructor = new ReflectorConstructor(LevelEvent_Load, new Class[] {LevelAccessor.class});
     private static boolean logVanilla = registerResolvable("*** Reflector Vanilla ***");
-    public static ReflectorClass AbstractArrow = new ReflectorClass(AbstractArrow.class);
     public static ReflectorField AbstractArrow_inGround = new ReflectorField(new FieldLocatorTypes(AbstractArrow.class, new Class[] {BlockState.class}, Boolean.TYPE, new Class[] {Integer.TYPE}, "AbstractArrow.inGround"));
     public static ReflectorClass EntityItem = new ReflectorClass(ItemEntity.class);
     public static ReflectorField EntityItem_ITEM = new ReflectorField(EntityItem, EntityDataAccessor.class);
@@ -400,9 +408,6 @@
     public static ReflectorFields ModelArmorStand_ModelRenderers = new ReflectorFields(ModelArmorStand, ModelPart.class, 4);
     public static ReflectorClass ModelBee = new ReflectorClass(BeeModel.class);
     public static ReflectorFields ModelBee_ModelRenderers = new ReflectorFields(ModelBee, ModelPart.class, 2);
-    public static ReflectorClass ModelBlaze = new ReflectorClass(BlazeModel.class);
-    public static ReflectorField ModelBlaze_blazeHead = new ReflectorField(ModelBlaze, ModelPart.class);
-    public static ReflectorField ModelBlaze_blazeSticks = new ReflectorField(ModelBlaze, ModelPart[].class);
     public static ReflectorClass ModelBoar = new ReflectorClass(HoglinModel.class);
     public static ReflectorFields ModelBoar_ModelRenderers = new ReflectorFields(ModelBoar, ModelPart.class, 9);
     public static ReflectorClass ModelBook = new ReflectorClass(BookModel.class);
@@ -413,11 +418,6 @@
     public static ReflectorFields ModelDragon_ModelRenderers = new ReflectorFields(ModelDragon, ModelPart.class, 20);
     public static ReflectorClass RenderEnderCrystal = new ReflectorClass(EndCrystalRenderer.class);
     public static ReflectorFields RenderEnderCrystal_modelRenderers = new ReflectorFields(RenderEnderCrystal, ModelPart.class, 3);
-    public static ReflectorClass ModelEvokerFangs = new ReflectorClass(EvokerFangsModel.class);
-    public static ReflectorFields ModelEvokerFangs_ModelRenderers = new ReflectorFields(ModelEvokerFangs, ModelPart.class, 3);
-    public static ReflectorClass ModelGuardian = new ReflectorClass(GuardianModel.class);
-    public static ReflectorField ModelGuardian_spines = new ReflectorField(ModelGuardian, ModelPart[].class, 0);
-    public static ReflectorField ModelGuardian_tail = new ReflectorField(ModelGuardian, ModelPart[].class, 1);
     public static ReflectorClass ModelDragonHead = new ReflectorClass(DragonHeadModel.class);
     public static ReflectorField ModelDragonHead_head = new ReflectorField(ModelDragonHead, ModelPart.class, 0);
     public static ReflectorField ModelDragonHead_jaw = new ReflectorField(ModelDragonHead, ModelPart.class, 1);
@@ -425,24 +425,16 @@
     public static ReflectorFields ModelHorse_ModelRenderers = new ReflectorFields(ModelHorse, ModelPart.class, 11);
     public static ReflectorClass ModelHorseChests = new ReflectorClass(ChestedHorseModel.class);
     public static ReflectorFields ModelHorseChests_ModelRenderers = new ReflectorFields(ModelHorseChests, ModelPart.class, 2);
-    public static ReflectorClass ModelIllager = new ReflectorClass(IllagerModel.class);
-    public static ReflectorFields ModelIllager_ModelRenderers = new ReflectorFields(ModelIllager, ModelPart.class, 8);
-    public static ReflectorClass ModelIronGolem = new ReflectorClass(IronGolemModel.class);
-    public static ReflectorFields ModelIronGolem_ModelRenderers = new ReflectorFields(ModelIronGolem, ModelPart.class, 6);
     public static ReflectorClass ModelAxolotl = new ReflectorClass(AxolotlModel.class);
     public static ReflectorFields ModelAxolotl_ModelRenderers = new ReflectorFields(ModelAxolotl, ModelPart.class, 10);
     public static ReflectorClass ModelFox = new ReflectorClass(FoxModel.class);
     public static ReflectorFields ModelFox_ModelRenderers = new ReflectorFields(ModelFox, ModelPart.class, 7);
-    public static ReflectorClass ModelLeashKnot = new ReflectorClass(LeashKnotModel.class);
-    public static ReflectorField ModelLeashKnot_knotRenderer = new ReflectorField(ModelLeashKnot, ModelPart.class);
     public static ReflectorClass RenderLeashKnot = new ReflectorClass(LeashKnotRenderer.class);
     public static ReflectorField RenderLeashKnot_leashKnotModel = new ReflectorField(RenderLeashKnot, LeashKnotModel.class);
     public static ReflectorClass ModelLlama = new ReflectorClass(LlamaModel.class);
     public static ReflectorFields ModelLlama_ModelRenderers = new ReflectorFields(ModelLlama, ModelPart.class, 8);
     public static ReflectorClass ModelOcelot = new ReflectorClass(OcelotModel.class);
     public static ReflectorFields ModelOcelot_ModelRenderers = new ReflectorFields(ModelOcelot, ModelPart.class, 8);
-    public static ReflectorClass ModelPhantom = new ReflectorClass(PhantomModel.class);
-    public static ReflectorFields ModelPhantom_ModelRenderers = new ReflectorFields(ModelPhantom, ModelPart.class, 7);
     public static ReflectorClass ModelPiglin = new ReflectorClass(PiglinModel.class);
     public static ReflectorFields ModelPiglin_ModelRenderers = new ReflectorFields(ModelPiglin, ModelPart.class, 2);
     public static ReflectorClass ModelQuadruped = new ReflectorClass(QuadrupedModel.class);
@@ -528,9 +520,9 @@
 
             method.invoke((Object)null, params);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
         }
     }
 
@@ -550,9 +542,9 @@
                 return obool;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
             return false;
         }
     }
@@ -573,9 +565,9 @@
                 return integer;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
             return 0;
         }
     }
@@ -596,9 +588,9 @@
                 return olong;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
             return 0L;
         }
     }
@@ -619,9 +611,9 @@
                 return f;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
             return 0.0F;
         }
     }
@@ -642,9 +634,9 @@
                 return d0;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
             return 0.0D;
         }
     }
@@ -656,9 +648,9 @@
             Method method = refMethod.getTargetMethod();
             return method == null ? null : (String)method.invoke((Object)null, params);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
             return null;
         }
     }
@@ -670,9 +662,9 @@
             Method method = refMethod.getTargetMethod();
             return method == null ? null : method.invoke((Object)null, params);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, (Object)null, refMethod, params);
+            handleException(throwable1, (Object)null, refMethod, params);
             return null;
         }
     }
@@ -695,9 +687,9 @@
 
             method.invoke(obj, params);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
         }
     }
 
@@ -717,9 +709,9 @@
                 return obool;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
             return false;
         }
     }
@@ -740,9 +732,9 @@
                 return integer;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
             return 0;
         }
     }
@@ -763,9 +755,9 @@
                 return olong;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
             return 0L;
         }
     }
@@ -786,9 +778,9 @@
                 return f;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
             return 0.0F;
         }
     }
@@ -809,9 +801,9 @@
                 return d0;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
             return 0.0D;
         }
     }
@@ -823,9 +815,9 @@
             Method method = refMethod.getTargetMethod();
             return method == null ? null : (String)method.invoke(obj, params);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
             return null;
         }
     }
@@ -837,9 +829,9 @@
             Method method = refMethod.getTargetMethod();
             return method == null ? null : method.invoke(obj, params);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            handleException(throwable, obj, refMethod, params);
+            handleException(throwable1, obj, refMethod, params);
             return null;
         }
     }
@@ -856,9 +848,9 @@
             Field field = refField.getTargetField();
             return field == null ? null : field.get(obj);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            Log.error("", throwable);
+            Log.error("", throwable1);
             return null;
         }
     }
@@ -870,9 +862,9 @@
             Field field = refField.getTargetField();
             return field == null ? def : field.getBoolean(obj);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            Log.error("", throwable);
+            Log.error("", throwable1);
             return def;
         }
     }
@@ -896,9 +888,9 @@
             Field field = refField.getTargetField();
             return field == null ? def : field.getFloat(obj);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            Log.error("", throwable);
+            Log.error("", throwable1);
             return def;
         }
     }
@@ -915,9 +907,9 @@
             Field field = refField.getTargetField();
             return field == null ? def : field.getInt(obj);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            Log.error("", throwable);
+            Log.error("", throwable1);
             return def;
         }
     }
@@ -929,9 +921,9 @@
             Field field = refField.getTargetField();
             return field == null ? def : field.getLong(obj);
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            Log.error("", throwable);
+            Log.error("", throwable1);
             return def;
         }
     }
@@ -1000,9 +992,9 @@
                 return true;
             }
         }
-        catch (Throwable throwable)
+        catch (Throwable throwable1)
         {
-            Log.error("", throwable);
+            Log.error("", throwable1);
             return false;
         }
     }
@@ -1142,10 +1134,8 @@
                 RuntimeException runtimeexception = (RuntimeException)throwable;
                 throw runtimeexception;
             }
-            else
-            {
-                Log.error("", e);
-            }
+
+            Log.error("", e);
         }
         else
         {
@@ -1239,4 +1229,170 @@
         ReflectorResolver.register(iresolvable);
         return true;
     }
+    
+    //Vivecraft
+    public static ReflectorMethod ClientModLoader_begin = new ReflectorMethod(ClientModLoader, "begin", new Class[] {Minecraft.class, PackRepository.class, ReloadableResourceManager.class, ClientPackSource.class});
+    public static ReflectorMethod ClientModLoader_completeModLoading = new ReflectorMethod(ClientModLoader, "completeModLoading");
+    public static ReflectorClass fml_ModLoader = new ReflectorClass("net.minecraftforge.fml.ModLoader");
+    public static ReflectorMethod fml_ModLoader_get = new ReflectorMethod(fml_ModLoader, "get");
+    public static ReflectorMethod fml_ModLoader_postEvent = new ReflectorMethod(fml_ModLoader, "postEvent");
+    public static ReflectorClass RegisterStageEvent = new ReflectorClass("net.minecraftforge.client.event.RenderLevelStageEvent$RegisterStageEvent");
+    public static ReflectorConstructor RegisterStageEvent_Constructor = new ReflectorConstructor(RegisterStageEvent, new Class[0]);
+    public static ReflectorMethod ForgeHooksClient_onRegisterParticleProviders = new ReflectorMethod(ForgeHooksClient, "onRegisterParticleProviders");
+    public static ReflectorClass ForgeIngameGui = new ReflectorClass("net.minecraftforge.client.gui.Overlay.ForgeGui");
+    public static ReflectorConstructor ForgeIngameGui_Constructor = new ReflectorConstructor(ForgeIngameGui, new Class[] {Minecraft.class});
+    
+    public static ReflectorClass TextureAtlasSpriteLoaderManager = new ReflectorClass("net.minecraftforge.client.textures.TextureAtlasSpriteLoaderManager");
+    public static ReflectorMethod TextureAtlasSpriteLoaderManager_init = new ReflectorMethod(TextureAtlasSpriteLoaderManager, "init");
+    public static ReflectorClass ClientTooltipComponentManager = new ReflectorClass("net.minecraftforge.client.gui.ClientTooltipComponentManager");
+    public static ReflectorMethod ClientTooltipComponentManager_init = new ReflectorMethod(ClientTooltipComponentManager, "init");
+    public static ReflectorClass EntitySpectatorShaderManager = new ReflectorClass("net.minecraftforge.client.EntitySpectatorShaderManager");
+    public static ReflectorMethod EntitySpectatorShaderManager_init = new ReflectorMethod(EntitySpectatorShaderManager, "init");
+    public static ReflectorClass RecipeBookManager = new ReflectorClass("net.minecraftforge.client.RecipeBookManager");
+    public static ReflectorMethod RecipeBookManager_init = new ReflectorMethod(RecipeBookManager, "init");
+    public static ReflectorClass GuiOverlayManager = new ReflectorClass("net.minecraftforge.client.gui.overlay.GuiOverlayManager");
+    public static ReflectorMethod GuiOverlayManager_init = new ReflectorMethod(GuiOverlayManager, "init");
+    public static ReflectorClass DimensionSpecialEffectsManager = new ReflectorClass("net.minecraftforge.client.DimensionSpecialEffectsManager");
+    public static ReflectorMethod DimensionSpecialEffectsManager_init = new ReflectorMethod(DimensionSpecialEffectsManager, "init");
+    public static ReflectorClass NamedRenderTypeManager = new ReflectorClass("net.minecraftforge.client.NamedRenderTypeManager");
+    public static ReflectorMethod NamedRenderTypeManager_init = new ReflectorMethod(NamedRenderTypeManager, "init");
+    public static ReflectorMethod ForgeHooksClient_onRegisterKeyMappings = new ReflectorMethod(ForgeHooksClient, "onRegisterKeyMappings");
+    public static ReflectorClass GameShuttingDownEvent = new ReflectorClass("net.minecraftforge.event.GameShuttingDownEvent");
+    public static ReflectorConstructor GameShuttingDownEvent_Constructor = new ReflectorConstructor(GameShuttingDownEvent,null);
+
+    //public static ReflectorField ForgeIngameGui_renderVignette = new ReflectorField(ForgeIngameGui, "renderVignette");
+    //public static ReflectorField ForgeIngameGui_renderHelmet = new ReflectorField(ForgeIngameGui, "renderHelmet");
+    //public static ReflectorField ForgeIngameGui_renderPortal = new ReflectorField(ForgeIngameGui, "renderPortal");
+    //public static ReflectorField ForgeIngameGui_renderCrosshairs = new ReflectorField(ForgeIngameGui, "renderCrosshairs");
+    public static ReflectorField ForgeIngameGui_CROSSHAIR_ELEMENT = new ReflectorField(ForgeIngameGui, "CROSSHAIR_ELEMENT");
+    public static ReflectorField ForgeIngameGui_HELMET_ELEMENT = new ReflectorField(ForgeIngameGui, "HELMET_ELEMENT");
+    public static ReflectorField ForgeIngameGui_VIGNETTE_ELEMENT = new ReflectorField(ForgeIngameGui, "VIGNETTE_ELEMENT");
+    public static ReflectorField ForgeIngameGui_PORTAL_ELEMENT = new ReflectorField(ForgeIngameGui, "PORTAL_ELEMENT");
+    public static ReflectorClass OverlayRegistry = new ReflectorClass("net.minecraftforge.client.gui.OverlayRegistry");
+    public static ReflectorMethod OverlayRegistry_enableOverlay = new ReflectorMethod(OverlayRegistry, "enableOverlay");
+    public static ReflectorClass ForgeItem = new ReflectorClass(Item.class);
+    public static ReflectorMethod ForgeItem_getTags = new ReflectorMethod(ForgeItem, "getTags");
+    public static ReflectorMethod ServerLifecycleHooks_handleExit = new ReflectorMethod(ServerLifecycleHooks, "handleExit", new Class[] {Integer.TYPE});
+    public static ReflectorClass ScreenOpenEvent = new ReflectorClass("net.minecraftforge.client.event.ScreenOpenEvent");
+    public static ReflectorConstructor ScreenOpenEvent_Constructor = new ReflectorConstructor(ScreenOpenEvent, new Class[] {Screen.class});
+    public static ReflectorMethod ScreenOpenEvent_getScreen = new ReflectorMethod(ScreenOpenEvent, "getScreen");
+    public static ReflectorMethod BasicEventHooks_onRenderTickStart = new ReflectorMethod(ForgeEventFactory, "onRenderTickStart", new Class[] {Float.TYPE});
+    public static ReflectorMethod BasicEventHooks_onRenderTickEnd = new ReflectorMethod(ForgeEventFactory, "onRenderTickEnd", new Class[] {Float.TYPE});
+    public static ReflectorMethod BasicEventHooks_onPreClientTick = new ReflectorMethod(ForgeEventFactory, "onPreClientTick");
+    public static ReflectorMethod BasicEventHooks_onPostClientTick = new ReflectorMethod(ForgeEventFactory, "onPostClientTick");
+    public static ReflectorMethod ForgeHooksClient_OnClickInput = new ReflectorMethod(ForgeHooksClient, "onClickInput");
+    public static ReflectorClass ClickInputEvent = new ReflectorClass("net.minecraftforge.client.event.InputEvent$ClickInputEvent");
+    public static ReflectorMethod ClickInputEvent_shouldSwingHand = new ReflectorMethod(ClickInputEvent, "shouldSwingHand");
+    public static ReflectorMethod ForgeHooks_onEmptyLeftClick = new ReflectorMethod(ForgeHooks, "onEmptyLeftClick");
+    public static ReflectorMethod ForgeHooks_onEmptyClick = new ReflectorMethod(ForgeHooks, "onEmptyClick");
+    public static ReflectorMethod ForgeHooks_onPickBlock = new ReflectorMethod(ForgeHooks, "onPickBlock");
+    public static ReflectorClass ForgeSession = new ReflectorClass(User.class);
+    public static ReflectorMethod ForgeSession_hasCachedProperties = new ReflectorMethod(ForgeSession, "hasCachedProperties");
+    public static ReflectorMethod ForgeSession_setProperties = new ReflectorMethod(ForgeSession, "setProperties", new Class[] {PropertyMap.class});
+    //public static ReflectorClass WorldEvent_Unload = new ReflectorClass("net.minecraftforge.event.world.WorldEvent$Unload");
+    //public static ReflectorConstructor WorldEvent_Unload_Constructor = new ReflectorConstructor(WorldEvent_Unload, new Class[] {LevelAccessor.class});
+    public static ReflectorMethod ClientHooks_firePlayerLogout = new ReflectorMethod(ForgeHooksClient, "firePlayerLogout", new Class[] {MultiPlayerGameMode.class, LocalPlayer.class});
+    public static ReflectorMethod ClientHooks_handleClientWorldClosing = new ReflectorMethod(ForgeHooksClient, "handleClientLevelClosing");
+    //public static ReflectorClass IForgeResourcePack = new ReflectorClass("net.minecraftforge.common.extensions.IForgeResourcePack");
+    //public static ReflectorMethod IForgeIResourcePack_isHidden = new ReflectorMethod(IForgeResourcePack, "isHidden");
+    public static ReflectorClass ForgePack = new ReflectorClass(Pack.class);
+    
+    public static ReflectorClass ForgeMod = new ReflectorClass("net.minecraftforge.common.ForgeMod");
+    public static ReflectorField ForgeMod_REACH_DISTANCE = new ReflectorField(ForgeMod, "REACH_DISTANCE");
+    public static ReflectorClass RegistryObject = new ReflectorClass("net.minecraftforge.registries.RegistryObject");
+    public static ReflectorMethod RegistryObject_get = new ReflectorMethod(RegistryObject, "get");
+    public static ReflectorMethod ForgeHooks_onServerChatEvent = new ReflectorMethod(ForgeHooks, "onServerChatEvent", new Class[] {ServerGamePacketListenerImpl.class, String.class, Component.class});
+    public static ReflectorMethod ForgeHooks_onInteractEntityAt = new ReflectorMethod(ForgeHooks, "onInteractEntityAt", new Class[] {Player.class, Entity.class, Vec3.class, InteractionHand.class});
+    public static ReflectorMethod IForgePlayer_canInteractWith = IForgePlayer.makeMethod("canInteractWith");
+    public static ReflectorClass NetworkHooks = new ReflectorClass("net.minecraftforge.network.NetworkHooks");
+    public static ReflectorMethod NetworkHooks_onCustomPayload = new ReflectorMethod(NetworkHooks, "onCustomPayload");
+    public static ReflectorClass Entity = new ReflectorClass(Entity.class);
+    public static ReflectorClass PlayerContainerEvent_Open = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Open");
+    public static ReflectorConstructor PlayerContainerEvent_Open_Constructor = new ReflectorConstructor(PlayerContainerEvent_Open, new Class[] {Player.class, AbstractContainerMenu.class});
+    public static ReflectorClass PlayerContainerEvent_Close = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Close");
+    public static ReflectorConstructor PlayerContainerEvent_Close_Constructor = new ReflectorConstructor(PlayerContainerEvent_Close, new Class[] {Player.class, AbstractContainerMenu.class});
+    public static ReflectorMethod Entity_getPersistentData = new ReflectorMethod(Entity, "getPersistentData");
+    public static ReflectorMethod ForgeEventFactory_onPlayerClone = new ReflectorMethod(ForgeEventFactory, "onPlayerClone");
+    public static ReflectorMethod Entity_captureDrops = new ReflectorMethod(Entity, "captureDrops", new Class[0]);
+    public static ReflectorMethod ForgeEventFactory_onPlayerSleepInBed = new ReflectorMethod(ForgeEventFactory, "onPlayerSleepInBed");
+    public static ReflectorMethod ForgeEventFactory_fireSleepingTimeCheck = new ReflectorMethod(ForgeEventFactory, "fireSleepingTimeCheck");
+    public static ReflectorMethod ForgeEventFactory_onPlayerSpawnSet = new ReflectorMethod(ForgeEventFactory, "onPlayerSpawnSet");
+    public static ReflectorMethod ForgeEventFactory_getPlayerTabListDisplayName = new ReflectorMethod(ForgeEventFactory, "getPlayerTabListDisplayName");
+    public static ReflectorMethod ForgeHooks_onChangeGameMode = new ReflectorMethod(ForgeHooks, "onChangeGameMode");
+    public static ReflectorMethod ForgeHooksClient_onInputUpdate = new ReflectorMethod(ForgeHooksClient, "onMovementInputUpdate");
+    public static ReflectorMethod IForgeItemStack_canElytraFly = new ReflectorMethod(IForgeItemStack, "canElytraFly");
+    public static ReflectorMethod IForgeItemStack_getHighlightTip = new ReflectorMethod(IForgeItemStack, "getHighlightTip");
+    public static ReflectorMethod ClientHooks_firePlayerLogin = new ReflectorMethod(ForgeHooksClient, "firePlayerLogin");
+    public static ReflectorMethod NetworkHooks_sendMCRegistryPackets = new ReflectorMethod(NetworkHooks, "sendMCRegistryPackets");
+    public static ReflectorMethod IForgeTileEntity_handleUpdateTag = new ReflectorMethod(IForgeTileEntity, "handleUpdateTag");
+    public static ReflectorMethod IForgeTileEntity_onDataPacket = new ReflectorMethod(IForgeTileEntity, "onDataPacket");
+    public static ReflectorMethod ForgeEventFactory_onClientChat = new ReflectorMethod(ForgeEventFactory, "onClientChat");
+    public static ReflectorMethod ClientHooks_firePlayerRespawn = new ReflectorMethod(ForgeHooksClient, "firePlayerRespawn");
+    public static ReflectorMethod ForgeHooksClient_onRecipesUpdated = new ReflectorMethod(ForgeHooksClient, "onRecipesUpdated");
+    public static ReflectorMethod ForgeEventFactory_onProjectileImpact = new ReflectorMethod(ForgeEventFactory, "onProjectileImpact", new Class[] {Projectile.class, HitResult.class});
+    public static ReflectorClass ItemFishedEvent = new ReflectorClass("net.minecraftforge.event.entity.player.ItemFishedEvent");
+    public static ReflectorConstructor ItemFishedEvent_Constructor = new ReflectorConstructor(ItemFishedEvent, new Class[] {List.class, Integer.TYPE, FishingHook.class});
+    public static ReflectorMethod ItemFishedEvent_getRodDamage = new ReflectorMethod(ItemFishedEvent, "getRodDamage");
+    public static ReflectorClass EnderTeleportEvent = new ReflectorClass("net.minecraftforge.event.entity.EntityTeleportEvent");
+    public static ReflectorMethod ForgeEventFactory_onEnderTeleport = new ReflectorMethod(ForgeEventFactory, "onEnderTeleport");
+    public static ReflectorMethod EnderTeleportEvent_getTargetX = new ReflectorMethod(EnderTeleportEvent, "getTargetX");
+    public static ReflectorMethod EnderTeleportEvent_getTargetY = new ReflectorMethod(EnderTeleportEvent, "getTargetY");
+    public static ReflectorMethod EnderTeleportEvent_getTargetZ = new ReflectorMethod(EnderTeleportEvent, "getTargetZ");
+    public static ReflectorMethod ForgeEventFactory_onBlockPlace = new ReflectorMethod(ForgeEventFactory, "onBlockPlace");
+    public static ReflectorMethod ForgeHooks_shouldSuppressEnderManAnger= new ReflectorMethod(ForgeHooks, "shouldSuppressEnderManAnger");
+    public static ReflectorClass ForgeBlocks = new ReflectorClass("net.minecraftforge.common.Tags$Blocks");
+    public static ReflectorField ENDERMAN_PLACE_ON_BLACKLIST = new ReflectorField(ForgeBlocks, "ENDERMAN_PLACE_ON_BLACKLIST");
+    public static ReflectorClass BlockSnapshot = new ReflectorClass("net.minecraftforge.common.util.BlockSnapshot");
+    public static ReflectorMethod BlockSnapshot_create = new ReflectorMethod(BlockSnapshot, "create", new Class[] {ResourceKey.class, LevelAccessor.class, BlockPos.class});
+    public static ReflectorMethod IForgeBlockState_getSlipperiness = new ReflectorMethod(IForgeBlockState, "getFriction");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseClickedPre = new ReflectorMethod(ForgeHooksClient, "onScreenMouseClickedPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseClickedPost = new ReflectorMethod(ForgeHooksClient, "onScreenMouseClickedPost");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseReleasedPre = new ReflectorMethod(ForgeHooksClient, "onScreenMouseReleasedPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseReleasedPost = new ReflectorMethod(ForgeHooksClient, "onScreenMouseReleasedPost");
+    public static ReflectorMethod ForgeHooksClient_onRawMouseClicked = new ReflectorMethod(ForgeHooksClient, "onRawMouseClicked");
+    public static ReflectorMethod ForgeHooksClient_fireMouseInput = new ReflectorMethod(ForgeHooksClient, "fireMouseInput");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseScrollPre = new ReflectorMethod(ForgeHooksClient, "onScreenMouseScrollPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseScrollPost = new ReflectorMethod(ForgeHooksClient, "onScreenMouseScrollPost");
+    public static ReflectorMethod ForgeHooksClient_onMouseScroll = new ReflectorMethod(ForgeHooksClient, "onMouseScroll");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseDragPre = new ReflectorMethod(ForgeHooksClient, "onScreenMouseDragPre");
+    public static ReflectorMethod ForgeHooksClient_onGuiMouseDragPost = new ReflectorMethod(ForgeHooksClient, "onScreenMouseDragPost");
+    public static ReflectorMethod ForgeHooksClient_clearGuiLayers = new ReflectorMethod(ForgeHooksClient, "clearGuiLayers");
+
+    public static ReflectorMethod ForgeEventFactory_onClientSendMessage = new ReflectorMethod(ForgeEventFactory, "onClientSendMessage");
+    public static ReflectorMethod ForgeHooksClient_pushGuiLayer = new ReflectorMethod(ForgeHooksClient, "pushGuiLayer");
+    public static ReflectorMethod ForgeHooksClient_popGuiLayer = new ReflectorMethod(ForgeHooksClient, "popGuiLayer");    
+    public static ReflectorMethod ForgeHooksClient_resizeGuiLayers = new ReflectorMethod(ForgeHooksClient, "resizeGuiLayers");    
+    public static ReflectorField ForgeConfig_Client_forceSystemNanoTime = new ReflectorField(ForgeConfig_Client,"forceSystemNanoTime");
+
+    public static ReflectorClass RegisterClientReloadListenersEvent = new ReflectorClass("net.minecraftforge.client.event.RegisterClientReloadListenersEvent");
+    public static ReflectorConstructor RegisterClientReloadListenersEvent_Constructor = new ReflectorConstructor(RegisterClientReloadListenersEvent, new Class[] {ReloadableResourceManager.class});
+
+    public static ReflectorClass EntityRenderersEvent_RegisterLayerDefinitions = new ReflectorClass("net.minecraftforge.client.event.EntityRenderersEvent$RegisterLayerDefinitions");
+    public static ReflectorConstructor EntityRenderersEvent_RegisterLayerDefinitions_Constructor = new ReflectorConstructor(EntityRenderersEvent_RegisterLayerDefinitions, new Class[0]);
+
+    public static ReflectorClass EntityRenderersEvent_RegisterRenderers = new ReflectorClass("net.minecraftforge.client.event.EntityRenderersEvent$RegisterRenderers");
+    public static ReflectorConstructor EntityRenderersEvent_RegisterRenderers_Constructor = new ReflectorConstructor(EntityRenderersEvent_RegisterRenderers, new Class[0]);
+
+    //This is only needed for nonvr since vr edits localplayer
+    public static ReflectorClass LocalPlayer = new ReflectorClass(LocalPlayer.class);
+    public static ReflectorMethod LocalPlayer_updateSyncFields = new ReflectorMethod(LocalPlayer, "updateSyncFields");
+        
+    //net.minecraftforge.fml.loading.BackgroundWaiter.runAndTick
+    public static ReflectorClass BackgroundWaiter = new ReflectorClass("net.minecraftforge.fml.loading.BackgroundWaiter");
+    public static ReflectorMethod BackgroundWaiter_runAndTick = new ReflectorMethod(BackgroundWaiter, "runAndTick");
+    //
+    //net.minecraftforge.fml.loading.FMLLoader.progressWindowTick
+    public static ReflectorClass FMLLoader = new ReflectorClass("net.minecraftforge.fml.loading.FMLLoader");
+    public static ReflectorField FMLLoader_progressWindowTick = new ReflectorField(FMLLoader,"progressWindowTick");
+
+    public static ReflectorMethod IForgeEntity_canStartSwimming = new ReflectorMethod(IForgeEntity, "canStartSwimming");
+    public static ReflectorMethod IForgeEntity_isInFluidType = new ReflectorMethod(IForgeEntity, "isInFluidType");
+    public static ReflectorMethod IForgeEntity_canSwimInFluidType = new ReflectorMethod(IForgeEntity, "canSwimInFluidType");
+    public static ReflectorMethod IForgeEntity_getMaxHeightFluidType = new ReflectorMethod(IForgeEntity, "getMaxHeightFluidType");
+    public static ReflectorMethod IForgeEntity_sinkInFluid = new ReflectorMethod(IForgeEntity, "sinkInFluid");
+    public static ReflectorField ForgeMod_WATER_TYPE = new ReflectorField(ForgeMod, "WATER_TYPE");
+    
+    public static ReflectorClass VivecraftResourceLocator = new ReflectorClass("org.vivecraft.tweaker.VivecraftTransformer");
+    public static ReflectorMethod VivecraftResourceLocator_getResourceStream = new ReflectorMethod(VivecraftResourceLocator, "getResourceStream");
+
 }
